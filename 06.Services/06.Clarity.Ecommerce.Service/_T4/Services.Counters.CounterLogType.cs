// <autogenerated>
// <copyright file="CounterLogTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the counter log type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of counter log types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CounterLogTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterLogTypes", "GET", Priority = 1,
            Summary = "Use to get a list of counter log types")]
    public partial class GetCounterLogTypes : TypeSearchModel, IReturn<CounterLogTypePagedResults> { }

    /// <summary>A ServiceStack Route to get counter log types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.View"),
        PublicAPI,
        Route("/Counters/CounterLogTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all counter log types")]
    public partial class GetCounterLogTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all counter log types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.View"),
        PublicAPI,
        Route("/Counters/CounterLogTypesDigest", "GET",
            Summary = "Use to get a hash representing each counter log types")]
    public partial class GetCounterLogTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get counter log type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterLogType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific counter log type")]
    public partial class GetCounterLogTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get counter log type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Counters/CounterLogType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific counter log type by the custom key")]
    public partial class GetCounterLogTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get counter log type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Counters/CounterLogType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific counter log type by the name")]
    public partial class GetCounterLogTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get counter log type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Counters/CounterLogType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific counter log type by the name")]
    public partial class GetCounterLogTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check counter log type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.View"),
        PublicAPI,
        Route("/Counters/CounterLogType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterLogTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter log type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.View"),
        PublicAPI,
        Route("/Counters/CounterLogType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterLogTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter log type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.View"),
        PublicAPI,
        Route("/Counters/CounterLogType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterLogTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter log type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.View"),
        PublicAPI,
        Route("/Counters/CounterLogType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterLogTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create counter log type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLogType/Create", "POST", Priority = 1,
            Summary = "Use to create a new counter log type.")]
    public partial class CreateCounterLogType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert counter log type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Counters/CounterLogType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing counter log type (as needed).")]
    public partial class UpsertCounterLogType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update counter log type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLogType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing counter log type.")]
    public partial class UpdateCounterLogType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate counter log type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLogType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter log type from the system [Soft-Delete]")]
    public partial class DeactivateCounterLogTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate counter log type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Deactivate"),
        PublicAPI,
        Route("/Counters/CounterLogType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter log type from the system [Soft-Delete]")]
    public partial class DeactivateCounterLogTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter log type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLogType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter log type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterLogTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter log type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Reactivate"),
        PublicAPI,
        Route("/Counters/CounterLogType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter log type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterLogTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter log type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLogType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific counter log type from the system [Hard-Delete]")]
    public partial class DeleteCounterLogTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter log type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLogType.Delete"),
        PublicAPI,
        Route("/Counters/CounterLogType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific counter log type from the system [Hard-Delete]")]
    public partial class DeleteCounterLogTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear counter log type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterLogType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all counter log type calls.")]
    public class ClearCounterLogTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CounterLogTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCounterLogTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CounterLogTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CounterLogTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCounterLogTypesForConnect request)
        {
            return await Workflows.CounterLogTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogTypesDigest request)
        {
            return await Workflows.CounterLogTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCounterLogTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CounterLogTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CounterLogTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CounterLogTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CounterLogTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCounterLogTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterLogTypeExistsByID request)
        {
            return await Workflows.CounterLogTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterLogTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterLogTypeExistsByKey request)
        {
            return await Workflows.CounterLogTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterLogTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterLogTypeExistsByName request)
        {
            return await Workflows.CounterLogTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterLogTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterLogTypeExistsByDisplayName request)
        {
            return await Workflows.CounterLogTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCounterLogType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCounterLogType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCounterLogType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCounterLogType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCounterLogType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCounterLogType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCounterLogTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterLogTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCounterLogTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterLogTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCounterLogTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterLogTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCounterLogTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterLogTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCounterLogTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterLogTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCounterLogTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterLogTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogTypeDataAsync,
                    () => Workflows.CounterLogTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCounterLogTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCounterLogTypeCache request)
        {
            await ClearCachedCounterLogTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCounterLogTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCounterLogTypes>(string.Empty),
                    UrnId.Create<GetCounterLogTypeByID>(string.Empty),
                    UrnId.Create<GetCounterLogTypeByKey>(string.Empty),
                    UrnId.Create<GetCounterLogTypeByName>(string.Empty),
                    UrnId.Create<CheckCounterLogTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCounterLogTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCounterLogTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCounterLogTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CounterLogTypeService : CounterLogTypeServiceBase { }
}
