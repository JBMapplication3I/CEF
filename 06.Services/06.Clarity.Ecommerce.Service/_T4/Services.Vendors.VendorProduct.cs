// <autogenerated>
// <copyright file="VendorProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the vendor product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of vendor products.</summary>
    /// <seealso cref="VendorProductSearchModel"/>
    /// <seealso cref="IReturn{VendorProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorProducts", "GET", Priority = 1,
            Summary = "Use to get a list of vendor products")]
    public partial class GetVendorProducts : VendorProductSearchModel, IReturn<VendorProductPagedResults> { }

    /// <summary>A ServiceStack Route to get vendor products for connect.</summary>
    /// <seealso cref="VendorProductSearchModel"/>
    /// <seealso cref="IReturn{List{VendorProductModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.View"),
        PublicAPI,
        Route("/Vendors/VendorProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all vendor products")]
    public partial class GetVendorProductsForConnect : VendorProductSearchModel, IReturn<List<VendorProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all vendor products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.View"),
        PublicAPI,
        Route("/Vendors/VendorProductsDigest", "GET",
            Summary = "Use to get a hash representing each vendor products")]
    public partial class GetVendorProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get vendor product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VendorProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor product")]
    public partial class GetVendorProductByID : ImplementsIDBase, IReturn<VendorProductModel> { }

    /// <summary>A ServiceStack Route to get vendor product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VendorProductModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor product by the custom key")]
    public partial class GetVendorProductByKey : ImplementsKeyBase, IReturn<VendorProductModel> { }

    /// <summary>A ServiceStack Route to check vendor product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.View"),
        PublicAPI,
        Route("/Vendors/VendorProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.View"),
        PublicAPI,
        Route("/Vendors/VendorProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create vendor product.</summary>
    /// <seealso cref="VendorProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new vendor product.")]
    public partial class CreateVendorProduct : VendorProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert vendor product.</summary>
    /// <seealso cref="VendorProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Vendors/VendorProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing vendor product (as needed).")]
    public partial class UpsertVendorProduct : VendorProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update vendor product.</summary>
    /// <seealso cref="VendorProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing vendor product.")]
    public partial class UpdateVendorProduct : VendorProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate vendor product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor product from the system [Soft-Delete]")]
    public partial class DeactivateVendorProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate vendor product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Deactivate"),
        PublicAPI,
        Route("/Vendors/VendorProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor product from the system [Soft-Delete]")]
    public partial class DeactivateVendorProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Reactivate"),
        PublicAPI,
        Route("/Vendors/VendorProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific vendor product from the system [Hard-Delete]")]
    public partial class DeleteVendorProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorProduct.Delete"),
        PublicAPI,
        Route("/Vendors/VendorProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific vendor product from the system [Hard-Delete]")]
    public partial class DeleteVendorProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear vendor product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all vendor product calls.")]
    public class ClearVendorProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VendorProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVendorProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVendorProductModel, VendorProductModel, IVendorProductSearchModel, VendorProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.VendorProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVendorProductsForConnect request)
        {
            return await Workflows.VendorProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorProductsDigest request)
        {
            return await Workflows.VendorProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVendorProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.VendorProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.VendorProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVendorProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorProductExistsByID request)
        {
            return await Workflows.VendorProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorProductExistsByKey request)
        {
            return await Workflows.VendorProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVendorProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVendorProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVendorProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVendorProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVendorProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVendorProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVendorProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVendorProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVendorProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVendorProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVendorProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVendorProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorProductDataAsync,
                    () => Workflows.VendorProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVendorProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVendorProductCache request)
        {
            await ClearCachedVendorProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVendorProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVendorProducts>(string.Empty),
                    UrnId.Create<GetVendorProductByID>(string.Empty),
                    UrnId.Create<GetVendorProductByKey>(string.Empty),
                    UrnId.Create<CheckVendorProductExistsByID>(string.Empty),
                    UrnId.Create<CheckVendorProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VendorProductService : VendorProductServiceBase { }
}
