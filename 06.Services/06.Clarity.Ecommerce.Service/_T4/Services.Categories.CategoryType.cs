// <autogenerated>
// <copyright file="CategoryTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the category type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of category types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CategoryTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryTypes", "GET", Priority = 1,
            Summary = "Use to get a list of category types")]
    public partial class GetCategoryTypes : TypeSearchModel, IReturn<CategoryTypePagedResults> { }

    /// <summary>A ServiceStack Route to get category types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.View"),
        PublicAPI,
        Route("/Categories/CategoryTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all category types")]
    public partial class GetCategoryTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all category types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.View"),
        PublicAPI,
        Route("/Categories/CategoryTypesDigest", "GET",
            Summary = "Use to get a hash representing each category types")]
    public partial class GetCategoryTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific category type")]
    public partial class GetCategoryTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get category type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific category type by the custom key")]
    public partial class GetCategoryTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get category type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific category type by the name")]
    public partial class GetCategoryTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get category type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific category type by the name")]
    public partial class GetCategoryTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check category type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.View"),
        PublicAPI,
        Route("/Categories/CategoryType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.View"),
        PublicAPI,
        Route("/Categories/CategoryType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.View"),
        PublicAPI,
        Route("/Categories/CategoryType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.View"),
        PublicAPI,
        Route("/Categories/CategoryType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create category type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryType/Create", "POST", Priority = 1,
            Summary = "Use to create a new category type.")]
    public partial class CreateCategoryType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert category type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Categories/CategoryType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing category type (as needed).")]
    public partial class UpsertCategoryType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update category type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing category type.")]
    public partial class UpdateCategoryType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category type from the system [Soft-Delete]")]
    public partial class DeactivateCategoryTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate category type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Deactivate"),
        PublicAPI,
        Route("/Categories/CategoryType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category type from the system [Soft-Delete]")]
    public partial class DeactivateCategoryTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Reactivate"),
        PublicAPI,
        Route("/Categories/CategoryType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific category type from the system [Hard-Delete]")]
    public partial class DeleteCategoryTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryType.Delete"),
        PublicAPI,
        Route("/Categories/CategoryType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific category type from the system [Hard-Delete]")]
    public partial class DeleteCategoryTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear category type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all category type calls.")]
    public class ClearCategoryTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CategoryTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCategoryTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CategoryTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CategoryTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCategoryTypesForConnect request)
        {
            return await Workflows.CategoryTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryTypesDigest request)
        {
            return await Workflows.CategoryTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCategoryTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryTypeExistsByID request)
        {
            return await Workflows.CategoryTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryTypeExistsByKey request)
        {
            return await Workflows.CategoryTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryTypeExistsByName request)
        {
            return await Workflows.CategoryTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryTypeExistsByDisplayName request)
        {
            return await Workflows.CategoryTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCategoryType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCategoryType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCategoryType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCategoryType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCategoryType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCategoryType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryTypeDataAsync,
                    () => Workflows.CategoryTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCategoryTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCategoryTypeCache request)
        {
            await ClearCachedCategoryTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCategoryTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCategoryTypes>(string.Empty),
                    UrnId.Create<GetCategoryTypeByID>(string.Empty),
                    UrnId.Create<GetCategoryTypeByKey>(string.Empty),
                    UrnId.Create<GetCategoryTypeByName>(string.Empty),
                    UrnId.Create<CheckCategoryTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCategoryTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCategoryTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCategoryTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CategoryTypeService : CategoryTypeServiceBase { }
}
