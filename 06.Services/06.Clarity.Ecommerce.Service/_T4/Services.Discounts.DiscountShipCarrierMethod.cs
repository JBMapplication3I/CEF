// <autogenerated>
// <copyright file="DiscountShipCarrierMethodService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount ship carrier method service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount ship carrier methods.</summary>
    /// <seealso cref="DiscountShipCarrierMethodSearchModel"/>
    /// <seealso cref="IReturn{DiscountShipCarrierMethodPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountShipCarrierMethods", "GET", Priority = 1,
            Summary = "Use to get a list of discount ship carrier methods")]
    public partial class GetDiscountShipCarrierMethods : DiscountShipCarrierMethodSearchModel, IReturn<DiscountShipCarrierMethodPagedResults> { }

    /// <summary>A ServiceStack Route to get discount ship carrier methods for connect.</summary>
    /// <seealso cref="DiscountShipCarrierMethodSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountShipCarrierMethodModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.View"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethodsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount ship carrier methods")]
    public partial class GetDiscountShipCarrierMethodsForConnect : DiscountShipCarrierMethodSearchModel, IReturn<List<DiscountShipCarrierMethodModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount ship carrier methods.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.View"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethodsDigest", "GET",
            Summary = "Use to get a hash representing each discount ship carrier methods")]
    public partial class GetDiscountShipCarrierMethodsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountShipCarrierMethodModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountShipCarrierMethod/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount ship carrier method")]
    public partial class GetDiscountShipCarrierMethodByID : ImplementsIDBase, IReturn<DiscountShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to get discount ship carrier method.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountShipCarrierMethodModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount ship carrier method by the custom key")]
    public partial class GetDiscountShipCarrierMethodByKey : ImplementsKeyBase, IReturn<DiscountShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to check discount ship carrier method exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.View"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountShipCarrierMethodExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount ship carrier method exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.View"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountShipCarrierMethodExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount ship carrier method.</summary>
    /// <seealso cref="DiscountShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount ship carrier method.")]
    public partial class CreateDiscountShipCarrierMethod : DiscountShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount ship carrier method.</summary>
    /// <seealso cref="DiscountShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount ship carrier method (as needed).")]
    public partial class UpsertDiscountShipCarrierMethod : DiscountShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount ship carrier method.</summary>
    /// <seealso cref="DiscountShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount ship carrier method.")]
    public partial class UpdateDiscountShipCarrierMethod : DiscountShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount ship carrier method from the system [Soft-Delete]")]
    public partial class DeactivateDiscountShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount ship carrier method from the system [Soft-Delete]")]
    public partial class DeactivateDiscountShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount ship carrier method from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount ship carrier method from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount ship carrier method from the system [Hard-Delete]")]
    public partial class DeleteDiscountShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountShipCarrierMethod.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountShipCarrierMethod/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount ship carrier method from the system [Hard-Delete]")]
    public partial class DeleteDiscountShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount ship carrier method cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountShipCarrierMethod/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount ship carrier method calls.")]
    public class ClearDiscountShipCarrierMethodCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountShipCarrierMethodServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountShipCarrierMethods"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountShipCarrierMethods request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountShipCarrierMethodModel, DiscountShipCarrierMethodModel, IDiscountShipCarrierMethodSearchModel, DiscountShipCarrierMethodPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountShipCarrierMethods)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountShipCarrierMethodsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountShipCarrierMethodsForConnect request)
        {
            return await Workflows.DiscountShipCarrierMethods.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountShipCarrierMethodsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountShipCarrierMethodsDigest request)
        {
            return await Workflows.DiscountShipCarrierMethods.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountShipCarrierMethodByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountShipCarrierMethodByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountShipCarrierMethodExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountShipCarrierMethodExistsByID request)
        {
            return await Workflows.DiscountShipCarrierMethods.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountShipCarrierMethodExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountShipCarrierMethodExistsByKey request)
        {
            return await Workflows.DiscountShipCarrierMethods.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountShipCarrierMethodDataAsync,
                    () => Workflows.DiscountShipCarrierMethods.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountShipCarrierMethodCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountShipCarrierMethodCache request)
        {
            await ClearCachedDiscountShipCarrierMethodDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountShipCarrierMethodDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountShipCarrierMethods>(string.Empty),
                    UrnId.Create<GetDiscountShipCarrierMethodByID>(string.Empty),
                    UrnId.Create<GetDiscountShipCarrierMethodByKey>(string.Empty),
                    UrnId.Create<CheckDiscountShipCarrierMethodExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountShipCarrierMethodExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountShipCarrierMethodService : DiscountShipCarrierMethodServiceBase { }
}
