// <autogenerated>
// <copyright file="PriceRuleStoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule stores.</summary>
    /// <seealso cref="PriceRuleStoreSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleStorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleStores", "GET", Priority = 1,
            Summary = "Use to get a list of price rule stores")]
    public partial class GetPriceRuleStores : PriceRuleStoreSearchModel, IReturn<PriceRuleStorePagedResults> { }

    /// <summary>A ServiceStack Route to get price rule stores for connect.</summary>
    /// <seealso cref="PriceRuleStoreSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleStoreModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleStoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule stores")]
    public partial class GetPriceRuleStoresForConnect : PriceRuleStoreSearchModel, IReturn<List<PriceRuleStoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleStoresDigest", "GET",
            Summary = "Use to get a hash representing each price rule stores")]
    public partial class GetPriceRuleStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleStoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleStore/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule store")]
    public partial class GetPriceRuleStoreByID : ImplementsIDBase, IReturn<PriceRuleStoreModel> { }

    /// <summary>A ServiceStack Route to get price rule store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleStoreModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleStore/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule store by the custom key")]
    public partial class GetPriceRuleStoreByKey : ImplementsKeyBase, IReturn<PriceRuleStoreModel> { }

    /// <summary>A ServiceStack Route to check price rule store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule store.</summary>
    /// <seealso cref="PriceRuleStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule store.")]
    public partial class CreatePriceRuleStore : PriceRuleStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule store.</summary>
    /// <seealso cref="PriceRuleStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule store (as needed).")]
    public partial class UpsertPriceRuleStore : PriceRuleStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule store.</summary>
    /// <seealso cref="PriceRuleStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule store.")]
    public partial class UpdatePriceRuleStore : PriceRuleStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule store from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule store from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule store from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule store from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule store from the system [Hard-Delete]")]
    public partial class DeletePriceRuleStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleStore.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleStore/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule store from the system [Hard-Delete]")]
    public partial class DeletePriceRuleStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleStore/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule store calls.")]
    public class ClearPriceRuleStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleStoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleStoreModel, PriceRuleStoreModel, IPriceRuleStoreSearchModel, PriceRuleStorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleStores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleStoresForConnect request)
        {
            return await Workflows.PriceRuleStores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleStoresDigest request)
        {
            return await Workflows.PriceRuleStores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleStores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleStores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleStoreExistsByID request)
        {
            return await Workflows.PriceRuleStores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleStoreExistsByKey request)
        {
            return await Workflows.PriceRuleStores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleStoreDataAsync,
                    () => Workflows.PriceRuleStores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleStoreCache request)
        {
            await ClearCachedPriceRuleStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleStores>(string.Empty),
                    UrnId.Create<GetPriceRuleStoreByID>(string.Empty),
                    UrnId.Create<GetPriceRuleStoreByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleStoreExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleStoreService : PriceRuleStoreServiceBase { }
}
