// <autogenerated>
// <copyright file="CartItemService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart item service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart items.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{CartItemPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartItems", "GET", Priority = 1,
            Summary = "Use to get a list of cart items")]
    public partial class GetCartItems : SalesItemBaseSearchModel, IReturn<CartItemPagedResults> { }

    /// <summary>A ServiceStack Route to get cart items for connect.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemBaseModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.View"),
        PublicAPI,
        Route("/Shopping/CartItemsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart items")]
    public partial class GetCartItemsForConnect : SalesItemBaseSearchModel, IReturn<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart items.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.View"),
        PublicAPI,
        Route("/Shopping/CartItemsDigest", "GET",
            Summary = "Use to get a hash representing each cart items")]
    public partial class GetCartItemsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartItem/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart item")]
    public partial class GetCartItemByID : ImplementsIDBase, IReturn<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get cart item.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Shopping/CartItem/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart item by the custom key")]
    public partial class GetCartItemByKey : ImplementsKeyBase, IReturn<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get cart item.</summary>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Shopping/CartItem/Name", "GET", Priority = 1,
            Summary = "Use to get a specific cart item by the name")]
    public partial class GetCartItemByName : ImplementsNameBase, IReturn<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to check cart item exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.View"),
        PublicAPI,
        Route("/Shopping/CartItem/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartItemExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart item exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.View"),
        PublicAPI,
        Route("/Shopping/CartItem/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartItemExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart item exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.View"),
        PublicAPI,
        Route("/Shopping/CartItem/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartItemExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItem/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart item.")]
    public partial class CreateCartItem : SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartItem/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart item (as needed).")]
    public partial class UpsertCartItem : SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItem/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart item.")]
    public partial class UpdateCartItem : SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItem/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart item from the system [Soft-Delete]")]
    public partial class DeactivateCartItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartItem/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart item from the system [Soft-Delete]")]
    public partial class DeactivateCartItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItem/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartItem/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItem/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart item from the system [Hard-Delete]")]
    public partial class DeleteCartItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItem.Delete"),
        PublicAPI,
        Route("/Shopping/CartItem/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart item from the system [Hard-Delete]")]
    public partial class DeleteCartItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart item cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartItem/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart item calls.")]
    public class ClearCartItemCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartItemServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartItems"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItems request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemBaseModel<IAppliedCartItemDiscountModel>, SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>, ISalesItemBaseSearchModel, CartItemPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartItems)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartItemsForConnect request)
        {
            return await Workflows.CartItems.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemsDigest request)
        {
            return await Workflows.CartItems.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CartItems, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartItemExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartItemExistsByID request)
        {
            return await Workflows.CartItems.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartItemExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartItemExistsByKey request)
        {
            return await Workflows.CartItems.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartItemExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartItemExistsByName request)
        {
            return await Workflows.CartItems.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemDataAsync,
                    () => Workflows.CartItems.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartItemCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartItemCache request)
        {
            await ClearCachedCartItemDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartItemDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartItems>(string.Empty),
                    UrnId.Create<GetCartItemByID>(string.Empty),
                    UrnId.Create<GetCartItemByKey>(string.Empty),
                    UrnId.Create<GetCartItemByName>(string.Empty),
                    UrnId.Create<CheckCartItemExistsByID>(string.Empty),
                    UrnId.Create<CheckCartItemExistsByKey>(string.Empty),
                    UrnId.Create<CheckCartItemExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartItemService : CartItemServiceBase { }
}
