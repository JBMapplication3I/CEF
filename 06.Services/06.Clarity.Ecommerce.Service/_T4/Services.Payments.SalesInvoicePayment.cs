// <autogenerated>
// <copyright file="SalesInvoicePaymentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales invoice payment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales invoice payments.</summary>
    /// <seealso cref="SalesInvoicePaymentSearchModel"/>
    /// <seealso cref="IReturn{SalesInvoicePaymentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesInvoicePayments", "GET", Priority = 1,
            Summary = "Use to get a list of sales invoice payments")]
    public partial class GetSalesInvoicePayments : SalesInvoicePaymentSearchModel, IReturn<SalesInvoicePaymentPagedResults> { }

    /// <summary>A ServiceStack Route to get sales invoice payments for connect.</summary>
    /// <seealso cref="SalesInvoicePaymentSearchModel"/>
    /// <seealso cref="IReturn{List{SalesInvoicePaymentModel}}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.View"),
        PublicAPI,
        Route("/Payments/SalesInvoicePaymentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales invoice payments")]
    public partial class GetSalesInvoicePaymentsForConnect : SalesInvoicePaymentSearchModel, IReturn<List<SalesInvoicePaymentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales invoice payments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.View"),
        PublicAPI,
        Route("/Payments/SalesInvoicePaymentsDigest", "GET",
            Summary = "Use to get a hash representing each sales invoice payments")]
    public partial class GetSalesInvoicePaymentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales invoice payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesInvoicePaymentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesInvoicePayment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice payment")]
    public partial class GetSalesInvoicePaymentByID : ImplementsIDBase, IReturn<SalesInvoicePaymentModel> { }

    /// <summary>A ServiceStack Route to get sales invoice payment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesInvoicePaymentModel}"/>
    [PublicAPI,
        Route("/Payments/SalesInvoicePayment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice payment by the custom key")]
    public partial class GetSalesInvoicePaymentByKey : ImplementsKeyBase, IReturn<SalesInvoicePaymentModel> { }

    /// <summary>A ServiceStack Route to check sales invoice payment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.View"),
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoicePaymentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice payment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.View"),
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoicePaymentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales invoice payment.</summary>
    /// <seealso cref="SalesInvoicePaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales invoice payment.")]
    public partial class CreateSalesInvoicePayment : SalesInvoicePaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales invoice payment.</summary>
    /// <seealso cref="SalesInvoicePaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales invoice payment (as needed).")]
    public partial class UpsertSalesInvoicePayment : SalesInvoicePaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales invoice payment.</summary>
    /// <seealso cref="SalesInvoicePaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales invoice payment.")]
    public partial class UpdateSalesInvoicePayment : SalesInvoicePaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales invoice payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales invoice payment from the system [Soft-Delete]")]
    public partial class DeactivateSalesInvoicePaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales invoice payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Deactivate"),
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales invoice payment from the system [Soft-Delete]")]
    public partial class DeactivateSalesInvoicePaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales invoice payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales invoice payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesInvoicePaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales invoice payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Reactivate"),
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales invoice payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesInvoicePaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales invoice payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales invoice payment from the system [Hard-Delete]")]
    public partial class DeleteSalesInvoicePaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales invoice payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesInvoicePayment.Delete"),
        PublicAPI,
        Route("/Payments/SalesInvoicePayment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales invoice payment from the system [Hard-Delete]")]
    public partial class DeleteSalesInvoicePaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales invoice payment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesInvoicePayment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales invoice payment calls.")]
    public class ClearSalesInvoicePaymentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesInvoicePaymentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesInvoicePayments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoicePayments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesInvoicePaymentModel, SalesInvoicePaymentModel, ISalesInvoicePaymentSearchModel, SalesInvoicePaymentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesInvoicePayments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoicePaymentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesInvoicePaymentsForConnect request)
        {
            return await Workflows.SalesInvoicePayments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoicePaymentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoicePaymentsDigest request)
        {
            return await Workflows.SalesInvoicePayments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesInvoicePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoicePaymentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesInvoicePayments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoicePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoicePaymentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesInvoicePayments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesInvoicePaymentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoicePaymentExistsByID request)
        {
            return await Workflows.SalesInvoicePayments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoicePaymentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoicePaymentExistsByKey request)
        {
            return await Workflows.SalesInvoicePayments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesInvoicePayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesInvoicePayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesInvoicePayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesInvoicePayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesInvoicePayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesInvoicePayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesInvoicePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesInvoicePaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesInvoicePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesInvoicePaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesInvoicePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesInvoicePaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesInvoicePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesInvoicePaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesInvoicePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesInvoicePaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesInvoicePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesInvoicePaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoicePaymentDataAsync,
                    () => Workflows.SalesInvoicePayments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesInvoicePaymentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesInvoicePaymentCache request)
        {
            await ClearCachedSalesInvoicePaymentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesInvoicePaymentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesInvoicePayments>(string.Empty),
                    UrnId.Create<GetSalesInvoicePaymentByID>(string.Empty),
                    UrnId.Create<GetSalesInvoicePaymentByKey>(string.Empty),
                    UrnId.Create<CheckSalesInvoicePaymentExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesInvoicePaymentExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesInvoicePaymentService : SalesInvoicePaymentServiceBase { }
}
