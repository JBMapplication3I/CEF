// <autogenerated>
// <copyright file="DiscountProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount products.</summary>
    /// <seealso cref="DiscountProductSearchModel"/>
    /// <seealso cref="IReturn{DiscountProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountProducts", "GET", Priority = 1,
            Summary = "Use to get a list of discount products")]
    public partial class GetDiscountProducts : DiscountProductSearchModel, IReturn<DiscountProductPagedResults> { }

    /// <summary>A ServiceStack Route to get discount products for connect.</summary>
    /// <seealso cref="DiscountProductSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountProductModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.View"),
        PublicAPI,
        Route("/Discounts/DiscountProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount products")]
    public partial class GetDiscountProductsForConnect : DiscountProductSearchModel, IReturn<List<DiscountProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.View"),
        PublicAPI,
        Route("/Discounts/DiscountProductsDigest", "GET",
            Summary = "Use to get a hash representing each discount products")]
    public partial class GetDiscountProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount product")]
    public partial class GetDiscountProductByID : ImplementsIDBase, IReturn<DiscountProductModel> { }

    /// <summary>A ServiceStack Route to get discount product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountProductModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount product by the custom key")]
    public partial class GetDiscountProductByKey : ImplementsKeyBase, IReturn<DiscountProductModel> { }

    /// <summary>A ServiceStack Route to check discount product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.View"),
        PublicAPI,
        Route("/Discounts/DiscountProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.View"),
        PublicAPI,
        Route("/Discounts/DiscountProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount product.</summary>
    /// <seealso cref="DiscountProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount product.")]
    public partial class CreateDiscountProduct : DiscountProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount product.</summary>
    /// <seealso cref="DiscountProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount product (as needed).")]
    public partial class UpsertDiscountProduct : DiscountProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount product.</summary>
    /// <seealso cref="DiscountProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount product.")]
    public partial class UpdateDiscountProduct : DiscountProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount product from the system [Soft-Delete]")]
    public partial class DeactivateDiscountProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount product from the system [Soft-Delete]")]
    public partial class DeactivateDiscountProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount product from the system [Hard-Delete]")]
    public partial class DeleteDiscountProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProduct.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount product from the system [Hard-Delete]")]
    public partial class DeleteDiscountProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount product calls.")]
    public class ClearDiscountProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountProductModel, DiscountProductModel, IDiscountProductSearchModel, DiscountProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountProductsForConnect request)
        {
            return await Workflows.DiscountProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductsDigest request)
        {
            return await Workflows.DiscountProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountProductExistsByID request)
        {
            return await Workflows.DiscountProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountProductExistsByKey request)
        {
            return await Workflows.DiscountProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductDataAsync,
                    () => Workflows.DiscountProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountProductCache request)
        {
            await ClearCachedDiscountProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountProducts>(string.Empty),
                    UrnId.Create<GetDiscountProductByID>(string.Empty),
                    UrnId.Create<GetDiscountProductByKey>(string.Empty),
                    UrnId.Create<CheckDiscountProductExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountProductService : DiscountProductServiceBase { }
}
