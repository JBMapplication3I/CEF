// <autogenerated>
// <copyright file="BrandUserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand users.</summary>
    /// <seealso cref="BrandUserSearchModel"/>
    /// <seealso cref="IReturn{BrandUserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandUsers", "GET", Priority = 1,
            Summary = "Use to get a list of brand users")]
    public partial class GetBrandUsers : BrandUserSearchModel, IReturn<BrandUserPagedResults> { }

    /// <summary>A ServiceStack Route to get brand users for connect.</summary>
    /// <seealso cref="BrandUserSearchModel"/>
    /// <seealso cref="IReturn{List{BrandUserModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.View"),
        PublicAPI,
        Route("/Brands/BrandUsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand users")]
    public partial class GetBrandUsersForConnect : BrandUserSearchModel, IReturn<List<BrandUserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.View"),
        PublicAPI,
        Route("/Brands/BrandUsersDigest", "GET",
            Summary = "Use to get a hash representing each brand users")]
    public partial class GetBrandUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandUserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandUser/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand user")]
    public partial class GetBrandUserByID : ImplementsIDBase, IReturn<BrandUserModel> { }

    /// <summary>A ServiceStack Route to get brand user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandUserModel}"/>
    [PublicAPI,
        Route("/Brands/BrandUser/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand user by the custom key")]
    public partial class GetBrandUserByKey : ImplementsKeyBase, IReturn<BrandUserModel> { }

    /// <summary>A ServiceStack Route to check brand user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.View"),
        PublicAPI,
        Route("/Brands/BrandUser/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.View"),
        PublicAPI,
        Route("/Brands/BrandUser/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand user.</summary>
    /// <seealso cref="BrandUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandUser/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand user.")]
    public partial class CreateBrandUser : BrandUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand user.</summary>
    /// <seealso cref="BrandUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandUser/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand user (as needed).")]
    public partial class UpsertBrandUser : BrandUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand user.</summary>
    /// <seealso cref="BrandUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandUser/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand user.")]
    public partial class UpdateBrandUser : BrandUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandUser/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand user from the system [Soft-Delete]")]
    public partial class DeactivateBrandUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandUser/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand user from the system [Soft-Delete]")]
    public partial class DeactivateBrandUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandUser/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandUser/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandUser/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand user from the system [Hard-Delete]")]
    public partial class DeleteBrandUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandUser.Delete"),
        PublicAPI,
        Route("/Brands/BrandUser/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand user from the system [Hard-Delete]")]
    public partial class DeleteBrandUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandUser/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand user calls.")]
    public class ClearBrandUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandUserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandUserModel, BrandUserModel, IBrandUserSearchModel, BrandUserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandUsers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandUsersForConnect request)
        {
            return await Workflows.BrandUsers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandUsersDigest request)
        {
            return await Workflows.BrandUsers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandUsers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandUsers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandUserExistsByID request)
        {
            return await Workflows.BrandUsers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandUserExistsByKey request)
        {
            return await Workflows.BrandUsers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandUserDataAsync,
                    () => Workflows.BrandUsers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandUserCache request)
        {
            await ClearCachedBrandUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandUsers>(string.Empty),
                    UrnId.Create<GetBrandUserByID>(string.Empty),
                    UrnId.Create<GetBrandUserByKey>(string.Empty),
                    UrnId.Create<CheckBrandUserExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandUserService : BrandUserServiceBase { }
}
