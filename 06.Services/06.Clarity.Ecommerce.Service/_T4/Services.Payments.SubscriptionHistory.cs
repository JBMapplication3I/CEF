// <autogenerated>
// <copyright file="SubscriptionHistoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the subscription history service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of subscription histories.</summary>
    /// <seealso cref="SubscriptionHistorySearchModel"/>
    /// <seealso cref="IReturn{SubscriptionHistoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionHistories", "GET", Priority = 1,
            Summary = "Use to get a list of subscription histories")]
    public partial class GetSubscriptionHistories : SubscriptionHistorySearchModel, IReturn<SubscriptionHistoryPagedResults> { }

    /// <summary>A ServiceStack Route to get subscription histories for connect.</summary>
    /// <seealso cref="SubscriptionHistorySearchModel"/>
    /// <seealso cref="IReturn{List{SubscriptionHistoryModel}}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.View"),
        PublicAPI,
        Route("/Payments/SubscriptionHistoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all subscription histories")]
    public partial class GetSubscriptionHistoriesForConnect : SubscriptionHistorySearchModel, IReturn<List<SubscriptionHistoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all subscription histories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.View"),
        PublicAPI,
        Route("/Payments/SubscriptionHistoriesDigest", "GET",
            Summary = "Use to get a hash representing each subscription histories")]
    public partial class GetSubscriptionHistoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get subscription history.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SubscriptionHistoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionHistory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription history")]
    public partial class GetSubscriptionHistoryByID : ImplementsIDBase, IReturn<SubscriptionHistoryModel> { }

    /// <summary>A ServiceStack Route to get subscription history.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SubscriptionHistoryModel}"/>
    [PublicAPI,
        Route("/Payments/SubscriptionHistory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription history by the custom key")]
    public partial class GetSubscriptionHistoryByKey : ImplementsKeyBase, IReturn<SubscriptionHistoryModel> { }

    /// <summary>A ServiceStack Route to check subscription history exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.View"),
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionHistoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription history exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.View"),
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionHistoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create subscription history.</summary>
    /// <seealso cref="SubscriptionHistoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Create", "POST", Priority = 1,
            Summary = "Use to create a new subscription history.")]
    public partial class CreateSubscriptionHistory : SubscriptionHistoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert subscription history.</summary>
    /// <seealso cref="SubscriptionHistoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing subscription history (as needed).")]
    public partial class UpsertSubscriptionHistory : SubscriptionHistoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update subscription history.</summary>
    /// <seealso cref="SubscriptionHistoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing subscription history.")]
    public partial class UpdateSubscriptionHistory : SubscriptionHistoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate subscription history.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription history from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionHistoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate subscription history by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Deactivate"),
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription history from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionHistoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription history.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription history from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionHistoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription history by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Reactivate"),
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription history from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionHistoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription history.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific subscription history from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionHistoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription history by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionHistory.Delete"),
        PublicAPI,
        Route("/Payments/SubscriptionHistory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific subscription history from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionHistoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear subscription history cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionHistory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all subscription history calls.")]
    public class ClearSubscriptionHistoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SubscriptionHistoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSubscriptionHistories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionHistories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISubscriptionHistoryModel, SubscriptionHistoryModel, ISubscriptionHistorySearchModel, SubscriptionHistoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SubscriptionHistories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionHistoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSubscriptionHistoriesForConnect request)
        {
            return await Workflows.SubscriptionHistories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionHistoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionHistoriesDigest request)
        {
            return await Workflows.SubscriptionHistories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSubscriptionHistoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionHistoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SubscriptionHistories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionHistoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionHistoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SubscriptionHistories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSubscriptionHistoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionHistoryExistsByID request)
        {
            return await Workflows.SubscriptionHistories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionHistoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionHistoryExistsByKey request)
        {
            return await Workflows.SubscriptionHistories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSubscriptionHistory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSubscriptionHistory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSubscriptionHistory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSubscriptionHistory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSubscriptionHistory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSubscriptionHistory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionHistoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionHistoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionHistoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionHistoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionHistoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionHistoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionHistoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionHistoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionHistoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionHistoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionHistoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionHistoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionHistoryDataAsync,
                    () => Workflows.SubscriptionHistories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSubscriptionHistoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSubscriptionHistoryCache request)
        {
            await ClearCachedSubscriptionHistoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSubscriptionHistoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSubscriptionHistories>(string.Empty),
                    UrnId.Create<GetSubscriptionHistoryByID>(string.Empty),
                    UrnId.Create<GetSubscriptionHistoryByKey>(string.Empty),
                    UrnId.Create<CheckSubscriptionHistoryExistsByID>(string.Empty),
                    UrnId.Create<CheckSubscriptionHistoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SubscriptionHistoryService : SubscriptionHistoryServiceBase { }
}
