// <autogenerated>
// <copyright file="DiscountCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount categories.</summary>
    /// <seealso cref="DiscountCategorySearchModel"/>
    /// <seealso cref="IReturn{DiscountCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCategories", "GET", Priority = 1,
            Summary = "Use to get a list of discount categories")]
    public partial class GetDiscountCategories : DiscountCategorySearchModel, IReturn<DiscountCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get discount categories for connect.</summary>
    /// <seealso cref="DiscountCategorySearchModel"/>
    /// <seealso cref="IReturn{List{DiscountCategoryModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.View"),
        PublicAPI,
        Route("/Discounts/DiscountCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount categories")]
    public partial class GetDiscountCategoriesForConnect : DiscountCategorySearchModel, IReturn<List<DiscountCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.View"),
        PublicAPI,
        Route("/Discounts/DiscountCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each discount categories")]
    public partial class GetDiscountCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount category")]
    public partial class GetDiscountCategoryByID : ImplementsIDBase, IReturn<DiscountCategoryModel> { }

    /// <summary>A ServiceStack Route to get discount category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountCategoryModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount category by the custom key")]
    public partial class GetDiscountCategoryByKey : ImplementsKeyBase, IReturn<DiscountCategoryModel> { }

    /// <summary>A ServiceStack Route to check discount category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.View"),
        PublicAPI,
        Route("/Discounts/DiscountCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.View"),
        PublicAPI,
        Route("/Discounts/DiscountCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount category.</summary>
    /// <seealso cref="DiscountCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount category.")]
    public partial class CreateDiscountCategory : DiscountCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount category.</summary>
    /// <seealso cref="DiscountCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount category (as needed).")]
    public partial class UpsertDiscountCategory : DiscountCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount category.</summary>
    /// <seealso cref="DiscountCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount category.")]
    public partial class UpdateDiscountCategory : DiscountCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount category from the system [Soft-Delete]")]
    public partial class DeactivateDiscountCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount category from the system [Soft-Delete]")]
    public partial class DeactivateDiscountCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount category from the system [Hard-Delete]")]
    public partial class DeleteDiscountCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCategory.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount category from the system [Hard-Delete]")]
    public partial class DeleteDiscountCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount category calls.")]
    public class ClearDiscountCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountCategoryModel, DiscountCategoryModel, IDiscountCategorySearchModel, DiscountCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountCategoriesForConnect request)
        {
            return await Workflows.DiscountCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCategoriesDigest request)
        {
            return await Workflows.DiscountCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountCategoryExistsByID request)
        {
            return await Workflows.DiscountCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountCategoryExistsByKey request)
        {
            return await Workflows.DiscountCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCategoryDataAsync,
                    () => Workflows.DiscountCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountCategoryCache request)
        {
            await ClearCachedDiscountCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountCategories>(string.Empty),
                    UrnId.Create<GetDiscountCategoryByID>(string.Empty),
                    UrnId.Create<GetDiscountCategoryByKey>(string.Empty),
                    UrnId.Create<CheckDiscountCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountCategoryService : DiscountCategoryServiceBase { }
}
