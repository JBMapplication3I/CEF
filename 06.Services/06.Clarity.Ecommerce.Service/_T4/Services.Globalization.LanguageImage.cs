// <autogenerated>
// <copyright file="LanguageImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the language image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of language images.</summary>
    /// <seealso cref="LanguageImageSearchModel"/>
    /// <seealso cref="IReturn{LanguageImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/LanguageImages", "GET", Priority = 1,
            Summary = "Use to get a list of language images")]
    public partial class GetLanguageImages : LanguageImageSearchModel, IReturn<LanguageImagePagedResults> { }

    /// <summary>A ServiceStack Route to get language images for connect.</summary>
    /// <seealso cref="LanguageImageSearchModel"/>
    /// <seealso cref="IReturn{List{LanguageImageModel}}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.View"),
        PublicAPI,
        Route("/Globalization/LanguageImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all language images")]
    public partial class GetLanguageImagesForConnect : LanguageImageSearchModel, IReturn<List<LanguageImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all language images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.View"),
        PublicAPI,
        Route("/Globalization/LanguageImagesDigest", "GET",
            Summary = "Use to get a hash representing each language images")]
    public partial class GetLanguageImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get language image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{LanguageImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/LanguageImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific language image")]
    public partial class GetLanguageImageByID : ImplementsIDBase, IReturn<LanguageImageModel> { }

    /// <summary>A ServiceStack Route to get language image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{LanguageImageModel}"/>
    [PublicAPI,
        Route("/Globalization/LanguageImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific language image by the custom key")]
    public partial class GetLanguageImageByKey : ImplementsKeyBase, IReturn<LanguageImageModel> { }

    /// <summary>A ServiceStack Route to get language image.</summary>
    /// <seealso cref="IReturn{LanguageImageModel}"/>
    [PublicAPI,
        Route("/Globalization/LanguageImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific language image by the name")]
    public partial class GetLanguageImageByName : ImplementsNameBase, IReturn<LanguageImageModel> { }

    /// <summary>A ServiceStack Route to check language image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.View"),
        PublicAPI,
        Route("/Globalization/LanguageImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check language image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.View"),
        PublicAPI,
        Route("/Globalization/LanguageImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check language image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.View"),
        PublicAPI,
        Route("/Globalization/LanguageImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create language image.</summary>
    /// <seealso cref="LanguageImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new language image.")]
    public partial class CreateLanguageImage : LanguageImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert language image.</summary>
    /// <seealso cref="LanguageImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Globalization/LanguageImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing language image (as needed).")]
    public partial class UpsertLanguageImage : LanguageImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update language image.</summary>
    /// <seealso cref="LanguageImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing language image.")]
    public partial class UpdateLanguageImage : LanguageImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate language image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific language image from the system [Soft-Delete]")]
    public partial class DeactivateLanguageImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate language image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Deactivate"),
        PublicAPI,
        Route("/Globalization/LanguageImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific language image from the system [Soft-Delete]")]
    public partial class DeactivateLanguageImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate language image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific language image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLanguageImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate language image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Reactivate"),
        PublicAPI,
        Route("/Globalization/LanguageImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific language image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLanguageImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete language image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific language image from the system [Hard-Delete]")]
    public partial class DeleteLanguageImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete language image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImage.Delete"),
        PublicAPI,
        Route("/Globalization/LanguageImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific language image from the system [Hard-Delete]")]
    public partial class DeleteLanguageImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear language image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/LanguageImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all language image calls.")]
    public class ClearLanguageImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class LanguageImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetLanguageImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ILanguageImageModel, LanguageImageModel, ILanguageImageSearchModel, LanguageImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.LanguageImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetLanguageImagesForConnect request)
        {
            return await Workflows.LanguageImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImagesDigest request)
        {
            return await Workflows.LanguageImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetLanguageImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.LanguageImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.LanguageImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.LanguageImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckLanguageImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageExistsByID request)
        {
            return await Workflows.LanguageImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLanguageImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageExistsByKey request)
        {
            return await Workflows.LanguageImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLanguageImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageExistsByName request)
        {
            return await Workflows.LanguageImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertLanguageImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertLanguageImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateLanguageImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateLanguageImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateLanguageImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateLanguageImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateLanguageImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLanguageImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateLanguageImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLanguageImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateLanguageImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLanguageImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateLanguageImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLanguageImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteLanguageImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLanguageImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteLanguageImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLanguageImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageDataAsync,
                    () => Workflows.LanguageImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearLanguageImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearLanguageImageCache request)
        {
            await ClearCachedLanguageImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedLanguageImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetLanguageImages>(string.Empty),
                    UrnId.Create<GetLanguageImageByID>(string.Empty),
                    UrnId.Create<GetLanguageImageByKey>(string.Empty),
                    UrnId.Create<GetLanguageImageByName>(string.Empty),
                    UrnId.Create<CheckLanguageImageExistsByID>(string.Empty),
                    UrnId.Create<CheckLanguageImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckLanguageImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class LanguageImageService : LanguageImageServiceBase { }
}
