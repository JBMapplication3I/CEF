// <autogenerated>
// <copyright file="InventoryLocationSectionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the inventory location section service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of inventory location sections.</summary>
    /// <seealso cref="InventoryLocationSectionSearchModel"/>
    /// <seealso cref="IReturn{InventoryLocationSectionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationSections", "GET", Priority = 1,
            Summary = "Use to get a list of inventory location sections")]
    public partial class GetInventoryLocationSections : InventoryLocationSectionSearchModel, IReturn<InventoryLocationSectionPagedResults> { }

    /// <summary>A ServiceStack Route to get inventory location sections for connect.</summary>
    /// <seealso cref="InventoryLocationSectionSearchModel"/>
    /// <seealso cref="IReturn{List{InventoryLocationSectionModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSectionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all inventory location sections")]
    public partial class GetInventoryLocationSectionsForConnect : InventoryLocationSectionSearchModel, IReturn<List<InventoryLocationSectionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all inventory location sections.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSectionsDigest", "GET",
            Summary = "Use to get a hash representing each inventory location sections")]
    public partial class GetInventoryLocationSectionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{InventoryLocationSectionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationSection/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location section")]
    public partial class GetInventoryLocationSectionByID : ImplementsIDBase, IReturn<InventoryLocationSectionModel> { }

    /// <summary>A ServiceStack Route to get inventory location section.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{InventoryLocationSectionModel}"/>
    [PublicAPI,
        Route("/Inventory/InventoryLocationSection/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location section by the custom key")]
    public partial class GetInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<InventoryLocationSectionModel> { }

    /// <summary>A ServiceStack Route to get inventory location section.</summary>
    /// <seealso cref="IReturn{InventoryLocationSectionModel}"/>
    [PublicAPI,
        Route("/Inventory/InventoryLocationSection/Name", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location section by the name")]
    public partial class GetInventoryLocationSectionByName : ImplementsNameBase, IReturn<InventoryLocationSectionModel> { }

    /// <summary>A ServiceStack Route to check inventory location section exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationSectionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check inventory location section exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationSectionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check inventory location section exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationSectionExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create inventory location section.</summary>
    /// <seealso cref="InventoryLocationSectionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Create", "POST", Priority = 1,
            Summary = "Use to create a new inventory location section.")]
    public partial class CreateInventoryLocationSection : InventoryLocationSectionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert inventory location section.</summary>
    /// <seealso cref="InventoryLocationSectionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing inventory location section (as needed).")]
    public partial class UpsertInventoryLocationSection : InventoryLocationSectionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update inventory location section.</summary>
    /// <seealso cref="InventoryLocationSectionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing inventory location section.")]
    public partial class UpdateInventoryLocationSection : InventoryLocationSectionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location section from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationSectionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate inventory location section by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Deactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location section from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location section from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationSectionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location section by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Reactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location section from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific inventory location section from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationSectionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location section by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationSection.Delete"),
        PublicAPI,
        Route("/Inventory/InventoryLocationSection/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific inventory location section from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear inventory location section cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationSection/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all inventory location section calls.")]
    public class ClearInventoryLocationSectionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class InventoryLocationSectionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetInventoryLocationSections"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationSections request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IInventoryLocationSectionModel, InventoryLocationSectionModel, IInventoryLocationSectionSearchModel, InventoryLocationSectionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.InventoryLocationSections)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationSectionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetInventoryLocationSectionsForConnect request)
        {
            return await Workflows.InventoryLocationSections.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationSectionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationSectionsDigest request)
        {
            return await Workflows.InventoryLocationSections.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationSectionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.InventoryLocationSections, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationSectionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.InventoryLocationSections, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationSectionByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationSectionByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.InventoryLocationSections, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckInventoryLocationSectionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationSectionExistsByID request)
        {
            return await Workflows.InventoryLocationSections.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckInventoryLocationSectionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationSectionExistsByKey request)
        {
            return await Workflows.InventoryLocationSections.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckInventoryLocationSectionExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationSectionExistsByName request)
        {
            return await Workflows.InventoryLocationSections.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertInventoryLocationSection"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertInventoryLocationSection request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateInventoryLocationSection"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateInventoryLocationSection request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateInventoryLocationSection"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateInventoryLocationSection request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationSectionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationSectionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationSectionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationSectionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationSectionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationSectionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationSectionDataAsync,
                    () => Workflows.InventoryLocationSections.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearInventoryLocationSectionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearInventoryLocationSectionCache request)
        {
            await ClearCachedInventoryLocationSectionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedInventoryLocationSectionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetInventoryLocationSections>(string.Empty),
                    UrnId.Create<GetInventoryLocationSectionByID>(string.Empty),
                    UrnId.Create<GetInventoryLocationSectionByKey>(string.Empty),
                    UrnId.Create<GetInventoryLocationSectionByName>(string.Empty),
                    UrnId.Create<CheckInventoryLocationSectionExistsByID>(string.Empty),
                    UrnId.Create<CheckInventoryLocationSectionExistsByKey>(string.Empty),
                    UrnId.Create<CheckInventoryLocationSectionExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class InventoryLocationSectionService : InventoryLocationSectionServiceBase { }
}
