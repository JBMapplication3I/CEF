// <autogenerated>
// <copyright file="SubscriptionTypeRepeatTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the subscription type repeat type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of subscription type repeat types.</summary>
    /// <seealso cref="SubscriptionTypeRepeatTypeSearchModel"/>
    /// <seealso cref="IReturn{SubscriptionTypeRepeatTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionTypeRepeatTypes", "GET", Priority = 1,
            Summary = "Use to get a list of subscription type repeat types")]
    public partial class GetSubscriptionTypeRepeatTypes : SubscriptionTypeRepeatTypeSearchModel, IReturn<SubscriptionTypeRepeatTypePagedResults> { }

    /// <summary>A ServiceStack Route to get subscription type repeat types for connect.</summary>
    /// <seealso cref="SubscriptionTypeRepeatTypeSearchModel"/>
    /// <seealso cref="IReturn{List{SubscriptionTypeRepeatTypeModel}}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all subscription type repeat types")]
    public partial class GetSubscriptionTypeRepeatTypesForConnect : SubscriptionTypeRepeatTypeSearchModel, IReturn<List<SubscriptionTypeRepeatTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all subscription type repeat types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatTypesDigest", "GET",
            Summary = "Use to get a hash representing each subscription type repeat types")]
    public partial class GetSubscriptionTypeRepeatTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get subscription type repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SubscriptionTypeRepeatTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionTypeRepeatType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription type repeat type")]
    public partial class GetSubscriptionTypeRepeatTypeByID : ImplementsIDBase, IReturn<SubscriptionTypeRepeatTypeModel> { }

    /// <summary>A ServiceStack Route to get subscription type repeat type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SubscriptionTypeRepeatTypeModel}"/>
    [PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription type repeat type by the custom key")]
    public partial class GetSubscriptionTypeRepeatTypeByKey : ImplementsKeyBase, IReturn<SubscriptionTypeRepeatTypeModel> { }

    /// <summary>A ServiceStack Route to check subscription type repeat type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionTypeRepeatTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription type repeat type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionTypeRepeatTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create subscription type repeat type.</summary>
    /// <seealso cref="SubscriptionTypeRepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Create", "POST", Priority = 1,
            Summary = "Use to create a new subscription type repeat type.")]
    public partial class CreateSubscriptionTypeRepeatType : SubscriptionTypeRepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert subscription type repeat type.</summary>
    /// <seealso cref="SubscriptionTypeRepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing subscription type repeat type (as needed).")]
    public partial class UpsertSubscriptionTypeRepeatType : SubscriptionTypeRepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update subscription type repeat type.</summary>
    /// <seealso cref="SubscriptionTypeRepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing subscription type repeat type.")]
    public partial class UpdateSubscriptionTypeRepeatType : SubscriptionTypeRepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate subscription type repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription type repeat type from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionTypeRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate subscription type repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Deactivate"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription type repeat type from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionTypeRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription type repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription type repeat type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionTypeRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription type repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Reactivate"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription type repeat type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionTypeRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription type repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific subscription type repeat type from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionTypeRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription type repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionTypeRepeatType.Delete"),
        PublicAPI,
        Route("/Payments/SubscriptionTypeRepeatType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific subscription type repeat type from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionTypeRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear subscription type repeat type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionTypeRepeatType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all subscription type repeat type calls.")]
    public class ClearSubscriptionTypeRepeatTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SubscriptionTypeRepeatTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSubscriptionTypeRepeatTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeRepeatTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISubscriptionTypeRepeatTypeModel, SubscriptionTypeRepeatTypeModel, ISubscriptionTypeRepeatTypeSearchModel, SubscriptionTypeRepeatTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SubscriptionTypeRepeatTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypeRepeatTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSubscriptionTypeRepeatTypesForConnect request)
        {
            return await Workflows.SubscriptionTypeRepeatTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypeRepeatTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeRepeatTypesDigest request)
        {
            return await Workflows.SubscriptionTypeRepeatTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSubscriptionTypeRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeRepeatTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SubscriptionTypeRepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypeRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeRepeatTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SubscriptionTypeRepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSubscriptionTypeRepeatTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionTypeRepeatTypeExistsByID request)
        {
            return await Workflows.SubscriptionTypeRepeatTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionTypeRepeatTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionTypeRepeatTypeExistsByKey request)
        {
            return await Workflows.SubscriptionTypeRepeatTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSubscriptionTypeRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSubscriptionTypeRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSubscriptionTypeRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSubscriptionTypeRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSubscriptionTypeRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSubscriptionTypeRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionTypeRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionTypeRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionTypeRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionTypeRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionTypeRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionTypeRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionTypeRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionTypeRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionTypeRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionTypeRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionTypeRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionTypeRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeRepeatTypeDataAsync,
                    () => Workflows.SubscriptionTypeRepeatTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSubscriptionTypeRepeatTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSubscriptionTypeRepeatTypeCache request)
        {
            await ClearCachedSubscriptionTypeRepeatTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSubscriptionTypeRepeatTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSubscriptionTypeRepeatTypes>(string.Empty),
                    UrnId.Create<GetSubscriptionTypeRepeatTypeByID>(string.Empty),
                    UrnId.Create<GetSubscriptionTypeRepeatTypeByKey>(string.Empty),
                    UrnId.Create<CheckSubscriptionTypeRepeatTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSubscriptionTypeRepeatTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SubscriptionTypeRepeatTypeService : SubscriptionTypeRepeatTypeServiceBase { }
}
