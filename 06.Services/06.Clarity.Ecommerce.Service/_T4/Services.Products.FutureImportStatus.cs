// <autogenerated>
// <copyright file="FutureImportStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the future import status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of future import statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{FutureImportStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/FutureImportStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of future import statuses")]
    public partial class GetFutureImportStatuses : StatusSearchModel, IReturn<FutureImportStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get future import statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.View"),
        PublicAPI,
        Route("/Products/FutureImportStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all future import statuses")]
    public partial class GetFutureImportStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all future import statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.View"),
        PublicAPI,
        Route("/Products/FutureImportStatusesDigest", "GET",
            Summary = "Use to get a hash representing each future import statuses")]
    public partial class GetFutureImportStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get future import status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/FutureImportStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific future import status")]
    public partial class GetFutureImportStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get future import status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Products/FutureImportStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific future import status by the custom key")]
    public partial class GetFutureImportStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get future import status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Products/FutureImportStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific future import status by the name")]
    public partial class GetFutureImportStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get future import status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Products/FutureImportStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific future import status by the name")]
    public partial class GetFutureImportStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check future import status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.View"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check future import status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.View"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check future import status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.View"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check future import status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.View"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create future import status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImportStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new future import status.")]
    public partial class CreateFutureImportStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert future import status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/FutureImportStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing future import status (as needed).")]
    public partial class UpsertFutureImportStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update future import status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImportStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing future import status.")]
    public partial class UpdateFutureImportStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate future import status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImportStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific future import status from the system [Soft-Delete]")]
    public partial class DeactivateFutureImportStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate future import status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Deactivate"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific future import status from the system [Soft-Delete]")]
    public partial class DeactivateFutureImportStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate future import status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImportStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific future import status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFutureImportStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate future import status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Reactivate"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific future import status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFutureImportStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete future import status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImportStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific future import status from the system [Hard-Delete]")]
    public partial class DeleteFutureImportStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete future import status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImportStatus.Delete"),
        PublicAPI,
        Route("/Products/FutureImportStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific future import status from the system [Hard-Delete]")]
    public partial class DeleteFutureImportStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear future import status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/FutureImportStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all future import status calls.")]
    public class ClearFutureImportStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FutureImportStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFutureImportStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, FutureImportStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FutureImportStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFutureImportStatusesForConnect request)
        {
            return await Workflows.FutureImportStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportStatusesDigest request)
        {
            return await Workflows.FutureImportStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFutureImportStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FutureImportStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FutureImportStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.FutureImportStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.FutureImportStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFutureImportStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportStatusExistsByID request)
        {
            return await Workflows.FutureImportStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFutureImportStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportStatusExistsByKey request)
        {
            return await Workflows.FutureImportStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFutureImportStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportStatusExistsByName request)
        {
            return await Workflows.FutureImportStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFutureImportStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportStatusExistsByDisplayName request)
        {
            return await Workflows.FutureImportStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFutureImportStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFutureImportStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFutureImportStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFutureImportStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFutureImportStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFutureImportStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFutureImportStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFutureImportStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFutureImportStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFutureImportStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFutureImportStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFutureImportStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFutureImportStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFutureImportStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFutureImportStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFutureImportStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFutureImportStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFutureImportStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportStatusDataAsync,
                    () => Workflows.FutureImportStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFutureImportStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFutureImportStatusCache request)
        {
            await ClearCachedFutureImportStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFutureImportStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFutureImportStatuses>(string.Empty),
                    UrnId.Create<GetFutureImportStatusByID>(string.Empty),
                    UrnId.Create<GetFutureImportStatusByKey>(string.Empty),
                    UrnId.Create<GetFutureImportStatusByName>(string.Empty),
                    UrnId.Create<CheckFutureImportStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckFutureImportStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckFutureImportStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckFutureImportStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FutureImportStatusService : FutureImportStatusServiceBase { }
}
