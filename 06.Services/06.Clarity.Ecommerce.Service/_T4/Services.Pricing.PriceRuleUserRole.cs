// <autogenerated>
// <copyright file="PriceRuleUserRoleService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule user role service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule user roles.</summary>
    /// <seealso cref="PriceRuleUserRoleSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleUserRolePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleUserRoles", "GET", Priority = 1,
            Summary = "Use to get a list of price rule user roles")]
    public partial class GetPriceRuleUserRoles : PriceRuleUserRoleSearchModel, IReturn<PriceRuleUserRolePagedResults> { }

    /// <summary>A ServiceStack Route to get price rule user roles for connect.</summary>
    /// <seealso cref="PriceRuleUserRoleSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleUserRoleModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRolesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule user roles")]
    public partial class GetPriceRuleUserRolesForConnect : PriceRuleUserRoleSearchModel, IReturn<List<PriceRuleUserRoleModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule user roles.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRolesDigest", "GET",
            Summary = "Use to get a hash representing each price rule user roles")]
    public partial class GetPriceRuleUserRolesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleUserRoleModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleUserRole/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule user role")]
    public partial class GetPriceRuleUserRoleByID : ImplementsIDBase, IReturn<PriceRuleUserRoleModel> { }

    /// <summary>A ServiceStack Route to get price rule user role.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleUserRoleModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule user role by the custom key")]
    public partial class GetPriceRuleUserRoleByKey : ImplementsKeyBase, IReturn<PriceRuleUserRoleModel> { }

    /// <summary>A ServiceStack Route to check price rule user role exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleUserRoleExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule user role exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleUserRoleExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule user role.</summary>
    /// <seealso cref="PriceRuleUserRoleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule user role.")]
    public partial class CreatePriceRuleUserRole : PriceRuleUserRoleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule user role.</summary>
    /// <seealso cref="PriceRuleUserRoleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule user role (as needed).")]
    public partial class UpsertPriceRuleUserRole : PriceRuleUserRoleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule user role.</summary>
    /// <seealso cref="PriceRuleUserRoleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule user role.")]
    public partial class UpdatePriceRuleUserRole : PriceRuleUserRoleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule user role from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleUserRoleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule user role by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule user role from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleUserRoleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule user role from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleUserRoleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule user role by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule user role from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleUserRoleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule user role from the system [Hard-Delete]")]
    public partial class DeletePriceRuleUserRoleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule user role by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleUserRole.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleUserRole/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule user role from the system [Hard-Delete]")]
    public partial class DeletePriceRuleUserRoleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule user role cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleUserRole/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule user role calls.")]
    public class ClearPriceRuleUserRoleCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleUserRoleServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleUserRoles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleUserRoles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleUserRoleModel, PriceRuleUserRoleModel, IPriceRuleUserRoleSearchModel, PriceRuleUserRolePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleUserRoles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleUserRolesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleUserRolesForConnect request)
        {
            return await Workflows.PriceRuleUserRoles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleUserRolesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleUserRolesDigest request)
        {
            return await Workflows.PriceRuleUserRoles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleUserRoleByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleUserRoles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleUserRoleByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleUserRoles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleUserRoleExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleUserRoleExistsByID request)
        {
            return await Workflows.PriceRuleUserRoles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleUserRoleExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleUserRoleExistsByKey request)
        {
            return await Workflows.PriceRuleUserRoles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleUserRole"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleUserRole request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleUserRole"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleUserRole request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleUserRole"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleUserRole request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleUserRoleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleUserRoleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleUserRoleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleUserRoleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleUserRoleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleUserRoleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleUserRoleDataAsync,
                    () => Workflows.PriceRuleUserRoles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleUserRoleCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleUserRoleCache request)
        {
            await ClearCachedPriceRuleUserRoleDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleUserRoleDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleUserRoles>(string.Empty),
                    UrnId.Create<GetPriceRuleUserRoleByID>(string.Empty),
                    UrnId.Create<GetPriceRuleUserRoleByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleUserRoleExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleUserRoleExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleUserRoleService : PriceRuleUserRoleServiceBase { }
}
