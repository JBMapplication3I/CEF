// <autogenerated>
// <copyright file="EventLogService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the event log service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of event logs.</summary>
    /// <seealso cref="EventLogSearchModel"/>
    /// <seealso cref="IReturn{EventLogPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/EventLogs", "GET", Priority = 1,
            Summary = "Use to get a list of event logs")]
    public partial class GetEventLogs : EventLogSearchModel, IReturn<EventLogPagedResults> { }

    /// <summary>A ServiceStack Route to get event logs for connect.</summary>
    /// <seealso cref="EventLogSearchModel"/>
    /// <seealso cref="IReturn{List{EventLogModel}}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.View"),
        PublicAPI,
        Route("/Structure/EventLogsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all event logs")]
    public partial class GetEventLogsForConnect : EventLogSearchModel, IReturn<List<EventLogModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all event logs.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.View"),
        PublicAPI,
        Route("/Structure/EventLogsDigest", "GET",
            Summary = "Use to get a hash representing each event logs")]
    public partial class GetEventLogsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get event log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{EventLogModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/EventLog/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific event log")]
    public partial class GetEventLogByID : ImplementsIDBase, IReturn<EventLogModel> { }

    /// <summary>A ServiceStack Route to get event log.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{EventLogModel}"/>
    [PublicAPI,
        Route("/Structure/EventLog/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific event log by the custom key")]
    public partial class GetEventLogByKey : ImplementsKeyBase, IReturn<EventLogModel> { }

    /// <summary>A ServiceStack Route to get event log.</summary>
    /// <seealso cref="IReturn{EventLogModel}"/>
    [PublicAPI,
        Route("/Structure/EventLog/Name", "GET", Priority = 1,
            Summary = "Use to get a specific event log by the name")]
    public partial class GetEventLogByName : ImplementsNameBase, IReturn<EventLogModel> { }

    /// <summary>A ServiceStack Route to check event log exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.View"),
        PublicAPI,
        Route("/Structure/EventLog/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEventLogExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check event log exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.View"),
        PublicAPI,
        Route("/Structure/EventLog/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEventLogExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check event log exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.View"),
        PublicAPI,
        Route("/Structure/EventLog/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEventLogExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create event log.</summary>
    /// <seealso cref="EventLogModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/EventLog/Create", "POST", Priority = 1,
            Summary = "Use to create a new event log.")]
    public partial class CreateEventLog : EventLogModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert event log.</summary>
    /// <seealso cref="EventLogModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/EventLog/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing event log (as needed).")]
    public partial class UpsertEventLog : EventLogModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update event log.</summary>
    /// <seealso cref="EventLogModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/EventLog/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing event log.")]
    public partial class UpdateEventLog : EventLogModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate event log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/EventLog/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific event log from the system [Soft-Delete]")]
    public partial class DeactivateEventLogByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate event log by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Deactivate"),
        PublicAPI,
        Route("/Structure/EventLog/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific event log from the system [Soft-Delete]")]
    public partial class DeactivateEventLogByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate event log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/EventLog/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific event log from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEventLogByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate event log by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Reactivate"),
        PublicAPI,
        Route("/Structure/EventLog/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific event log from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEventLogByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete event log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/EventLog/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific event log from the system [Hard-Delete]")]
    public partial class DeleteEventLogByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete event log by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.EventLog.Delete"),
        PublicAPI,
        Route("/Structure/EventLog/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific event log from the system [Hard-Delete]")]
    public partial class DeleteEventLogByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear event log cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/EventLog/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all event log calls.")]
    public class ClearEventLogCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EventLogServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEventLogs"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventLogs request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IEventLogModel, EventLogModel, IEventLogSearchModel, EventLogPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.EventLogs)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventLogsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEventLogsForConnect request)
        {
            return await Workflows.EventLogs.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventLogsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventLogsDigest request)
        {
            return await Workflows.EventLogs.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEventLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventLogByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.EventLogs, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventLogByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.EventLogs, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventLogByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventLogByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.EventLogs, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEventLogExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEventLogExistsByID request)
        {
            return await Workflows.EventLogs.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEventLogExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEventLogExistsByKey request)
        {
            return await Workflows.EventLogs.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEventLogExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEventLogExistsByName request)
        {
            return await Workflows.EventLogs.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEventLog"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEventLog request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEventLog"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEventLog request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEventLog"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEventLog request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEventLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEventLogByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEventLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEventLogByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEventLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEventLogByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEventLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEventLogByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEventLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEventLogByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEventLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEventLogByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventLogDataAsync,
                    () => Workflows.EventLogs.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEventLogCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEventLogCache request)
        {
            await ClearCachedEventLogDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEventLogDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEventLogs>(string.Empty),
                    UrnId.Create<GetEventLogByID>(string.Empty),
                    UrnId.Create<GetEventLogByKey>(string.Empty),
                    UrnId.Create<GetEventLogByName>(string.Empty),
                    UrnId.Create<CheckEventLogExistsByID>(string.Empty),
                    UrnId.Create<CheckEventLogExistsByKey>(string.Empty),
                    UrnId.Create<CheckEventLogExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EventLogService : EventLogServiceBase { }
}
