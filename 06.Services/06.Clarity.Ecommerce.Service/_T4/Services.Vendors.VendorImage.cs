// <autogenerated>
// <copyright file="VendorImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the vendor image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of vendor images.</summary>
    /// <seealso cref="VendorImageSearchModel"/>
    /// <seealso cref="IReturn{VendorImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorImages", "GET", Priority = 1,
            Summary = "Use to get a list of vendor images")]
    public partial class GetVendorImages : VendorImageSearchModel, IReturn<VendorImagePagedResults> { }

    /// <summary>A ServiceStack Route to get vendor images for connect.</summary>
    /// <seealso cref="VendorImageSearchModel"/>
    /// <seealso cref="IReturn{List{VendorImageModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.View"),
        PublicAPI,
        Route("/Vendors/VendorImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all vendor images")]
    public partial class GetVendorImagesForConnect : VendorImageSearchModel, IReturn<List<VendorImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all vendor images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.View"),
        PublicAPI,
        Route("/Vendors/VendorImagesDigest", "GET",
            Summary = "Use to get a hash representing each vendor images")]
    public partial class GetVendorImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get vendor image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VendorImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor image")]
    public partial class GetVendorImageByID : ImplementsIDBase, IReturn<VendorImageModel> { }

    /// <summary>A ServiceStack Route to get vendor image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VendorImageModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor image by the custom key")]
    public partial class GetVendorImageByKey : ImplementsKeyBase, IReturn<VendorImageModel> { }

    /// <summary>A ServiceStack Route to get vendor image.</summary>
    /// <seealso cref="IReturn{VendorImageModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific vendor image by the name")]
    public partial class GetVendorImageByName : ImplementsNameBase, IReturn<VendorImageModel> { }

    /// <summary>A ServiceStack Route to check vendor image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.View"),
        PublicAPI,
        Route("/Vendors/VendorImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.View"),
        PublicAPI,
        Route("/Vendors/VendorImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.View"),
        PublicAPI,
        Route("/Vendors/VendorImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create vendor image.</summary>
    /// <seealso cref="VendorImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new vendor image.")]
    public partial class CreateVendorImage : VendorImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert vendor image.</summary>
    /// <seealso cref="VendorImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Vendors/VendorImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing vendor image (as needed).")]
    public partial class UpsertVendorImage : VendorImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update vendor image.</summary>
    /// <seealso cref="VendorImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing vendor image.")]
    public partial class UpdateVendorImage : VendorImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate vendor image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor image from the system [Soft-Delete]")]
    public partial class DeactivateVendorImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate vendor image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Deactivate"),
        PublicAPI,
        Route("/Vendors/VendorImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor image from the system [Soft-Delete]")]
    public partial class DeactivateVendorImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Reactivate"),
        PublicAPI,
        Route("/Vendors/VendorImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific vendor image from the system [Hard-Delete]")]
    public partial class DeleteVendorImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorImage.Delete"),
        PublicAPI,
        Route("/Vendors/VendorImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific vendor image from the system [Hard-Delete]")]
    public partial class DeleteVendorImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear vendor image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all vendor image calls.")]
    public class ClearVendorImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VendorImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVendorImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVendorImageModel, VendorImageModel, IVendorImageSearchModel, VendorImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.VendorImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVendorImagesForConnect request)
        {
            return await Workflows.VendorImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorImagesDigest request)
        {
            return await Workflows.VendorImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVendorImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.VendorImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.VendorImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.VendorImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVendorImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorImageExistsByID request)
        {
            return await Workflows.VendorImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorImageExistsByKey request)
        {
            return await Workflows.VendorImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorImageExistsByName request)
        {
            return await Workflows.VendorImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVendorImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVendorImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVendorImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVendorImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVendorImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVendorImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVendorImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVendorImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVendorImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVendorImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVendorImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVendorImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorImageDataAsync,
                    () => Workflows.VendorImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVendorImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVendorImageCache request)
        {
            await ClearCachedVendorImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVendorImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVendorImages>(string.Empty),
                    UrnId.Create<GetVendorImageByID>(string.Empty),
                    UrnId.Create<GetVendorImageByKey>(string.Empty),
                    UrnId.Create<GetVendorImageByName>(string.Empty),
                    UrnId.Create<CheckVendorImageExistsByID>(string.Empty),
                    UrnId.Create<CheckVendorImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckVendorImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VendorImageService : VendorImageServiceBase { }
}
