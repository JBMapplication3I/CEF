// <autogenerated>
// <copyright file="ShipmentStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the shipment status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of shipment statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{ShipmentStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of shipment statuses")]
    public partial class GetShipmentStatuses : StatusSearchModel, IReturn<ShipmentStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get shipment statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.View"),
        PublicAPI,
        Route("/Shipping/ShipmentStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all shipment statuses")]
    public partial class GetShipmentStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all shipment statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.View"),
        PublicAPI,
        Route("/Shipping/ShipmentStatusesDigest", "GET",
            Summary = "Use to get a hash representing each shipment statuses")]
    public partial class GetShipmentStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get shipment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment status")]
    public partial class GetShipmentStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get shipment status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment status by the custom key")]
    public partial class GetShipmentStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get shipment status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific shipment status by the name")]
    public partial class GetShipmentStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get shipment status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific shipment status by the name")]
    public partial class GetShipmentStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check shipment status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.View"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.View"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.View"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.View"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create shipment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new shipment status.")]
    public partial class CreateShipmentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert shipment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing shipment status (as needed).")]
    public partial class UpsertShipmentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update shipment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing shipment status.")]
    public partial class UpdateShipmentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate shipment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment status from the system [Soft-Delete]")]
    public partial class DeactivateShipmentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate shipment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Deactivate"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment status from the system [Soft-Delete]")]
    public partial class DeactivateShipmentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Reactivate"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific shipment status from the system [Hard-Delete]")]
    public partial class DeleteShipmentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentStatus.Delete"),
        PublicAPI,
        Route("/Shipping/ShipmentStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific shipment status from the system [Hard-Delete]")]
    public partial class DeleteShipmentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear shipment status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all shipment status calls.")]
    public class ClearShipmentStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ShipmentStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetShipmentStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, ShipmentStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ShipmentStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetShipmentStatusesForConnect request)
        {
            return await Workflows.ShipmentStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentStatusesDigest request)
        {
            return await Workflows.ShipmentStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetShipmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ShipmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ShipmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ShipmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ShipmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckShipmentStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentStatusExistsByID request)
        {
            return await Workflows.ShipmentStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentStatusExistsByKey request)
        {
            return await Workflows.ShipmentStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentStatusExistsByName request)
        {
            return await Workflows.ShipmentStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentStatusExistsByDisplayName request)
        {
            return await Workflows.ShipmentStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertShipmentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertShipmentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateShipmentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateShipmentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateShipmentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateShipmentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateShipmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateShipmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateShipmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateShipmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteShipmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteShipmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentStatusDataAsync,
                    () => Workflows.ShipmentStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearShipmentStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearShipmentStatusCache request)
        {
            await ClearCachedShipmentStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedShipmentStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetShipmentStatuses>(string.Empty),
                    UrnId.Create<GetShipmentStatusByID>(string.Empty),
                    UrnId.Create<GetShipmentStatusByKey>(string.Empty),
                    UrnId.Create<GetShipmentStatusByName>(string.Empty),
                    UrnId.Create<CheckShipmentStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckShipmentStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckShipmentStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckShipmentStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ShipmentStatusService : ShipmentStatusServiceBase { }
}
