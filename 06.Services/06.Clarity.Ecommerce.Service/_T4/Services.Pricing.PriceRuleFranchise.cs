// <autogenerated>
// <copyright file="PriceRuleFranchiseService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule franchise service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule franchises.</summary>
    /// <seealso cref="PriceRuleFranchiseSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleFranchisePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleFranchises", "GET", Priority = 1,
            Summary = "Use to get a list of price rule franchises")]
    public partial class GetPriceRuleFranchises : PriceRuleFranchiseSearchModel, IReturn<PriceRuleFranchisePagedResults> { }

    /// <summary>A ServiceStack Route to get price rule franchises for connect.</summary>
    /// <seealso cref="PriceRuleFranchiseSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleFranchiseModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchisesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule franchises")]
    public partial class GetPriceRuleFranchisesForConnect : PriceRuleFranchiseSearchModel, IReturn<List<PriceRuleFranchiseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule franchises.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchisesDigest", "GET",
            Summary = "Use to get a hash representing each price rule franchises")]
    public partial class GetPriceRuleFranchisesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleFranchiseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleFranchise/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule franchise")]
    public partial class GetPriceRuleFranchiseByID : ImplementsIDBase, IReturn<PriceRuleFranchiseModel> { }

    /// <summary>A ServiceStack Route to get price rule franchise.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleFranchiseModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule franchise by the custom key")]
    public partial class GetPriceRuleFranchiseByKey : ImplementsKeyBase, IReturn<PriceRuleFranchiseModel> { }

    /// <summary>A ServiceStack Route to check price rule franchise exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleFranchiseExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule franchise exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleFranchiseExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule franchise.</summary>
    /// <seealso cref="PriceRuleFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule franchise.")]
    public partial class CreatePriceRuleFranchise : PriceRuleFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule franchise.</summary>
    /// <seealso cref="PriceRuleFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule franchise (as needed).")]
    public partial class UpsertPriceRuleFranchise : PriceRuleFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule franchise.</summary>
    /// <seealso cref="PriceRuleFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule franchise.")]
    public partial class UpdatePriceRuleFranchise : PriceRuleFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule franchise from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule franchise from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule franchise from the system [Hard-Delete]")]
    public partial class DeletePriceRuleFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleFranchise.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleFranchise/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule franchise from the system [Hard-Delete]")]
    public partial class DeletePriceRuleFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule franchise cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleFranchise/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule franchise calls.")]
    public class ClearPriceRuleFranchiseCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleFranchiseServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleFranchises"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleFranchises request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleFranchiseModel, PriceRuleFranchiseModel, IPriceRuleFranchiseSearchModel, PriceRuleFranchisePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleFranchises)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleFranchisesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleFranchisesForConnect request)
        {
            return await Workflows.PriceRuleFranchises.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleFranchisesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleFranchisesDigest request)
        {
            return await Workflows.PriceRuleFranchises.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleFranchiseByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleFranchises, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleFranchiseByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleFranchises, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleFranchiseExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleFranchiseExistsByID request)
        {
            return await Workflows.PriceRuleFranchises.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleFranchiseExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleFranchiseExistsByKey request)
        {
            return await Workflows.PriceRuleFranchises.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleFranchiseDataAsync,
                    () => Workflows.PriceRuleFranchises.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleFranchiseCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleFranchiseCache request)
        {
            await ClearCachedPriceRuleFranchiseDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleFranchiseDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleFranchises>(string.Empty),
                    UrnId.Create<GetPriceRuleFranchiseByID>(string.Empty),
                    UrnId.Create<GetPriceRuleFranchiseByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleFranchiseExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleFranchiseExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleFranchiseService : PriceRuleFranchiseServiceBase { }
}
