// <autogenerated>
// <copyright file="ProductAssociationTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product association type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product association types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ProductAssociationTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductAssociationTypes", "GET", Priority = 1,
            Summary = "Use to get a list of product association types")]
    public partial class GetProductAssociationTypes : TypeSearchModel, IReturn<ProductAssociationTypePagedResults> { }

    /// <summary>A ServiceStack Route to get product association types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.View"),
        PublicAPI,
        Route("/Products/ProductAssociationTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product association types")]
    public partial class GetProductAssociationTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product association types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.View"),
        PublicAPI,
        Route("/Products/ProductAssociationTypesDigest", "GET",
            Summary = "Use to get a hash representing each product association types")]
    public partial class GetProductAssociationTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductAssociationType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product association type")]
    public partial class GetProductAssociationTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get product association type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductAssociationType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product association type by the custom key")]
    public partial class GetProductAssociationTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get product association type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductAssociationType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific product association type by the name")]
    public partial class GetProductAssociationTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get product association type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductAssociationType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific product association type by the name")]
    public partial class GetProductAssociationTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check product association type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.View"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductAssociationTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product association type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.View"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductAssociationTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product association type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.View"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductAssociationTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product association type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.View"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductAssociationTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product association type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociationType/Create", "POST", Priority = 1,
            Summary = "Use to create a new product association type.")]
    public partial class CreateProductAssociationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product association type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductAssociationType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product association type (as needed).")]
    public partial class UpsertProductAssociationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product association type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociationType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product association type.")]
    public partial class UpdateProductAssociationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociationType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product association type from the system [Soft-Delete]")]
    public partial class DeactivateProductAssociationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product association type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Deactivate"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product association type from the system [Soft-Delete]")]
    public partial class DeactivateProductAssociationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociationType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product association type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductAssociationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product association type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Reactivate"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product association type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductAssociationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociationType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product association type from the system [Hard-Delete]")]
    public partial class DeleteProductAssociationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product association type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociationType.Delete"),
        PublicAPI,
        Route("/Products/ProductAssociationType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product association type from the system [Hard-Delete]")]
    public partial class DeleteProductAssociationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product association type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductAssociationType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product association type calls.")]
    public class ClearProductAssociationTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductAssociationTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductAssociationTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ProductAssociationTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductAssociationTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductAssociationTypesForConnect request)
        {
            return await Workflows.ProductAssociationTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationTypesDigest request)
        {
            return await Workflows.ProductAssociationTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ProductAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ProductAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductAssociationTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductAssociationTypeExistsByID request)
        {
            return await Workflows.ProductAssociationTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductAssociationTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductAssociationTypeExistsByKey request)
        {
            return await Workflows.ProductAssociationTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductAssociationTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductAssociationTypeExistsByName request)
        {
            return await Workflows.ProductAssociationTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductAssociationTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductAssociationTypeExistsByDisplayName request)
        {
            return await Workflows.ProductAssociationTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductAssociationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductAssociationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductAssociationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductAssociationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductAssociationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductAssociationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductAssociationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductAssociationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductAssociationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductAssociationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductAssociationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductAssociationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationTypeDataAsync,
                    () => Workflows.ProductAssociationTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductAssociationTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductAssociationTypeCache request)
        {
            await ClearCachedProductAssociationTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductAssociationTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductAssociationTypes>(string.Empty),
                    UrnId.Create<GetProductAssociationTypeByID>(string.Empty),
                    UrnId.Create<GetProductAssociationTypeByKey>(string.Empty),
                    UrnId.Create<GetProductAssociationTypeByName>(string.Empty),
                    UrnId.Create<CheckProductAssociationTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckProductAssociationTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckProductAssociationTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckProductAssociationTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductAssociationTypeService : ProductAssociationTypeServiceBase { }
}
