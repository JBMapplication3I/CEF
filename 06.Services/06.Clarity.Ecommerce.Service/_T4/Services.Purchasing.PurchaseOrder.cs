// <autogenerated>
// <copyright file="PurchaseOrderService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase orders.</summary>
    /// <seealso cref="PurchaseOrderSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrders", "GET", Priority = 1,
            Summary = "Use to get a list of purchase orders")]
    public partial class GetPurchaseOrders : PurchaseOrderSearchModel, IReturn<PurchaseOrderPagedResults> { }

    /// <summary>A ServiceStack Route to get purchase orders for connect.</summary>
    /// <seealso cref="PurchaseOrderSearchModel"/>
    /// <seealso cref="IReturn{List{PurchaseOrderModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrdersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase orders")]
    public partial class GetPurchaseOrdersForConnect : PurchaseOrderSearchModel, IReturn<List<PurchaseOrderModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase orders.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrdersDigest", "GET",
            Summary = "Use to get a hash representing each purchase orders")]
    public partial class GetPurchaseOrdersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PurchaseOrderModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrder/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order")]
    public partial class GetPurchaseOrderByID : ImplementsIDBase, IReturn<PurchaseOrderModel> { }

    /// <summary>A ServiceStack Route to get purchase order.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PurchaseOrderModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrder/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order by the custom key")]
    public partial class GetPurchaseOrderByKey : ImplementsKeyBase, IReturn<PurchaseOrderModel> { }

    /// <summary>A ServiceStack Route to check purchase order exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order.</summary>
    /// <seealso cref="PurchaseOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order.")]
    public partial class CreatePurchaseOrder : PurchaseOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order.</summary>
    /// <seealso cref="PurchaseOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order (as needed).")]
    public partial class UpsertPurchaseOrder : PurchaseOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order.</summary>
    /// <seealso cref="PurchaseOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order.")]
    public partial class UpdatePurchaseOrder : PurchaseOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrder.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrder/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrder/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order calls.")]
    public class ClearPurchaseOrderCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrders"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrders request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPurchaseOrderModel, PurchaseOrderModel, IPurchaseOrderSearchModel, PurchaseOrderPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrders)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrdersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrdersForConnect request)
        {
            return await Workflows.PurchaseOrders.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrdersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrdersDigest request)
        {
            return await Workflows.PurchaseOrders.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrders, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrders, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderExistsByID request)
        {
            return await Workflows.PurchaseOrders.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderExistsByKey request)
        {
            return await Workflows.PurchaseOrders.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderDataAsync,
                    () => Workflows.PurchaseOrders.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderCache request)
        {
            await ClearCachedPurchaseOrderDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrders>(string.Empty),
                    UrnId.Create<GetPurchaseOrderByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderService : PurchaseOrderServiceBase { }
}
