// <autogenerated>
// <copyright file="NoteService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the note service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of notes.</summary>
    /// <seealso cref="NoteSearchModel"/>
    /// <seealso cref="IReturn{NotePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/Notes", "GET", Priority = 1,
            Summary = "Use to get a list of notes")]
    public partial class GetNotes : NoteSearchModel, IReturn<NotePagedResults> { }

    /// <summary>A ServiceStack Route to get notes for connect.</summary>
    /// <seealso cref="NoteSearchModel"/>
    /// <seealso cref="IReturn{List{NoteModel}}"/>
    [Authenticate, RequiredPermission("Structure.Note.View"),
        PublicAPI,
        Route("/Structure/NotesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all notes")]
    public partial class GetNotesForConnect : NoteSearchModel, IReturn<List<NoteModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all notes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.Note.View"),
        PublicAPI,
        Route("/Structure/NotesDigest", "GET",
            Summary = "Use to get a hash representing each notes")]
    public partial class GetNotesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get note.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{NoteModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/Note/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific note")]
    public partial class GetNoteByID : ImplementsIDBase, IReturn<NoteModel> { }

    /// <summary>A ServiceStack Route to get note.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{NoteModel}"/>
    [PublicAPI,
        Route("/Structure/Note/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific note by the custom key")]
    public partial class GetNoteByKey : ImplementsKeyBase, IReturn<NoteModel> { }

    /// <summary>A ServiceStack Route to check note exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.Note.View"),
        PublicAPI,
        Route("/Structure/Note/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckNoteExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check note exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.Note.View"),
        PublicAPI,
        Route("/Structure/Note/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckNoteExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create note.</summary>
    /// <seealso cref="NoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.Note.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/Note/Create", "POST", Priority = 1,
            Summary = "Use to create a new note.")]
    public partial class CreateNote : NoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert note.</summary>
    /// <seealso cref="NoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/Note/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing note (as needed).")]
    public partial class UpsertNote : NoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update note.</summary>
    /// <seealso cref="NoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.Note.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/Note/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing note.")]
    public partial class UpdateNote : NoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate note.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.Note.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/Note/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific note from the system [Soft-Delete]")]
    public partial class DeactivateNoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate note by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.Note.Deactivate"),
        PublicAPI,
        Route("/Structure/Note/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific note from the system [Soft-Delete]")]
    public partial class DeactivateNoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate note.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.Note.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/Note/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific note from the system [Restore from Soft-Delete]")]
    public partial class ReactivateNoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate note by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.Note.Reactivate"),
        PublicAPI,
        Route("/Structure/Note/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific note from the system [Restore from Soft-Delete]")]
    public partial class ReactivateNoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete note.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.Note.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/Note/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific note from the system [Hard-Delete]")]
    public partial class DeleteNoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete note by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.Note.Delete"),
        PublicAPI,
        Route("/Structure/Note/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific note from the system [Hard-Delete]")]
    public partial class DeleteNoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear note cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/Note/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all note calls.")]
    public class ClearNoteCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class NoteServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetNotes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNotes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<INoteModel, NoteModel, INoteSearchModel, NotePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Notes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNotesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetNotesForConnect request)
        {
            return await Workflows.Notes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNotesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNotesDigest request)
        {
            return await Workflows.Notes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetNoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Notes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Notes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckNoteExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckNoteExistsByID request)
        {
            return await Workflows.Notes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckNoteExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckNoteExistsByKey request)
        {
            return await Workflows.Notes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertNote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertNote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateNote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateNote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateNote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateNote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateNoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateNoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateNoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateNoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateNoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateNoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateNoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateNoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteNoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteNoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteNoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteNoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteDataAsync,
                    () => Workflows.Notes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearNoteCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearNoteCache request)
        {
            await ClearCachedNoteDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedNoteDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetNotes>(string.Empty),
                    UrnId.Create<GetNoteByID>(string.Empty),
                    UrnId.Create<GetNoteByKey>(string.Empty),
                    UrnId.Create<CheckNoteExistsByID>(string.Empty),
                    UrnId.Create<CheckNoteExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class NoteService : NoteServiceBase { }
}
