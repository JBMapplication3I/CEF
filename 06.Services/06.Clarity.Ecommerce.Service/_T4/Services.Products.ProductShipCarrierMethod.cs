// <autogenerated>
// <copyright file="ProductShipCarrierMethodService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product ship carrier method service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product ship carrier methods.</summary>
    /// <seealso cref="ProductShipCarrierMethodSearchModel"/>
    /// <seealso cref="IReturn{ProductShipCarrierMethodPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductShipCarrierMethods", "GET", Priority = 1,
            Summary = "Use to get a list of product ship carrier methods")]
    public partial class GetProductShipCarrierMethods : ProductShipCarrierMethodSearchModel, IReturn<ProductShipCarrierMethodPagedResults> { }

    /// <summary>A ServiceStack Route to get product ship carrier methods for connect.</summary>
    /// <seealso cref="ProductShipCarrierMethodSearchModel"/>
    /// <seealso cref="IReturn{List{ProductShipCarrierMethodModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.View"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethodsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product ship carrier methods")]
    public partial class GetProductShipCarrierMethodsForConnect : ProductShipCarrierMethodSearchModel, IReturn<List<ProductShipCarrierMethodModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product ship carrier methods.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.View"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethodsDigest", "GET",
            Summary = "Use to get a hash representing each product ship carrier methods")]
    public partial class GetProductShipCarrierMethodsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductShipCarrierMethodModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductShipCarrierMethod/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product ship carrier method")]
    public partial class GetProductShipCarrierMethodByID : ImplementsIDBase, IReturn<ProductShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to get product ship carrier method.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductShipCarrierMethodModel}"/>
    [PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product ship carrier method by the custom key")]
    public partial class GetProductShipCarrierMethodByKey : ImplementsKeyBase, IReturn<ProductShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to check product ship carrier method exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.View"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductShipCarrierMethodExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product ship carrier method exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.View"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductShipCarrierMethodExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product ship carrier method.</summary>
    /// <seealso cref="ProductShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Create", "POST", Priority = 1,
            Summary = "Use to create a new product ship carrier method.")]
    public partial class CreateProductShipCarrierMethod : ProductShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product ship carrier method.</summary>
    /// <seealso cref="ProductShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product ship carrier method (as needed).")]
    public partial class UpsertProductShipCarrierMethod : ProductShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product ship carrier method.</summary>
    /// <seealso cref="ProductShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product ship carrier method.")]
    public partial class UpdateProductShipCarrierMethod : ProductShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product ship carrier method from the system [Soft-Delete]")]
    public partial class DeactivateProductShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Deactivate"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product ship carrier method from the system [Soft-Delete]")]
    public partial class DeactivateProductShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product ship carrier method from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Reactivate"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product ship carrier method from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product ship carrier method from the system [Hard-Delete]")]
    public partial class DeleteProductShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductShipCarrierMethod.Delete"),
        PublicAPI,
        Route("/Products/ProductShipCarrierMethod/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product ship carrier method from the system [Hard-Delete]")]
    public partial class DeleteProductShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product ship carrier method cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductShipCarrierMethod/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product ship carrier method calls.")]
    public class ClearProductShipCarrierMethodCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductShipCarrierMethodServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductShipCarrierMethods"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductShipCarrierMethods request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductShipCarrierMethodModel, ProductShipCarrierMethodModel, IProductShipCarrierMethodSearchModel, ProductShipCarrierMethodPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductShipCarrierMethods)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductShipCarrierMethodsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductShipCarrierMethodsForConnect request)
        {
            return await Workflows.ProductShipCarrierMethods.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductShipCarrierMethodsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductShipCarrierMethodsDigest request)
        {
            return await Workflows.ProductShipCarrierMethods.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductShipCarrierMethodByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductShipCarrierMethodByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductShipCarrierMethodExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductShipCarrierMethodExistsByID request)
        {
            return await Workflows.ProductShipCarrierMethods.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductShipCarrierMethodExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductShipCarrierMethodExistsByKey request)
        {
            return await Workflows.ProductShipCarrierMethods.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductShipCarrierMethodDataAsync,
                    () => Workflows.ProductShipCarrierMethods.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductShipCarrierMethodCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductShipCarrierMethodCache request)
        {
            await ClearCachedProductShipCarrierMethodDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductShipCarrierMethodDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductShipCarrierMethods>(string.Empty),
                    UrnId.Create<GetProductShipCarrierMethodByID>(string.Empty),
                    UrnId.Create<GetProductShipCarrierMethodByKey>(string.Empty),
                    UrnId.Create<CheckProductShipCarrierMethodExistsByID>(string.Empty),
                    UrnId.Create<CheckProductShipCarrierMethodExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductShipCarrierMethodService : ProductShipCarrierMethodServiceBase { }
}
