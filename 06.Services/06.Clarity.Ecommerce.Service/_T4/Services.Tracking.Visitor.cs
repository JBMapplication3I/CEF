// <autogenerated>
// <copyright file="VisitorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the visitor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of visitors.</summary>
    /// <seealso cref="VisitorSearchModel"/>
    /// <seealso cref="IReturn{VisitorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Visitors", "GET", Priority = 1,
            Summary = "Use to get a list of visitors")]
    public partial class GetVisitors : VisitorSearchModel, IReturn<VisitorPagedResults> { }

    /// <summary>A ServiceStack Route to get visitors for connect.</summary>
    /// <seealso cref="VisitorSearchModel"/>
    /// <seealso cref="IReturn{List{VisitorModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.View"),
        PublicAPI,
        Route("/Tracking/VisitorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all visitors")]
    public partial class GetVisitorsForConnect : VisitorSearchModel, IReturn<List<VisitorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all visitors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.View"),
        PublicAPI,
        Route("/Tracking/VisitorsDigest", "GET",
            Summary = "Use to get a hash representing each visitors")]
    public partial class GetVisitorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get visitor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VisitorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Visitor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific visitor")]
    public partial class GetVisitorByID : ImplementsIDBase, IReturn<VisitorModel> { }

    /// <summary>A ServiceStack Route to get visitor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VisitorModel}"/>
    [PublicAPI,
        Route("/Tracking/Visitor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific visitor by the custom key")]
    public partial class GetVisitorByKey : ImplementsKeyBase, IReturn<VisitorModel> { }

    /// <summary>A ServiceStack Route to get visitor.</summary>
    /// <seealso cref="IReturn{VisitorModel}"/>
    [PublicAPI,
        Route("/Tracking/Visitor/Name", "GET", Priority = 1,
            Summary = "Use to get a specific visitor by the name")]
    public partial class GetVisitorByName : ImplementsNameBase, IReturn<VisitorModel> { }

    /// <summary>A ServiceStack Route to check visitor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.View"),
        PublicAPI,
        Route("/Tracking/Visitor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVisitorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check visitor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.View"),
        PublicAPI,
        Route("/Tracking/Visitor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVisitorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check visitor exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.View"),
        PublicAPI,
        Route("/Tracking/Visitor/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckVisitorExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create visitor.</summary>
    /// <seealso cref="VisitorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visitor/Create", "POST", Priority = 1,
            Summary = "Use to create a new visitor.")]
    public partial class CreateVisitor : VisitorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert visitor.</summary>
    /// <seealso cref="VisitorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/Visitor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing visitor (as needed).")]
    public partial class UpsertVisitor : VisitorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update visitor.</summary>
    /// <seealso cref="VisitorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visitor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing visitor.")]
    public partial class UpdateVisitor : VisitorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate visitor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visitor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific visitor from the system [Soft-Delete]")]
    public partial class DeactivateVisitorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate visitor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Deactivate"),
        PublicAPI,
        Route("/Tracking/Visitor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific visitor from the system [Soft-Delete]")]
    public partial class DeactivateVisitorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate visitor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visitor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific visitor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVisitorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate visitor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Reactivate"),
        PublicAPI,
        Route("/Tracking/Visitor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific visitor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVisitorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete visitor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visitor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific visitor from the system [Hard-Delete]")]
    public partial class DeleteVisitorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete visitor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visitor.Delete"),
        PublicAPI,
        Route("/Tracking/Visitor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific visitor from the system [Hard-Delete]")]
    public partial class DeleteVisitorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear visitor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Visitor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all visitor calls.")]
    public class ClearVisitorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VisitorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVisitors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVisitorModel, VisitorModel, IVisitorSearchModel, VisitorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Visitors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVisitorsForConnect request)
        {
            return await Workflows.Visitors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitorsDigest request)
        {
            return await Workflows.Visitors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVisitorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Visitors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Visitors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitorByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitorByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Visitors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVisitorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVisitorExistsByID request)
        {
            return await Workflows.Visitors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVisitorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVisitorExistsByKey request)
        {
            return await Workflows.Visitors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVisitorExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVisitorExistsByName request)
        {
            return await Workflows.Visitors.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVisitor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVisitor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVisitor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVisitor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVisitor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVisitor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVisitorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVisitorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVisitorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVisitorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVisitorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVisitorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVisitorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVisitorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVisitorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVisitorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVisitorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVisitorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitorDataAsync,
                    () => Workflows.Visitors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVisitorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVisitorCache request)
        {
            await ClearCachedVisitorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVisitorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVisitors>(string.Empty),
                    UrnId.Create<GetVisitorByID>(string.Empty),
                    UrnId.Create<GetVisitorByKey>(string.Empty),
                    UrnId.Create<GetVisitorByName>(string.Empty),
                    UrnId.Create<CheckVisitorExistsByID>(string.Empty),
                    UrnId.Create<CheckVisitorExistsByKey>(string.Empty),
                    UrnId.Create<CheckVisitorExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VisitorService : VisitorServiceBase { }
}
