// <autogenerated>
// <copyright file="PriceRuleService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rules.</summary>
    /// <seealso cref="PriceRuleSearchModel"/>
    /// <seealso cref="IReturn{PriceRulePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRules", "GET", Priority = 1,
            Summary = "Use to get a list of price rules")]
    public partial class GetPriceRules : PriceRuleSearchModel, IReturn<PriceRulePagedResults> { }

    /// <summary>A ServiceStack Route to get price rules for connect.</summary>
    /// <seealso cref="PriceRuleSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.View"),
        PublicAPI,
        Route("/Pricing/PriceRulesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rules")]
    public partial class GetPriceRulesForConnect : PriceRuleSearchModel, IReturn<List<PriceRuleModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rules.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.View"),
        PublicAPI,
        Route("/Pricing/PriceRulesDigest", "GET",
            Summary = "Use to get a hash representing each price rules")]
    public partial class GetPriceRulesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRule/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule")]
    public partial class GetPriceRuleByID : ImplementsIDBase, IReturn<PriceRuleModel> { }

    /// <summary>A ServiceStack Route to get price rule.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRule/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule by the custom key")]
    public partial class GetPriceRuleByKey : ImplementsKeyBase, IReturn<PriceRuleModel> { }

    /// <summary>A ServiceStack Route to get price rule.</summary>
    /// <seealso cref="IReturn{PriceRuleModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRule/Name", "GET", Priority = 1,
            Summary = "Use to get a specific price rule by the name")]
    public partial class GetPriceRuleByName : ImplementsNameBase, IReturn<PriceRuleModel> { }

    /// <summary>A ServiceStack Route to check price rule exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.View"),
        PublicAPI,
        Route("/Pricing/PriceRule/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.View"),
        PublicAPI,
        Route("/Pricing/PriceRule/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.View"),
        PublicAPI,
        Route("/Pricing/PriceRule/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule.</summary>
    /// <seealso cref="PriceRuleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRule/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule.")]
    public partial class CreatePriceRule : PriceRuleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule.</summary>
    /// <seealso cref="PriceRuleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRule/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule (as needed).")]
    public partial class UpsertPriceRule : PriceRuleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule.</summary>
    /// <seealso cref="PriceRuleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRule/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule.")]
    public partial class UpdatePriceRule : PriceRuleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRule/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRule/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRule/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRule/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRule/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule from the system [Hard-Delete]")]
    public partial class DeletePriceRuleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRule.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRule/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule from the system [Hard-Delete]")]
    public partial class DeletePriceRuleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRule/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule calls.")]
    public class ClearPriceRuleCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRules"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRules request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleModel, PriceRuleModel, IPriceRuleSearchModel, PriceRulePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRules)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRulesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRulesForConnect request)
        {
            return await Workflows.PriceRules.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRulesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRulesDigest request)
        {
            return await Workflows.PriceRules.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRules, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRules, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PriceRules, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleExistsByID request)
        {
            return await Workflows.PriceRules.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleExistsByKey request)
        {
            return await Workflows.PriceRules.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleExistsByName request)
        {
            return await Workflows.PriceRules.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRule"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRule request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRule"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRule request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRule"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRule request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleDataAsync,
                    () => Workflows.PriceRules.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleCache request)
        {
            await ClearCachedPriceRuleDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRules>(string.Empty),
                    UrnId.Create<GetPriceRuleByID>(string.Empty),
                    UrnId.Create<GetPriceRuleByKey>(string.Empty),
                    UrnId.Create<GetPriceRuleByName>(string.Empty),
                    UrnId.Create<CheckPriceRuleExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleExistsByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleService : PriceRuleServiceBase { }
}
