// <autogenerated>
// <copyright file="VendorTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the vendor type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of vendor types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{VendorTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorTypes", "GET", Priority = 1,
            Summary = "Use to get a list of vendor types")]
    public partial class GetVendorTypes : TypeSearchModel, IReturn<VendorTypePagedResults> { }

    /// <summary>A ServiceStack Route to get vendor types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.View"),
        PublicAPI,
        Route("/Vendors/VendorTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all vendor types")]
    public partial class GetVendorTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all vendor types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.View"),
        PublicAPI,
        Route("/Vendors/VendorTypesDigest", "GET",
            Summary = "Use to get a hash representing each vendor types")]
    public partial class GetVendorTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get vendor type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor type")]
    public partial class GetVendorTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get vendor type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor type by the custom key")]
    public partial class GetVendorTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get vendor type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific vendor type by the name")]
    public partial class GetVendorTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get vendor type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific vendor type by the name")]
    public partial class GetVendorTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check vendor type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.View"),
        PublicAPI,
        Route("/Vendors/VendorType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.View"),
        PublicAPI,
        Route("/Vendors/VendorType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.View"),
        PublicAPI,
        Route("/Vendors/VendorType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.View"),
        PublicAPI,
        Route("/Vendors/VendorType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create vendor type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorType/Create", "POST", Priority = 1,
            Summary = "Use to create a new vendor type.")]
    public partial class CreateVendorType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert vendor type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Vendors/VendorType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing vendor type (as needed).")]
    public partial class UpsertVendorType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update vendor type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing vendor type.")]
    public partial class UpdateVendorType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate vendor type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor type from the system [Soft-Delete]")]
    public partial class DeactivateVendorTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate vendor type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Deactivate"),
        PublicAPI,
        Route("/Vendors/VendorType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor type from the system [Soft-Delete]")]
    public partial class DeactivateVendorTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Reactivate"),
        PublicAPI,
        Route("/Vendors/VendorType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific vendor type from the system [Hard-Delete]")]
    public partial class DeleteVendorTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorType.Delete"),
        PublicAPI,
        Route("/Vendors/VendorType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific vendor type from the system [Hard-Delete]")]
    public partial class DeleteVendorTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear vendor type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all vendor type calls.")]
    public class ClearVendorTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VendorTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVendorTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, VendorTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.VendorTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVendorTypesForConnect request)
        {
            return await Workflows.VendorTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorTypesDigest request)
        {
            return await Workflows.VendorTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVendorTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.VendorTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.VendorTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.VendorTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.VendorTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVendorTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorTypeExistsByID request)
        {
            return await Workflows.VendorTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorTypeExistsByKey request)
        {
            return await Workflows.VendorTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorTypeExistsByName request)
        {
            return await Workflows.VendorTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorTypeExistsByDisplayName request)
        {
            return await Workflows.VendorTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVendorType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVendorType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVendorType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVendorType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVendorType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVendorType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVendorTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVendorTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVendorTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVendorTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVendorTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVendorTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorTypeDataAsync,
                    () => Workflows.VendorTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVendorTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVendorTypeCache request)
        {
            await ClearCachedVendorTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVendorTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVendorTypes>(string.Empty),
                    UrnId.Create<GetVendorTypeByID>(string.Empty),
                    UrnId.Create<GetVendorTypeByKey>(string.Empty),
                    UrnId.Create<GetVendorTypeByName>(string.Empty),
                    UrnId.Create<CheckVendorTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckVendorTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckVendorTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckVendorTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VendorTypeService : VendorTypeServiceBase { }
}
