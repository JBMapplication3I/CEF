// <autogenerated>
// <copyright file="ShipCarrierService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ship carrier service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ship carriers.</summary>
    /// <seealso cref="ShipCarrierSearchModel"/>
    /// <seealso cref="IReturn{ShipCarrierPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipCarriers", "GET", Priority = 1,
            Summary = "Use to get a list of ship carriers")]
    public partial class GetShipCarriers : ShipCarrierSearchModel, IReturn<ShipCarrierPagedResults> { }

    /// <summary>A ServiceStack Route to get ship carriers for connect.</summary>
    /// <seealso cref="ShipCarrierSearchModel"/>
    /// <seealso cref="IReturn{List{ShipCarrierModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.View"),
        PublicAPI,
        Route("/Shipping/ShipCarriersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ship carriers")]
    public partial class GetShipCarriersForConnect : ShipCarrierSearchModel, IReturn<List<ShipCarrierModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ship carriers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.View"),
        PublicAPI,
        Route("/Shipping/ShipCarriersDigest", "GET",
            Summary = "Use to get a hash representing each ship carriers")]
    public partial class GetShipCarriersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ShipCarrierModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipCarrier/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ship carrier")]
    public partial class GetShipCarrierByID : ImplementsIDBase, IReturn<ShipCarrierModel> { }

    /// <summary>A ServiceStack Route to get ship carrier.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ShipCarrierModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipCarrier/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ship carrier by the custom key")]
    public partial class GetShipCarrierByKey : ImplementsKeyBase, IReturn<ShipCarrierModel> { }

    /// <summary>A ServiceStack Route to get ship carrier.</summary>
    /// <seealso cref="IReturn{ShipCarrierModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipCarrier/Name", "GET", Priority = 1,
            Summary = "Use to get a specific ship carrier by the name")]
    public partial class GetShipCarrierByName : ImplementsNameBase, IReturn<ShipCarrierModel> { }

    /// <summary>A ServiceStack Route to check ship carrier exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrier/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckShipCarrierExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ship carrier exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrier/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckShipCarrierExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ship carrier exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrier/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckShipCarrierExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ship carrier.</summary>
    /// <seealso cref="ShipCarrierModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrier/Create", "POST", Priority = 1,
            Summary = "Use to create a new ship carrier.")]
    public partial class CreateShipCarrier : ShipCarrierModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ship carrier.</summary>
    /// <seealso cref="ShipCarrierModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/ShipCarrier/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ship carrier (as needed).")]
    public partial class UpsertShipCarrier : ShipCarrierModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ship carrier.</summary>
    /// <seealso cref="ShipCarrierModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrier/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ship carrier.")]
    public partial class UpdateShipCarrier : ShipCarrierModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrier/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ship carrier from the system [Soft-Delete]")]
    public partial class DeactivateShipCarrierByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ship carrier by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Deactivate"),
        PublicAPI,
        Route("/Shipping/ShipCarrier/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ship carrier from the system [Soft-Delete]")]
    public partial class DeactivateShipCarrierByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrier/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ship carrier from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipCarrierByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ship carrier by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Reactivate"),
        PublicAPI,
        Route("/Shipping/ShipCarrier/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ship carrier from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipCarrierByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrier/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ship carrier from the system [Hard-Delete]")]
    public partial class DeleteShipCarrierByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ship carrier by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrier.Delete"),
        PublicAPI,
        Route("/Shipping/ShipCarrier/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ship carrier from the system [Hard-Delete]")]
    public partial class DeleteShipCarrierByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ship carrier cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipCarrier/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ship carrier calls.")]
    public class ClearShipCarrierCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ShipCarrierServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetShipCarriers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarriers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IShipCarrierModel, ShipCarrierModel, IShipCarrierSearchModel, ShipCarrierPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ShipCarriers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarriersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetShipCarriersForConnect request)
        {
            return await Workflows.ShipCarriers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarriersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarriersDigest request)
        {
            return await Workflows.ShipCarriers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ShipCarriers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ShipCarriers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarrierByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ShipCarriers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckShipCarrierExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipCarrierExistsByID request)
        {
            return await Workflows.ShipCarriers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipCarrierExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipCarrierExistsByKey request)
        {
            return await Workflows.ShipCarriers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipCarrierExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipCarrierExistsByName request)
        {
            return await Workflows.ShipCarriers.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertShipCarrier"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertShipCarrier request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateShipCarrier"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateShipCarrier request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateShipCarrier"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateShipCarrier request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipCarrierByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipCarrierByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipCarrierByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipCarrierByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipCarrierByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipCarrierByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierDataAsync,
                    () => Workflows.ShipCarriers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearShipCarrierCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearShipCarrierCache request)
        {
            await ClearCachedShipCarrierDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedShipCarrierDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetShipCarriers>(string.Empty),
                    UrnId.Create<GetShipCarrierByID>(string.Empty),
                    UrnId.Create<GetShipCarrierByKey>(string.Empty),
                    UrnId.Create<GetShipCarrierByName>(string.Empty),
                    UrnId.Create<CheckShipCarrierExistsByID>(string.Empty),
                    UrnId.Create<CheckShipCarrierExistsByKey>(string.Empty),
                    UrnId.Create<CheckShipCarrierExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ShipCarrierService : ShipCarrierServiceBase { }
}
