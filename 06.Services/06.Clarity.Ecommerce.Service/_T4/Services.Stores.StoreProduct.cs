// <autogenerated>
// <copyright file="StoreProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store products.</summary>
    /// <seealso cref="StoreProductSearchModel"/>
    /// <seealso cref="IReturn{StoreProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreProducts", "GET", Priority = 1,
            Summary = "Use to get a list of store products")]
    public partial class GetStoreProducts : StoreProductSearchModel, IReturn<StoreProductPagedResults> { }

    /// <summary>A ServiceStack Route to get store products for connect.</summary>
    /// <seealso cref="StoreProductSearchModel"/>
    /// <seealso cref="IReturn{List{StoreProductModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.View"),
        PublicAPI,
        Route("/Stores/StoreProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store products")]
    public partial class GetStoreProductsForConnect : StoreProductSearchModel, IReturn<List<StoreProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.View"),
        PublicAPI,
        Route("/Stores/StoreProductsDigest", "GET",
            Summary = "Use to get a hash representing each store products")]
    public partial class GetStoreProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store product")]
    public partial class GetStoreProductByID : ImplementsIDBase, IReturn<StoreProductModel> { }

    /// <summary>A ServiceStack Route to get store product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreProductModel}"/>
    [PublicAPI,
        Route("/Stores/StoreProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store product by the custom key")]
    public partial class GetStoreProductByKey : ImplementsKeyBase, IReturn<StoreProductModel> { }

    /// <summary>A ServiceStack Route to check store product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.View"),
        PublicAPI,
        Route("/Stores/StoreProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.View"),
        PublicAPI,
        Route("/Stores/StoreProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store product.</summary>
    /// <seealso cref="StoreProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new store product.")]
    public partial class CreateStoreProduct : StoreProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store product.</summary>
    /// <seealso cref="StoreProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store product (as needed).")]
    public partial class UpsertStoreProduct : StoreProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store product.</summary>
    /// <seealso cref="StoreProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store product.")]
    public partial class UpdateStoreProduct : StoreProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store product from the system [Soft-Delete]")]
    public partial class DeactivateStoreProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store product from the system [Soft-Delete]")]
    public partial class DeactivateStoreProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store product from the system [Hard-Delete]")]
    public partial class DeleteStoreProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreProduct.Delete"),
        PublicAPI,
        Route("/Stores/StoreProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store product from the system [Hard-Delete]")]
    public partial class DeleteStoreProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store product calls.")]
    public class ClearStoreProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreProductModel, StoreProductModel, IStoreProductSearchModel, StoreProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreProductsForConnect request)
        {
            return await Workflows.StoreProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreProductsDigest request)
        {
            return await Workflows.StoreProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreProductExistsByID request)
        {
            return await Workflows.StoreProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreProductExistsByKey request)
        {
            return await Workflows.StoreProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreProductDataAsync,
                    () => Workflows.StoreProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreProductCache request)
        {
            await ClearCachedStoreProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreProducts>(string.Empty),
                    UrnId.Create<GetStoreProductByID>(string.Empty),
                    UrnId.Create<GetStoreProductByKey>(string.Empty),
                    UrnId.Create<CheckStoreProductExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreProductService : StoreProductServiceBase { }
}
