// <autogenerated>
// <copyright file="BrandSiteDomainService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand site domain service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand site domains.</summary>
    /// <seealso cref="BrandSiteDomainSearchModel"/>
    /// <seealso cref="IReturn{BrandSiteDomainPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandSiteDomains", "GET", Priority = 1,
            Summary = "Use to get a list of brand site domains")]
    public partial class GetBrandSiteDomains : BrandSiteDomainSearchModel, IReturn<BrandSiteDomainPagedResults> { }

    /// <summary>A ServiceStack Route to get brand site domains for connect.</summary>
    /// <seealso cref="BrandSiteDomainSearchModel"/>
    /// <seealso cref="IReturn{List{BrandSiteDomainModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.View"),
        PublicAPI,
        Route("/Brands/BrandSiteDomainsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand site domains")]
    public partial class GetBrandSiteDomainsForConnect : BrandSiteDomainSearchModel, IReturn<List<BrandSiteDomainModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand site domains.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.View"),
        PublicAPI,
        Route("/Brands/BrandSiteDomainsDigest", "GET",
            Summary = "Use to get a hash representing each brand site domains")]
    public partial class GetBrandSiteDomainsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandSiteDomainModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandSiteDomain/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand site domain")]
    public partial class GetBrandSiteDomainByID : ImplementsIDBase, IReturn<BrandSiteDomainModel> { }

    /// <summary>A ServiceStack Route to get brand site domain.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandSiteDomainModel}"/>
    [PublicAPI,
        Route("/Brands/BrandSiteDomain/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand site domain by the custom key")]
    public partial class GetBrandSiteDomainByKey : ImplementsKeyBase, IReturn<BrandSiteDomainModel> { }

    /// <summary>A ServiceStack Route to check brand site domain exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.View"),
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandSiteDomainExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand site domain exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.View"),
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandSiteDomainExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand site domain.</summary>
    /// <seealso cref="BrandSiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand site domain.")]
    public partial class CreateBrandSiteDomain : BrandSiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand site domain.</summary>
    /// <seealso cref="BrandSiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand site domain (as needed).")]
    public partial class UpsertBrandSiteDomain : BrandSiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand site domain.</summary>
    /// <seealso cref="BrandSiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand site domain.")]
    public partial class UpdateBrandSiteDomain : BrandSiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand site domain from the system [Soft-Delete]")]
    public partial class DeactivateBrandSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand site domain from the system [Soft-Delete]")]
    public partial class DeactivateBrandSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand site domain from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand site domain from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand site domain from the system [Hard-Delete]")]
    public partial class DeleteBrandSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandSiteDomain.Delete"),
        PublicAPI,
        Route("/Brands/BrandSiteDomain/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand site domain from the system [Hard-Delete]")]
    public partial class DeleteBrandSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand site domain cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandSiteDomain/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand site domain calls.")]
    public class ClearBrandSiteDomainCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandSiteDomainServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandSiteDomains"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandSiteDomains request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandSiteDomainModel, BrandSiteDomainModel, IBrandSiteDomainSearchModel, BrandSiteDomainPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandSiteDomains)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandSiteDomainsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandSiteDomainsForConnect request)
        {
            return await Workflows.BrandSiteDomains.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandSiteDomainsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandSiteDomainsDigest request)
        {
            return await Workflows.BrandSiteDomains.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandSiteDomainByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandSiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandSiteDomainByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandSiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandSiteDomainExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandSiteDomainExistsByID request)
        {
            return await Workflows.BrandSiteDomains.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandSiteDomainExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandSiteDomainExistsByKey request)
        {
            return await Workflows.BrandSiteDomains.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandSiteDomainDataAsync,
                    () => Workflows.BrandSiteDomains.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandSiteDomainCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandSiteDomainCache request)
        {
            await ClearCachedBrandSiteDomainDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandSiteDomainDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandSiteDomains>(string.Empty),
                    UrnId.Create<GetBrandSiteDomainByID>(string.Empty),
                    UrnId.Create<GetBrandSiteDomainByKey>(string.Empty),
                    UrnId.Create<CheckBrandSiteDomainExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandSiteDomainExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandSiteDomainService : BrandSiteDomainServiceBase { }
}
