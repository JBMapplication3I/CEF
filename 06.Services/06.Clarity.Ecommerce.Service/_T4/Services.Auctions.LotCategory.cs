// <autogenerated>
// <copyright file="LotCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the lot category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of lot categories.</summary>
    /// <seealso cref="LotCategorySearchModel"/>
    /// <seealso cref="IReturn{LotCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/LotCategories", "GET", Priority = 1,
            Summary = "Use to get a list of lot categories")]
    public partial class GetLotCategories : LotCategorySearchModel, IReturn<LotCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get lot categories for connect.</summary>
    /// <seealso cref="LotCategorySearchModel"/>
    /// <seealso cref="IReturn{List{LotCategoryModel}}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.View"),
        PublicAPI,
        Route("/Auctions/LotCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all lot categories")]
    public partial class GetLotCategoriesForConnect : LotCategorySearchModel, IReturn<List<LotCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all lot categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.View"),
        PublicAPI,
        Route("/Auctions/LotCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each lot categories")]
    public partial class GetLotCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get lot category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{LotCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/LotCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific lot category")]
    public partial class GetLotCategoryByID : ImplementsIDBase, IReturn<LotCategoryModel> { }

    /// <summary>A ServiceStack Route to get lot category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{LotCategoryModel}"/>
    [PublicAPI,
        Route("/Auctions/LotCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific lot category by the custom key")]
    public partial class GetLotCategoryByKey : ImplementsKeyBase, IReturn<LotCategoryModel> { }

    /// <summary>A ServiceStack Route to check lot category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.View"),
        PublicAPI,
        Route("/Auctions/LotCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckLotCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check lot category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.View"),
        PublicAPI,
        Route("/Auctions/LotCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckLotCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create lot category.</summary>
    /// <seealso cref="LotCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new lot category.")]
    public partial class CreateLotCategory : LotCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert lot category.</summary>
    /// <seealso cref="LotCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/LotCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing lot category (as needed).")]
    public partial class UpsertLotCategory : LotCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update lot category.</summary>
    /// <seealso cref="LotCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing lot category.")]
    public partial class UpdateLotCategory : LotCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate lot category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific lot category from the system [Soft-Delete]")]
    public partial class DeactivateLotCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate lot category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Deactivate"),
        PublicAPI,
        Route("/Auctions/LotCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific lot category from the system [Soft-Delete]")]
    public partial class DeactivateLotCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate lot category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific lot category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLotCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate lot category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Reactivate"),
        PublicAPI,
        Route("/Auctions/LotCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific lot category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLotCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete lot category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific lot category from the system [Hard-Delete]")]
    public partial class DeleteLotCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete lot category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotCategory.Delete"),
        PublicAPI,
        Route("/Auctions/LotCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific lot category from the system [Hard-Delete]")]
    public partial class DeleteLotCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear lot category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/LotCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all lot category calls.")]
    public class ClearLotCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class LotCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetLotCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ILotCategoryModel, LotCategoryModel, ILotCategorySearchModel, LotCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.LotCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetLotCategoriesForConnect request)
        {
            return await Workflows.LotCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotCategoriesDigest request)
        {
            return await Workflows.LotCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetLotCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.LotCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.LotCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckLotCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotCategoryExistsByID request)
        {
            return await Workflows.LotCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLotCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotCategoryExistsByKey request)
        {
            return await Workflows.LotCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertLotCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertLotCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateLotCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateLotCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateLotCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateLotCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateLotCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLotCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateLotCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLotCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateLotCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLotCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateLotCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLotCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteLotCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLotCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteLotCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLotCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotCategoryDataAsync,
                    () => Workflows.LotCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearLotCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearLotCategoryCache request)
        {
            await ClearCachedLotCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedLotCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetLotCategories>(string.Empty),
                    UrnId.Create<GetLotCategoryByID>(string.Empty),
                    UrnId.Create<GetLotCategoryByKey>(string.Empty),
                    UrnId.Create<CheckLotCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckLotCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class LotCategoryService : LotCategoryServiceBase { }
}
