// <autogenerated>
// <copyright file="CounterService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the counter service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of counters.</summary>
    /// <seealso cref="CounterSearchModel"/>
    /// <seealso cref="IReturn{CounterPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/Counters", "GET", Priority = 1,
            Summary = "Use to get a list of counters")]
    public partial class GetCounters : CounterSearchModel, IReturn<CounterPagedResults> { }

    /// <summary>A ServiceStack Route to get counters for connect.</summary>
    /// <seealso cref="CounterSearchModel"/>
    /// <seealso cref="IReturn{List{CounterModel}}"/>
    [Authenticate, RequiredPermission("Counters.Counter.View"),
        PublicAPI,
        Route("/Counters/CountersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all counters")]
    public partial class GetCountersForConnect : CounterSearchModel, IReturn<List<CounterModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all counters.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Counters.Counter.View"),
        PublicAPI,
        Route("/Counters/CountersDigest", "GET",
            Summary = "Use to get a hash representing each counters")]
    public partial class GetCountersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get counter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CounterModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/Counter/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific counter")]
    public partial class GetCounterByID : ImplementsIDBase, IReturn<CounterModel> { }

    /// <summary>A ServiceStack Route to get counter.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CounterModel}"/>
    [PublicAPI,
        Route("/Counters/Counter/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific counter by the custom key")]
    public partial class GetCounterByKey : ImplementsKeyBase, IReturn<CounterModel> { }

    /// <summary>A ServiceStack Route to check counter exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.Counter.View"),
        PublicAPI,
        Route("/Counters/Counter/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.Counter.View"),
        PublicAPI,
        Route("/Counters/Counter/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create counter.</summary>
    /// <seealso cref="CounterModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/Counter/Create", "POST", Priority = 1,
            Summary = "Use to create a new counter.")]
    public partial class CreateCounter : CounterModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert counter.</summary>
    /// <seealso cref="CounterModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Counters/Counter/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing counter (as needed).")]
    public partial class UpsertCounter : CounterModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update counter.</summary>
    /// <seealso cref="CounterModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/Counter/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing counter.")]
    public partial class UpdateCounter : CounterModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate counter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/Counter/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter from the system [Soft-Delete]")]
    public partial class DeactivateCounterByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate counter by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Deactivate"),
        PublicAPI,
        Route("/Counters/Counter/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter from the system [Soft-Delete]")]
    public partial class DeactivateCounterByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/Counter/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Reactivate"),
        PublicAPI,
        Route("/Counters/Counter/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/Counter/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific counter from the system [Hard-Delete]")]
    public partial class DeleteCounterByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.Counter.Delete"),
        PublicAPI,
        Route("/Counters/Counter/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific counter from the system [Hard-Delete]")]
    public partial class DeleteCounterByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear counter cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/Counter/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all counter calls.")]
    public class ClearCounterCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CounterServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCounters"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounters request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICounterModel, CounterModel, ICounterSearchModel, CounterPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Counters)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCountersForConnect request)
        {
            return await Workflows.Counters.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountersDigest request)
        {
            return await Workflows.Counters.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCounterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Counters, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Counters, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCounterExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterExistsByID request)
        {
            return await Workflows.Counters.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterExistsByKey request)
        {
            return await Workflows.Counters.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCounter"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCounter request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCounter"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCounter request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCounter"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCounter request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCounterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCounterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCounterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCounterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCounterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCounterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterDataAsync,
                    () => Workflows.Counters.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCounterCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCounterCache request)
        {
            await ClearCachedCounterDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCounterDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCounters>(string.Empty),
                    UrnId.Create<GetCounterByID>(string.Empty),
                    UrnId.Create<GetCounterByKey>(string.Empty),
                    UrnId.Create<CheckCounterExistsByID>(string.Empty),
                    UrnId.Create<CheckCounterExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CounterService : CounterServiceBase { }
}
