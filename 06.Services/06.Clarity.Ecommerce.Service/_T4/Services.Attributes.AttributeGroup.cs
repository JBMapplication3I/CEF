// <autogenerated>
// <copyright file="AttributeGroupService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the attribute group service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of attribute groups.</summary>
    /// <seealso cref="AttributeGroupSearchModel"/>
    /// <seealso cref="IReturn{AttributeGroupPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/AttributeGroups", "GET", Priority = 1,
            Summary = "Use to get a list of attribute groups")]
    public partial class GetAttributeGroups : AttributeGroupSearchModel, IReturn<AttributeGroupPagedResults> { }

    /// <summary>A ServiceStack Route to get attribute groups for connect.</summary>
    /// <seealso cref="AttributeGroupSearchModel"/>
    /// <seealso cref="IReturn{List{AttributeGroupModel}}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.View"),
        PublicAPI,
        Route("/Attributes/AttributeGroupsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all attribute groups")]
    public partial class GetAttributeGroupsForConnect : AttributeGroupSearchModel, IReturn<List<AttributeGroupModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all attribute groups.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.View"),
        PublicAPI,
        Route("/Attributes/AttributeGroupsDigest", "GET",
            Summary = "Use to get a hash representing each attribute groups")]
    public partial class GetAttributeGroupsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get attribute group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AttributeGroupModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/AttributeGroup/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific attribute group")]
    public partial class GetAttributeGroupByID : ImplementsIDBase, IReturn<AttributeGroupModel> { }

    /// <summary>A ServiceStack Route to get attribute group.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AttributeGroupModel}"/>
    [PublicAPI,
        Route("/Attributes/AttributeGroup/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific attribute group by the custom key")]
    public partial class GetAttributeGroupByKey : ImplementsKeyBase, IReturn<AttributeGroupModel> { }

    /// <summary>A ServiceStack Route to get attribute group.</summary>
    /// <seealso cref="IReturn{AttributeGroupModel}"/>
    [PublicAPI,
        Route("/Attributes/AttributeGroup/Name", "GET", Priority = 1,
            Summary = "Use to get a specific attribute group by the name")]
    public partial class GetAttributeGroupByName : ImplementsNameBase, IReturn<AttributeGroupModel> { }

    /// <summary>A ServiceStack Route to get attribute group.</summary>
    /// <seealso cref="IReturn{AttributeGroupModel}"/>
    [PublicAPI,
        Route("/Attributes/AttributeGroup/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific attribute group by the name")]
    public partial class GetAttributeGroupByDisplayName : ImplementsDisplayNameBase, IReturn<AttributeGroupModel> { }

    /// <summary>A ServiceStack Route to check attribute group exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.View"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeGroupExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check attribute group exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.View"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeGroupExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check attribute group exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.View"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeGroupExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check attribute group exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.View"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeGroupExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create attribute group.</summary>
    /// <seealso cref="AttributeGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeGroup/Create", "POST", Priority = 1,
            Summary = "Use to create a new attribute group.")]
    public partial class CreateAttributeGroup : AttributeGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert attribute group.</summary>
    /// <seealso cref="AttributeGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Attributes/AttributeGroup/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing attribute group (as needed).")]
    public partial class UpsertAttributeGroup : AttributeGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update attribute group.</summary>
    /// <seealso cref="AttributeGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeGroup/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing attribute group.")]
    public partial class UpdateAttributeGroup : AttributeGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate attribute group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeGroup/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific attribute group from the system [Soft-Delete]")]
    public partial class DeactivateAttributeGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate attribute group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Deactivate"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific attribute group from the system [Soft-Delete]")]
    public partial class DeactivateAttributeGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate attribute group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeGroup/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific attribute group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAttributeGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate attribute group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Reactivate"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific attribute group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAttributeGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete attribute group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeGroup/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific attribute group from the system [Hard-Delete]")]
    public partial class DeleteAttributeGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete attribute group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeGroup.Delete"),
        PublicAPI,
        Route("/Attributes/AttributeGroup/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific attribute group from the system [Hard-Delete]")]
    public partial class DeleteAttributeGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear attribute group cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/AttributeGroup/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all attribute group calls.")]
    public class ClearAttributeGroupCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AttributeGroupServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAttributeGroups"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeGroups request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAttributeGroupModel, AttributeGroupModel, IAttributeGroupSearchModel, AttributeGroupPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AttributeGroups)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeGroupsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAttributeGroupsForConnect request)
        {
            return await Workflows.AttributeGroups.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeGroupsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeGroupsDigest request)
        {
            return await Workflows.AttributeGroups.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAttributeGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeGroupByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AttributeGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeGroupByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AttributeGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeGroupByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeGroupByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AttributeGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeGroupByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeGroupByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AttributeGroups, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAttributeGroupExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeGroupExistsByID request)
        {
            return await Workflows.AttributeGroups.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAttributeGroupExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeGroupExistsByKey request)
        {
            return await Workflows.AttributeGroups.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAttributeGroupExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeGroupExistsByName request)
        {
            return await Workflows.AttributeGroups.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAttributeGroupExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeGroupExistsByDisplayName request)
        {
            return await Workflows.AttributeGroups.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAttributeGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAttributeGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAttributeGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAttributeGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAttributeGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAttributeGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAttributeGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAttributeGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAttributeGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAttributeGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAttributeGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAttributeGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAttributeGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAttributeGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAttributeGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAttributeGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAttributeGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAttributeGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeGroupDataAsync,
                    () => Workflows.AttributeGroups.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAttributeGroupCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAttributeGroupCache request)
        {
            await ClearCachedAttributeGroupDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAttributeGroupDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAttributeGroups>(string.Empty),
                    UrnId.Create<GetAttributeGroupByID>(string.Empty),
                    UrnId.Create<GetAttributeGroupByKey>(string.Empty),
                    UrnId.Create<GetAttributeGroupByName>(string.Empty),
                    UrnId.Create<CheckAttributeGroupExistsByID>(string.Empty),
                    UrnId.Create<CheckAttributeGroupExistsByKey>(string.Empty),
                    UrnId.Create<CheckAttributeGroupExistsByName>(string.Empty),
                    UrnId.Create<CheckAttributeGroupExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AttributeGroupService : AttributeGroupServiceBase { }
}
