// <autogenerated>
// <copyright file="BrandStoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand stores.</summary>
    /// <seealso cref="BrandStoreSearchModel"/>
    /// <seealso cref="IReturn{BrandStorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandStores", "GET", Priority = 1,
            Summary = "Use to get a list of brand stores")]
    public partial class GetBrandStores : BrandStoreSearchModel, IReturn<BrandStorePagedResults> { }

    /// <summary>A ServiceStack Route to get brand stores for connect.</summary>
    /// <seealso cref="BrandStoreSearchModel"/>
    /// <seealso cref="IReturn{List{BrandStoreModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.View"),
        PublicAPI,
        Route("/Brands/BrandStoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand stores")]
    public partial class GetBrandStoresForConnect : BrandStoreSearchModel, IReturn<List<BrandStoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.View"),
        PublicAPI,
        Route("/Brands/BrandStoresDigest", "GET",
            Summary = "Use to get a hash representing each brand stores")]
    public partial class GetBrandStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandStoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandStore/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand store")]
    public partial class GetBrandStoreByID : ImplementsIDBase, IReturn<BrandStoreModel> { }

    /// <summary>A ServiceStack Route to get brand store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandStoreModel}"/>
    [PublicAPI,
        Route("/Brands/BrandStore/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand store by the custom key")]
    public partial class GetBrandStoreByKey : ImplementsKeyBase, IReturn<BrandStoreModel> { }

    /// <summary>A ServiceStack Route to check brand store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.View"),
        PublicAPI,
        Route("/Brands/BrandStore/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.View"),
        PublicAPI,
        Route("/Brands/BrandStore/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand store.</summary>
    /// <seealso cref="BrandStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandStore/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand store.")]
    public partial class CreateBrandStore : BrandStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand store.</summary>
    /// <seealso cref="BrandStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandStore/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand store (as needed).")]
    public partial class UpsertBrandStore : BrandStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand store.</summary>
    /// <seealso cref="BrandStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandStore/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand store.")]
    public partial class UpdateBrandStore : BrandStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandStore/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand store from the system [Soft-Delete]")]
    public partial class DeactivateBrandStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandStore/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand store from the system [Soft-Delete]")]
    public partial class DeactivateBrandStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandStore/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandStore/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandStore/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand store from the system [Hard-Delete]")]
    public partial class DeleteBrandStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandStore.Delete"),
        PublicAPI,
        Route("/Brands/BrandStore/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand store from the system [Hard-Delete]")]
    public partial class DeleteBrandStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandStore/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand store calls.")]
    public class ClearBrandStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandStoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandStoreModel, BrandStoreModel, IBrandStoreSearchModel, BrandStorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandStores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandStoresForConnect request)
        {
            return await Workflows.BrandStores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandStoresDigest request)
        {
            return await Workflows.BrandStores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandStores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandStores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandStoreExistsByID request)
        {
            return await Workflows.BrandStores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandStoreExistsByKey request)
        {
            return await Workflows.BrandStores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandStoreDataAsync,
                    () => Workflows.BrandStores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandStoreCache request)
        {
            await ClearCachedBrandStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandStores>(string.Empty),
                    UrnId.Create<GetBrandStoreByID>(string.Empty),
                    UrnId.Create<GetBrandStoreByKey>(string.Empty),
                    UrnId.Create<CheckBrandStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandStoreExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandStoreService : BrandStoreServiceBase { }
}
