// <autogenerated>
// <copyright file="SalesGroupService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales group service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales groups.</summary>
    /// <seealso cref="SalesGroupSearchModel"/>
    /// <seealso cref="IReturn{SalesGroupPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sales/SalesGroups", "GET", Priority = 1,
            Summary = "Use to get a list of sales groups")]
    public partial class GetSalesGroups : SalesGroupSearchModel, IReturn<SalesGroupPagedResults> { }

    /// <summary>A ServiceStack Route to get sales groups for connect.</summary>
    /// <seealso cref="SalesGroupSearchModel"/>
    /// <seealso cref="IReturn{List{SalesGroupModel}}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.View"),
        PublicAPI,
        Route("/Sales/SalesGroupsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales groups")]
    public partial class GetSalesGroupsForConnect : SalesGroupSearchModel, IReturn<List<SalesGroupModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales groups.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.View"),
        PublicAPI,
        Route("/Sales/SalesGroupsDigest", "GET",
            Summary = "Use to get a hash representing each sales groups")]
    public partial class GetSalesGroupsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesGroupModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sales/SalesGroup/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales group")]
    public partial class GetSalesGroupByID : ImplementsIDBase, IReturn<SalesGroupModel> { }

    /// <summary>A ServiceStack Route to get sales group.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesGroupModel}"/>
    [PublicAPI,
        Route("/Sales/SalesGroup/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales group by the custom key")]
    public partial class GetSalesGroupByKey : ImplementsKeyBase, IReturn<SalesGroupModel> { }

    /// <summary>A ServiceStack Route to check sales group exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.View"),
        PublicAPI,
        Route("/Sales/SalesGroup/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesGroupExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales group exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.View"),
        PublicAPI,
        Route("/Sales/SalesGroup/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesGroupExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales group.</summary>
    /// <seealso cref="SalesGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesGroup/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales group.")]
    public partial class CreateSalesGroup : SalesGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales group.</summary>
    /// <seealso cref="SalesGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sales/SalesGroup/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales group (as needed).")]
    public partial class UpsertSalesGroup : SalesGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales group.</summary>
    /// <seealso cref="SalesGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesGroup/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales group.")]
    public partial class UpdateSalesGroup : SalesGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesGroup/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales group from the system [Soft-Delete]")]
    public partial class DeactivateSalesGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Deactivate"),
        PublicAPI,
        Route("/Sales/SalesGroup/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales group from the system [Soft-Delete]")]
    public partial class DeactivateSalesGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesGroup/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Reactivate"),
        PublicAPI,
        Route("/Sales/SalesGroup/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesGroup/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales group from the system [Hard-Delete]")]
    public partial class DeleteSalesGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesGroup.Delete"),
        PublicAPI,
        Route("/Sales/SalesGroup/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales group from the system [Hard-Delete]")]
    public partial class DeleteSalesGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales group cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sales/SalesGroup/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales group calls.")]
    public class ClearSalesGroupCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesGroupServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesGroups"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesGroups request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesGroupModel, SalesGroupModel, ISalesGroupSearchModel, SalesGroupPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesGroups)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesGroupsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesGroupsForConnect request)
        {
            return await Workflows.SalesGroups.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesGroupsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesGroupsDigest request)
        {
            return await Workflows.SalesGroups.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesGroupByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesGroupByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesGroups, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesGroupExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesGroupExistsByID request)
        {
            return await Workflows.SalesGroups.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesGroupExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesGroupExistsByKey request)
        {
            return await Workflows.SalesGroups.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesGroupDataAsync,
                    () => Workflows.SalesGroups.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesGroupCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesGroupCache request)
        {
            await ClearCachedSalesGroupDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesGroupDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesGroups>(string.Empty),
                    UrnId.Create<GetSalesGroupByID>(string.Empty),
                    UrnId.Create<GetSalesGroupByKey>(string.Empty),
                    UrnId.Create<CheckSalesGroupExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesGroupExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesGroupService : SalesGroupServiceBase { }
}
