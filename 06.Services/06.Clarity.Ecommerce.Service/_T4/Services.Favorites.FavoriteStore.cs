// <autogenerated>
// <copyright file="FavoriteStoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the favorite store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of favorite stores.</summary>
    /// <seealso cref="FavoriteStoreSearchModel"/>
    /// <seealso cref="IReturn{FavoriteStorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteStores", "GET", Priority = 1,
            Summary = "Use to get a list of favorite stores")]
    public partial class GetFavoriteStores : FavoriteStoreSearchModel, IReturn<FavoriteStorePagedResults> { }

    /// <summary>A ServiceStack Route to get favorite stores for connect.</summary>
    /// <seealso cref="FavoriteStoreSearchModel"/>
    /// <seealso cref="IReturn{List{FavoriteStoreModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.View"),
        PublicAPI,
        Route("/Favorites/FavoriteStoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all favorite stores")]
    public partial class GetFavoriteStoresForConnect : FavoriteStoreSearchModel, IReturn<List<FavoriteStoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all favorite stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.View"),
        PublicAPI,
        Route("/Favorites/FavoriteStoresDigest", "GET",
            Summary = "Use to get a hash representing each favorite stores")]
    public partial class GetFavoriteStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get favorite store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FavoriteStoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteStore/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite store")]
    public partial class GetFavoriteStoreByID : ImplementsIDBase, IReturn<FavoriteStoreModel> { }

    /// <summary>A ServiceStack Route to get favorite store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FavoriteStoreModel}"/>
    [PublicAPI,
        Route("/Favorites/FavoriteStore/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite store by the custom key")]
    public partial class GetFavoriteStoreByKey : ImplementsKeyBase, IReturn<FavoriteStoreModel> { }

    /// <summary>A ServiceStack Route to check favorite store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.View"),
        PublicAPI,
        Route("/Favorites/FavoriteStore/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check favorite store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.View"),
        PublicAPI,
        Route("/Favorites/FavoriteStore/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create favorite store.</summary>
    /// <seealso cref="FavoriteStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteStore/Create", "POST", Priority = 1,
            Summary = "Use to create a new favorite store.")]
    public partial class CreateFavoriteStore : FavoriteStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert favorite store.</summary>
    /// <seealso cref="FavoriteStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Favorites/FavoriteStore/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing favorite store (as needed).")]
    public partial class UpsertFavoriteStore : FavoriteStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update favorite store.</summary>
    /// <seealso cref="FavoriteStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteStore/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing favorite store.")]
    public partial class UpdateFavoriteStore : FavoriteStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate favorite store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteStore/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite store from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate favorite store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Deactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteStore/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite store from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteStore/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Reactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteStore/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteStore/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific favorite store from the system [Hard-Delete]")]
    public partial class DeleteFavoriteStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteStore.Delete"),
        PublicAPI,
        Route("/Favorites/FavoriteStore/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific favorite store from the system [Hard-Delete]")]
    public partial class DeleteFavoriteStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear favorite store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteStore/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all favorite store calls.")]
    public class ClearFavoriteStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FavoriteStoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFavoriteStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFavoriteStoreModel, FavoriteStoreModel, IFavoriteStoreSearchModel, FavoriteStorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FavoriteStores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFavoriteStoresForConnect request)
        {
            return await Workflows.FavoriteStores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteStoresDigest request)
        {
            return await Workflows.FavoriteStores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFavoriteStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FavoriteStores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FavoriteStores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFavoriteStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteStoreExistsByID request)
        {
            return await Workflows.FavoriteStores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFavoriteStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteStoreExistsByKey request)
        {
            return await Workflows.FavoriteStores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFavoriteStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFavoriteStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFavoriteStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFavoriteStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFavoriteStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFavoriteStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFavoriteStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFavoriteStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteStoreDataAsync,
                    () => Workflows.FavoriteStores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFavoriteStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFavoriteStoreCache request)
        {
            await ClearCachedFavoriteStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFavoriteStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFavoriteStores>(string.Empty),
                    UrnId.Create<GetFavoriteStoreByID>(string.Empty),
                    UrnId.Create<GetFavoriteStoreByKey>(string.Empty),
                    UrnId.Create<CheckFavoriteStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckFavoriteStoreExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FavoriteStoreService : FavoriteStoreServiceBase { }
}
