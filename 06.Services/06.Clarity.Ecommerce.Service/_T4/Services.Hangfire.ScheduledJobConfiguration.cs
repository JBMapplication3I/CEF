// <autogenerated>
// <copyright file="ScheduledJobConfigurationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the scheduled job configuration service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of scheduled job configurations.</summary>
    /// <seealso cref="ScheduledJobConfigurationSearchModel"/>
    /// <seealso cref="IReturn{ScheduledJobConfigurationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Hangfire/ScheduledJobConfigurations", "GET", Priority = 1,
            Summary = "Use to get a list of scheduled job configurations")]
    public partial class GetScheduledJobConfigurations : ScheduledJobConfigurationSearchModel, IReturn<ScheduledJobConfigurationPagedResults> { }

    /// <summary>A ServiceStack Route to get scheduled job configurations for connect.</summary>
    /// <seealso cref="ScheduledJobConfigurationSearchModel"/>
    /// <seealso cref="IReturn{List{ScheduledJobConfigurationModel}}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all scheduled job configurations")]
    public partial class GetScheduledJobConfigurationsForConnect : ScheduledJobConfigurationSearchModel, IReturn<List<ScheduledJobConfigurationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all scheduled job configurations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationsDigest", "GET",
            Summary = "Use to get a hash representing each scheduled job configurations")]
    public partial class GetScheduledJobConfigurationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get scheduled job configuration.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ScheduledJobConfigurationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Hangfire/ScheduledJobConfiguration/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific scheduled job configuration")]
    public partial class GetScheduledJobConfigurationByID : ImplementsIDBase, IReturn<ScheduledJobConfigurationModel> { }

    /// <summary>A ServiceStack Route to get scheduled job configuration.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ScheduledJobConfigurationModel}"/>
    [PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific scheduled job configuration by the custom key")]
    public partial class GetScheduledJobConfigurationByKey : ImplementsKeyBase, IReturn<ScheduledJobConfigurationModel> { }

    /// <summary>A ServiceStack Route to get scheduled job configuration.</summary>
    /// <seealso cref="IReturn{ScheduledJobConfigurationModel}"/>
    [PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Name", "GET", Priority = 1,
            Summary = "Use to get a specific scheduled job configuration by the name")]
    public partial class GetScheduledJobConfigurationByName : ImplementsNameBase, IReturn<ScheduledJobConfigurationModel> { }

    /// <summary>A ServiceStack Route to check scheduled job configuration exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckScheduledJobConfigurationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scheduled job configuration exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckScheduledJobConfigurationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scheduled job configuration exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckScheduledJobConfigurationExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create scheduled job configuration.</summary>
    /// <seealso cref="ScheduledJobConfigurationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Create", "POST", Priority = 1,
            Summary = "Use to create a new scheduled job configuration.")]
    public partial class CreateScheduledJobConfiguration : ScheduledJobConfigurationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert scheduled job configuration.</summary>
    /// <seealso cref="ScheduledJobConfigurationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing scheduled job configuration (as needed).")]
    public partial class UpsertScheduledJobConfiguration : ScheduledJobConfigurationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update scheduled job configuration.</summary>
    /// <seealso cref="ScheduledJobConfigurationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing scheduled job configuration.")]
    public partial class UpdateScheduledJobConfiguration : ScheduledJobConfigurationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate scheduled job configuration.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scheduled job configuration from the system [Soft-Delete]")]
    public partial class DeactivateScheduledJobConfigurationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate scheduled job configuration by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Deactivate"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scheduled job configuration from the system [Soft-Delete]")]
    public partial class DeactivateScheduledJobConfigurationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scheduled job configuration.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scheduled job configuration from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScheduledJobConfigurationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scheduled job configuration by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Reactivate"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scheduled job configuration from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScheduledJobConfigurationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scheduled job configuration.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific scheduled job configuration from the system [Hard-Delete]")]
    public partial class DeleteScheduledJobConfigurationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scheduled job configuration by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfiguration.Delete"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfiguration/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific scheduled job configuration from the system [Hard-Delete]")]
    public partial class DeleteScheduledJobConfigurationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear scheduled job configuration cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Hangfire/ScheduledJobConfiguration/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all scheduled job configuration calls.")]
    public class ClearScheduledJobConfigurationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ScheduledJobConfigurationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IScheduledJobConfigurationModel, ScheduledJobConfigurationModel, IScheduledJobConfigurationSearchModel, ScheduledJobConfigurationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ScheduledJobConfigurations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetScheduledJobConfigurationsForConnect request)
        {
            return await Workflows.ScheduledJobConfigurations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationsDigest request)
        {
            return await Workflows.ScheduledJobConfigurations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ScheduledJobConfigurations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ScheduledJobConfigurations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ScheduledJobConfigurations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckScheduledJobConfigurationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScheduledJobConfigurationExistsByID request)
        {
            return await Workflows.ScheduledJobConfigurations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScheduledJobConfigurationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScheduledJobConfigurationExistsByKey request)
        {
            return await Workflows.ScheduledJobConfigurations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScheduledJobConfigurationExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScheduledJobConfigurationExistsByName request)
        {
            return await Workflows.ScheduledJobConfigurations.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertScheduledJobConfiguration"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertScheduledJobConfiguration request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateScheduledJobConfiguration"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateScheduledJobConfiguration request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateScheduledJobConfiguration"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateScheduledJobConfiguration request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateScheduledJobConfigurationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScheduledJobConfigurationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateScheduledJobConfigurationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScheduledJobConfigurationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateScheduledJobConfigurationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScheduledJobConfigurationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateScheduledJobConfigurationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScheduledJobConfigurationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteScheduledJobConfigurationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScheduledJobConfigurationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteScheduledJobConfigurationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScheduledJobConfigurationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationDataAsync,
                    () => Workflows.ScheduledJobConfigurations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearScheduledJobConfigurationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearScheduledJobConfigurationCache request)
        {
            await ClearCachedScheduledJobConfigurationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedScheduledJobConfigurationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetScheduledJobConfigurations>(string.Empty),
                    UrnId.Create<GetScheduledJobConfigurationByID>(string.Empty),
                    UrnId.Create<GetScheduledJobConfigurationByKey>(string.Empty),
                    UrnId.Create<GetScheduledJobConfigurationByName>(string.Empty),
                    UrnId.Create<CheckScheduledJobConfigurationExistsByID>(string.Empty),
                    UrnId.Create<CheckScheduledJobConfigurationExistsByKey>(string.Empty),
                    UrnId.Create<CheckScheduledJobConfigurationExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ScheduledJobConfigurationService : ScheduledJobConfigurationServiceBase { }
}
