// <autogenerated>
// <copyright file="PricePointService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price point service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price points.</summary>
    /// <seealso cref="PricePointSearchModel"/>
    /// <seealso cref="IReturn{PricePointPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PricePoints", "GET", Priority = 1,
            Summary = "Use to get a list of price points")]
    public partial class GetPricePoints : PricePointSearchModel, IReturn<PricePointPagedResults> { }

    /// <summary>A ServiceStack Route to get price points for connect.</summary>
    /// <seealso cref="PricePointSearchModel"/>
    /// <seealso cref="IReturn{List{PricePointModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.View"),
        PublicAPI,
        Route("/Pricing/PricePointsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price points")]
    public partial class GetPricePointsForConnect : PricePointSearchModel, IReturn<List<PricePointModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price points.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.View"),
        PublicAPI,
        Route("/Pricing/PricePointsDigest", "GET",
            Summary = "Use to get a hash representing each price points")]
    public partial class GetPricePointsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PricePointModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PricePoint/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price point")]
    public partial class GetPricePointByID : ImplementsIDBase, IReturn<PricePointModel> { }

    /// <summary>A ServiceStack Route to get price point.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PricePointModel}"/>
    [PublicAPI,
        Route("/Pricing/PricePoint/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price point by the custom key")]
    public partial class GetPricePointByKey : ImplementsKeyBase, IReturn<PricePointModel> { }

    /// <summary>A ServiceStack Route to get price point.</summary>
    /// <seealso cref="IReturn{PricePointModel}"/>
    [PublicAPI,
        Route("/Pricing/PricePoint/Name", "GET", Priority = 1,
            Summary = "Use to get a specific price point by the name")]
    public partial class GetPricePointByName : ImplementsNameBase, IReturn<PricePointModel> { }

    /// <summary>A ServiceStack Route to get price point.</summary>
    /// <seealso cref="IReturn{PricePointModel}"/>
    [PublicAPI,
        Route("/Pricing/PricePoint/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific price point by the name")]
    public partial class GetPricePointByDisplayName : ImplementsDisplayNameBase, IReturn<PricePointModel> { }

    /// <summary>A ServiceStack Route to check price point exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.View"),
        PublicAPI,
        Route("/Pricing/PricePoint/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPricePointExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price point exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.View"),
        PublicAPI,
        Route("/Pricing/PricePoint/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPricePointExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price point exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.View"),
        PublicAPI,
        Route("/Pricing/PricePoint/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPricePointExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price point exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.View"),
        PublicAPI,
        Route("/Pricing/PricePoint/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPricePointExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price point.</summary>
    /// <seealso cref="PricePointModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PricePoint/Create", "POST", Priority = 1,
            Summary = "Use to create a new price point.")]
    public partial class CreatePricePoint : PricePointModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price point.</summary>
    /// <seealso cref="PricePointModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PricePoint/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price point (as needed).")]
    public partial class UpsertPricePoint : PricePointModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price point.</summary>
    /// <seealso cref="PricePointModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PricePoint/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price point.")]
    public partial class UpdatePricePoint : PricePointModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PricePoint/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price point from the system [Soft-Delete]")]
    public partial class DeactivatePricePointByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price point by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Deactivate"),
        PublicAPI,
        Route("/Pricing/PricePoint/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price point from the system [Soft-Delete]")]
    public partial class DeactivatePricePointByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PricePoint/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price point from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePricePointByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price point by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Reactivate"),
        PublicAPI,
        Route("/Pricing/PricePoint/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price point from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePricePointByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PricePoint/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price point from the system [Hard-Delete]")]
    public partial class DeletePricePointByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price point by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PricePoint.Delete"),
        PublicAPI,
        Route("/Pricing/PricePoint/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price point from the system [Hard-Delete]")]
    public partial class DeletePricePointByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price point cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PricePoint/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price point calls.")]
    public class ClearPricePointCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PricePointServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPricePoints"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPricePoints request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPricePointModel, PricePointModel, IPricePointSearchModel, PricePointPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PricePoints)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPricePointsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPricePointsForConnect request)
        {
            return await Workflows.PricePoints.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPricePointsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPricePointsDigest request)
        {
            return await Workflows.PricePoints.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPricePointByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PricePoints, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPricePointByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PricePoints, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPricePointByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPricePointByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PricePoints, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPricePointByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPricePointByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PricePoints, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPricePointExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPricePointExistsByID request)
        {
            return await Workflows.PricePoints.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPricePointExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPricePointExistsByKey request)
        {
            return await Workflows.PricePoints.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPricePointExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPricePointExistsByName request)
        {
            return await Workflows.PricePoints.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPricePointExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPricePointExistsByDisplayName request)
        {
            return await Workflows.PricePoints.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPricePoint"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPricePoint request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePricePoint"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePricePoint request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePricePoint"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePricePoint request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePricePointByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePricePointByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePricePointByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePricePointByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePricePointByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePricePointByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPricePointDataAsync,
                    () => Workflows.PricePoints.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPricePointCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPricePointCache request)
        {
            await ClearCachedPricePointDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPricePointDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPricePoints>(string.Empty),
                    UrnId.Create<GetPricePointByID>(string.Empty),
                    UrnId.Create<GetPricePointByKey>(string.Empty),
                    UrnId.Create<GetPricePointByName>(string.Empty),
                    UrnId.Create<CheckPricePointExistsByID>(string.Empty),
                    UrnId.Create<CheckPricePointExistsByKey>(string.Empty),
                    UrnId.Create<CheckPricePointExistsByName>(string.Empty),
                    UrnId.Create<CheckPricePointExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PricePointService : PricePointServiceBase { }
}
