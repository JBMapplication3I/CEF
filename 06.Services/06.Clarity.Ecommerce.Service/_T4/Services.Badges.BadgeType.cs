// <autogenerated>
// <copyright file="BadgeTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the badge type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of badge types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{BadgeTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeTypes", "GET", Priority = 1,
            Summary = "Use to get a list of badge types")]
    public partial class GetBadgeTypes : TypeSearchModel, IReturn<BadgeTypePagedResults> { }

    /// <summary>A ServiceStack Route to get badge types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.View"),
        PublicAPI,
        Route("/Badges/BadgeTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all badge types")]
    public partial class GetBadgeTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all badge types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.View"),
        PublicAPI,
        Route("/Badges/BadgeTypesDigest", "GET",
            Summary = "Use to get a hash representing each badge types")]
    public partial class GetBadgeTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get badge type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific badge type")]
    public partial class GetBadgeTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get badge type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific badge type by the custom key")]
    public partial class GetBadgeTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get badge type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific badge type by the name")]
    public partial class GetBadgeTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get badge type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific badge type by the name")]
    public partial class GetBadgeTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check badge type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.View"),
        PublicAPI,
        Route("/Badges/BadgeType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.View"),
        PublicAPI,
        Route("/Badges/BadgeType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.View"),
        PublicAPI,
        Route("/Badges/BadgeType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.View"),
        PublicAPI,
        Route("/Badges/BadgeType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create badge type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeType/Create", "POST", Priority = 1,
            Summary = "Use to create a new badge type.")]
    public partial class CreateBadgeType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert badge type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Badges/BadgeType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing badge type (as needed).")]
    public partial class UpsertBadgeType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update badge type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing badge type.")]
    public partial class UpdateBadgeType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate badge type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge type from the system [Soft-Delete]")]
    public partial class DeactivateBadgeTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate badge type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Deactivate"),
        PublicAPI,
        Route("/Badges/BadgeType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge type from the system [Soft-Delete]")]
    public partial class DeactivateBadgeTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Reactivate"),
        PublicAPI,
        Route("/Badges/BadgeType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific badge type from the system [Hard-Delete]")]
    public partial class DeleteBadgeTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeType.Delete"),
        PublicAPI,
        Route("/Badges/BadgeType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific badge type from the system [Hard-Delete]")]
    public partial class DeleteBadgeTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear badge type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all badge type calls.")]
    public class ClearBadgeTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BadgeTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBadgeTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, BadgeTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BadgeTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBadgeTypesForConnect request)
        {
            return await Workflows.BadgeTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeTypesDigest request)
        {
            return await Workflows.BadgeTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBadgeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BadgeTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BadgeTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.BadgeTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.BadgeTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBadgeTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeTypeExistsByID request)
        {
            return await Workflows.BadgeTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeTypeExistsByKey request)
        {
            return await Workflows.BadgeTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeTypeExistsByName request)
        {
            return await Workflows.BadgeTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeTypeExistsByDisplayName request)
        {
            return await Workflows.BadgeTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBadgeType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBadgeType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBadgeType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBadgeType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBadgeType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBadgeType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBadgeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBadgeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBadgeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBadgeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBadgeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBadgeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeTypeDataAsync,
                    () => Workflows.BadgeTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBadgeTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBadgeTypeCache request)
        {
            await ClearCachedBadgeTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBadgeTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBadgeTypes>(string.Empty),
                    UrnId.Create<GetBadgeTypeByID>(string.Empty),
                    UrnId.Create<GetBadgeTypeByKey>(string.Empty),
                    UrnId.Create<GetBadgeTypeByName>(string.Empty),
                    UrnId.Create<CheckBadgeTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckBadgeTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckBadgeTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckBadgeTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BadgeTypeService : BadgeTypeServiceBase { }
}
