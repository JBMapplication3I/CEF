// <autogenerated>
// <copyright file="PriceRuleProductTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule product type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule product types.</summary>
    /// <seealso cref="PriceRuleProductTypeSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleProductTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleProductTypes", "GET", Priority = 1,
            Summary = "Use to get a list of price rule product types")]
    public partial class GetPriceRuleProductTypes : PriceRuleProductTypeSearchModel, IReturn<PriceRuleProductTypePagedResults> { }

    /// <summary>A ServiceStack Route to get price rule product types for connect.</summary>
    /// <seealso cref="PriceRuleProductTypeSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleProductTypeModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule product types")]
    public partial class GetPriceRuleProductTypesForConnect : PriceRuleProductTypeSearchModel, IReturn<List<PriceRuleProductTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule product types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductTypesDigest", "GET",
            Summary = "Use to get a hash representing each price rule product types")]
    public partial class GetPriceRuleProductTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleProductTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleProductType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule product type")]
    public partial class GetPriceRuleProductTypeByID : ImplementsIDBase, IReturn<PriceRuleProductTypeModel> { }

    /// <summary>A ServiceStack Route to get price rule product type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleProductTypeModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleProductType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule product type by the custom key")]
    public partial class GetPriceRuleProductTypeByKey : ImplementsKeyBase, IReturn<PriceRuleProductTypeModel> { }

    /// <summary>A ServiceStack Route to check price rule product type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleProductTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule product type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleProductTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule product type.</summary>
    /// <seealso cref="PriceRuleProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule product type.")]
    public partial class CreatePriceRuleProductType : PriceRuleProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule product type.</summary>
    /// <seealso cref="PriceRuleProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule product type (as needed).")]
    public partial class UpsertPriceRuleProductType : PriceRuleProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule product type.</summary>
    /// <seealso cref="PriceRuleProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule product type.")]
    public partial class UpdatePriceRuleProductType : PriceRuleProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule product type from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule product type from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule product type from the system [Hard-Delete]")]
    public partial class DeletePriceRuleProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProductType.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule product type from the system [Hard-Delete]")]
    public partial class DeletePriceRuleProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule product type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleProductType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule product type calls.")]
    public class ClearPriceRuleProductTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleProductTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleProductTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleProductTypeModel, PriceRuleProductTypeModel, IPriceRuleProductTypeSearchModel, PriceRuleProductTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleProductTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleProductTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleProductTypesForConnect request)
        {
            return await Workflows.PriceRuleProductTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleProductTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductTypesDigest request)
        {
            return await Workflows.PriceRuleProductTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleProductTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleProductTypeExistsByID request)
        {
            return await Workflows.PriceRuleProductTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleProductTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleProductTypeExistsByKey request)
        {
            return await Workflows.PriceRuleProductTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductTypeDataAsync,
                    () => Workflows.PriceRuleProductTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleProductTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleProductTypeCache request)
        {
            await ClearCachedPriceRuleProductTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleProductTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleProductTypes>(string.Empty),
                    UrnId.Create<GetPriceRuleProductTypeByID>(string.Empty),
                    UrnId.Create<GetPriceRuleProductTypeByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleProductTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleProductTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleProductTypeService : PriceRuleProductTypeServiceBase { }
}
