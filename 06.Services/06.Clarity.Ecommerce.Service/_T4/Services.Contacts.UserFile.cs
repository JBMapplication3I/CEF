// <autogenerated>
// <copyright file="UserFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user files.</summary>
    /// <seealso cref="UserFileSearchModel"/>
    /// <seealso cref="IReturn{UserFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserFiles", "GET", Priority = 1,
            Summary = "Use to get a list of user files")]
    public partial class GetUserFiles : UserFileSearchModel, IReturn<UserFilePagedResults> { }

    /// <summary>A ServiceStack Route to get user files for connect.</summary>
    /// <seealso cref="UserFileSearchModel"/>
    /// <seealso cref="IReturn{List{UserFileModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.View"),
        PublicAPI,
        Route("/Contacts/UserFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user files")]
    public partial class GetUserFilesForConnect : UserFileSearchModel, IReturn<List<UserFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.View"),
        PublicAPI,
        Route("/Contacts/UserFilesDigest", "GET",
            Summary = "Use to get a hash representing each user files")]
    public partial class GetUserFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UserFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user file")]
    public partial class GetUserFileByID : ImplementsIDBase, IReturn<UserFileModel> { }

    /// <summary>A ServiceStack Route to get user file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UserFileModel}"/>
    [PublicAPI,
        Route("/Contacts/UserFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user file by the custom key")]
    public partial class GetUserFileByKey : ImplementsKeyBase, IReturn<UserFileModel> { }

    /// <summary>A ServiceStack Route to get user file.</summary>
    /// <seealso cref="IReturn{UserFileModel}"/>
    [PublicAPI,
        Route("/Contacts/UserFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific user file by the name")]
    public partial class GetUserFileByName : ImplementsNameBase, IReturn<UserFileModel> { }

    /// <summary>A ServiceStack Route to get user file.</summary>
    /// <seealso cref="IReturn{UserFileModel}"/>
    [PublicAPI,
        Route("/Contacts/UserFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific user file by the SEO URL")]
    public partial class GetUserFileBySeoUrl : ImplementsSeoUrlBase, IReturn<UserFileModel> { }

    /// <summary>A ServiceStack Route to check user file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.View"),
        PublicAPI,
        Route("/Contacts/UserFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.View"),
        PublicAPI,
        Route("/Contacts/UserFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.View"),
        PublicAPI,
        Route("/Contacts/UserFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.View"),
        PublicAPI,
        Route("/Contacts/UserFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckUserFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user file.</summary>
    /// <seealso cref="UserFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new user file.")]
    public partial class CreateUserFile : UserFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user file.</summary>
    /// <seealso cref="UserFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/UserFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user file (as needed).")]
    public partial class UpsertUserFile : UserFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user file.</summary>
    /// <seealso cref="UserFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user file.")]
    public partial class UpdateUserFile : UserFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user file from the system [Soft-Delete]")]
    public partial class DeactivateUserFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Deactivate"),
        PublicAPI,
        Route("/Contacts/UserFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user file from the system [Soft-Delete]")]
    public partial class DeactivateUserFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Reactivate"),
        PublicAPI,
        Route("/Contacts/UserFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user file from the system [Hard-Delete]")]
    public partial class DeleteUserFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserFile.Delete"),
        PublicAPI,
        Route("/Contacts/UserFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user file from the system [Hard-Delete]")]
    public partial class DeleteUserFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user file calls.")]
    public class ClearUserFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUserFileModel, UserFileModel, IUserFileSearchModel, UserFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserFilesForConnect request)
        {
            return await Workflows.UserFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserFilesDigest request)
        {
            return await Workflows.UserFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.UserFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.UserFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserFileExistsByID request)
        {
            return await Workflows.UserFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserFileExistsByKey request)
        {
            return await Workflows.UserFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserFileExistsByName request)
        {
            return await Workflows.UserFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserFileExistsBySeoUrl request)
        {
            return await Workflows.UserFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserFileDataAsync,
                    () => Workflows.UserFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserFileCache request)
        {
            await ClearCachedUserFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserFiles>(string.Empty),
                    UrnId.Create<GetUserFileByID>(string.Empty),
                    UrnId.Create<GetUserFileByKey>(string.Empty),
                    UrnId.Create<GetUserFileByName>(string.Empty),
                    UrnId.Create<GetUserFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckUserFileExistsByID>(string.Empty),
                    UrnId.Create<CheckUserFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckUserFileExistsByName>(string.Empty),
                    UrnId.Create<CheckUserFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserFileService : UserFileServiceBase { }
}
