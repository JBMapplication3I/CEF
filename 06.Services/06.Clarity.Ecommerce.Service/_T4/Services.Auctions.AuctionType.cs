// <autogenerated>
// <copyright file="AuctionTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the auction type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of auction types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{AuctionTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionTypes", "GET", Priority = 1,
            Summary = "Use to get a list of auction types")]
    public partial class GetAuctionTypes : TypeSearchModel, IReturn<AuctionTypePagedResults> { }

    /// <summary>A ServiceStack Route to get auction types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.View"),
        PublicAPI,
        Route("/Auctions/AuctionTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all auction types")]
    public partial class GetAuctionTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all auction types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.View"),
        PublicAPI,
        Route("/Auctions/AuctionTypesDigest", "GET",
            Summary = "Use to get a hash representing each auction types")]
    public partial class GetAuctionTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get auction type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific auction type")]
    public partial class GetAuctionTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get auction type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific auction type by the custom key")]
    public partial class GetAuctionTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get auction type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific auction type by the name")]
    public partial class GetAuctionTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get auction type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific auction type by the name")]
    public partial class GetAuctionTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check auction type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.View"),
        PublicAPI,
        Route("/Auctions/AuctionType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.View"),
        PublicAPI,
        Route("/Auctions/AuctionType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.View"),
        PublicAPI,
        Route("/Auctions/AuctionType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.View"),
        PublicAPI,
        Route("/Auctions/AuctionType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create auction type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionType/Create", "POST", Priority = 1,
            Summary = "Use to create a new auction type.")]
    public partial class CreateAuctionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert auction type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/AuctionType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing auction type (as needed).")]
    public partial class UpsertAuctionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update auction type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing auction type.")]
    public partial class UpdateAuctionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate auction type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction type from the system [Soft-Delete]")]
    public partial class DeactivateAuctionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate auction type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Deactivate"),
        PublicAPI,
        Route("/Auctions/AuctionType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction type from the system [Soft-Delete]")]
    public partial class DeactivateAuctionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Reactivate"),
        PublicAPI,
        Route("/Auctions/AuctionType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific auction type from the system [Hard-Delete]")]
    public partial class DeleteAuctionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionType.Delete"),
        PublicAPI,
        Route("/Auctions/AuctionType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific auction type from the system [Hard-Delete]")]
    public partial class DeleteAuctionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear auction type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all auction type calls.")]
    public class ClearAuctionTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AuctionTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAuctionTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, AuctionTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AuctionTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAuctionTypesForConnect request)
        {
            return await Workflows.AuctionTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionTypesDigest request)
        {
            return await Workflows.AuctionTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAuctionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AuctionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AuctionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AuctionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AuctionTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAuctionTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionTypeExistsByID request)
        {
            return await Workflows.AuctionTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionTypeExistsByKey request)
        {
            return await Workflows.AuctionTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionTypeExistsByName request)
        {
            return await Workflows.AuctionTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionTypeExistsByDisplayName request)
        {
            return await Workflows.AuctionTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAuctionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAuctionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAuctionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAuctionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAuctionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAuctionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAuctionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAuctionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAuctionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAuctionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAuctionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAuctionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionTypeDataAsync,
                    () => Workflows.AuctionTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAuctionTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAuctionTypeCache request)
        {
            await ClearCachedAuctionTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAuctionTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAuctionTypes>(string.Empty),
                    UrnId.Create<GetAuctionTypeByID>(string.Empty),
                    UrnId.Create<GetAuctionTypeByKey>(string.Empty),
                    UrnId.Create<GetAuctionTypeByName>(string.Empty),
                    UrnId.Create<CheckAuctionTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckAuctionTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckAuctionTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckAuctionTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AuctionTypeService : AuctionTypeServiceBase { }
}
