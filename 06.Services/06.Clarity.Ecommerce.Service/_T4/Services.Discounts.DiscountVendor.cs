// <autogenerated>
// <copyright file="DiscountVendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount vendors.</summary>
    /// <seealso cref="DiscountVendorSearchModel"/>
    /// <seealso cref="IReturn{DiscountVendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountVendors", "GET", Priority = 1,
            Summary = "Use to get a list of discount vendors")]
    public partial class GetDiscountVendors : DiscountVendorSearchModel, IReturn<DiscountVendorPagedResults> { }

    /// <summary>A ServiceStack Route to get discount vendors for connect.</summary>
    /// <seealso cref="DiscountVendorSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountVendorModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.View"),
        PublicAPI,
        Route("/Discounts/DiscountVendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount vendors")]
    public partial class GetDiscountVendorsForConnect : DiscountVendorSearchModel, IReturn<List<DiscountVendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.View"),
        PublicAPI,
        Route("/Discounts/DiscountVendorsDigest", "GET",
            Summary = "Use to get a hash representing each discount vendors")]
    public partial class GetDiscountVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountVendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountVendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount vendor")]
    public partial class GetDiscountVendorByID : ImplementsIDBase, IReturn<DiscountVendorModel> { }

    /// <summary>A ServiceStack Route to get discount vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountVendorModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountVendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount vendor by the custom key")]
    public partial class GetDiscountVendorByKey : ImplementsKeyBase, IReturn<DiscountVendorModel> { }

    /// <summary>A ServiceStack Route to check discount vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.View"),
        PublicAPI,
        Route("/Discounts/DiscountVendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.View"),
        PublicAPI,
        Route("/Discounts/DiscountVendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount vendor.</summary>
    /// <seealso cref="DiscountVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountVendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount vendor.")]
    public partial class CreateDiscountVendor : DiscountVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount vendor.</summary>
    /// <seealso cref="DiscountVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountVendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount vendor (as needed).")]
    public partial class UpsertDiscountVendor : DiscountVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount vendor.</summary>
    /// <seealso cref="DiscountVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountVendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount vendor.")]
    public partial class UpdateDiscountVendor : DiscountVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountVendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount vendor from the system [Soft-Delete]")]
    public partial class DeactivateDiscountVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountVendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount vendor from the system [Soft-Delete]")]
    public partial class DeactivateDiscountVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountVendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountVendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountVendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount vendor from the system [Hard-Delete]")]
    public partial class DeleteDiscountVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountVendor.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountVendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount vendor from the system [Hard-Delete]")]
    public partial class DeleteDiscountVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountVendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount vendor calls.")]
    public class ClearDiscountVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountVendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountVendorModel, DiscountVendorModel, IDiscountVendorSearchModel, DiscountVendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountVendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountVendorsForConnect request)
        {
            return await Workflows.DiscountVendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountVendorsDigest request)
        {
            return await Workflows.DiscountVendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountVendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountVendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountVendorExistsByID request)
        {
            return await Workflows.DiscountVendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountVendorExistsByKey request)
        {
            return await Workflows.DiscountVendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountVendorDataAsync,
                    () => Workflows.DiscountVendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountVendorCache request)
        {
            await ClearCachedDiscountVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountVendors>(string.Empty),
                    UrnId.Create<GetDiscountVendorByID>(string.Empty),
                    UrnId.Create<GetDiscountVendorByKey>(string.Empty),
                    UrnId.Create<CheckDiscountVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountVendorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountVendorService : DiscountVendorServiceBase { }
}
