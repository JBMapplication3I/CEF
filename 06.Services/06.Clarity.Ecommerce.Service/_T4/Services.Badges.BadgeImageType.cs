// <autogenerated>
// <copyright file="BadgeImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the badge image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of badge image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{BadgeImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of badge image types")]
    public partial class GetBadgeImageTypes : TypeSearchModel, IReturn<BadgeImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get badge image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.View"),
        PublicAPI,
        Route("/Badges/BadgeImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all badge image types")]
    public partial class GetBadgeImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all badge image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.View"),
        PublicAPI,
        Route("/Badges/BadgeImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each badge image types")]
    public partial class GetBadgeImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get badge image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific badge image type")]
    public partial class GetBadgeImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get badge image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific badge image type by the custom key")]
    public partial class GetBadgeImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get badge image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific badge image type by the name")]
    public partial class GetBadgeImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get badge image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific badge image type by the name")]
    public partial class GetBadgeImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check badge image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.View"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.View"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.View"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.View"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create badge image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new badge image type.")]
    public partial class CreateBadgeImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert badge image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Badges/BadgeImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing badge image type (as needed).")]
    public partial class UpsertBadgeImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update badge image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing badge image type.")]
    public partial class UpdateBadgeImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate badge image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge image type from the system [Soft-Delete]")]
    public partial class DeactivateBadgeImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate badge image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Deactivate"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge image type from the system [Soft-Delete]")]
    public partial class DeactivateBadgeImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Reactivate"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific badge image type from the system [Hard-Delete]")]
    public partial class DeleteBadgeImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImageType.Delete"),
        PublicAPI,
        Route("/Badges/BadgeImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific badge image type from the system [Hard-Delete]")]
    public partial class DeleteBadgeImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear badge image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all badge image type calls.")]
    public class ClearBadgeImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BadgeImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBadgeImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, BadgeImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BadgeImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBadgeImageTypesForConnect request)
        {
            return await Workflows.BadgeImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageTypesDigest request)
        {
            return await Workflows.BadgeImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBadgeImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BadgeImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BadgeImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.BadgeImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.BadgeImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBadgeImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageTypeExistsByID request)
        {
            return await Workflows.BadgeImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageTypeExistsByKey request)
        {
            return await Workflows.BadgeImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageTypeExistsByName request)
        {
            return await Workflows.BadgeImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageTypeExistsByDisplayName request)
        {
            return await Workflows.BadgeImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBadgeImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBadgeImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBadgeImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBadgeImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBadgeImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBadgeImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBadgeImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBadgeImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBadgeImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBadgeImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBadgeImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBadgeImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageTypeDataAsync,
                    () => Workflows.BadgeImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBadgeImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBadgeImageTypeCache request)
        {
            await ClearCachedBadgeImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBadgeImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBadgeImageTypes>(string.Empty),
                    UrnId.Create<GetBadgeImageTypeByID>(string.Empty),
                    UrnId.Create<GetBadgeImageTypeByKey>(string.Empty),
                    UrnId.Create<GetBadgeImageTypeByName>(string.Empty),
                    UrnId.Create<CheckBadgeImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckBadgeImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckBadgeImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckBadgeImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BadgeImageTypeService : BadgeImageTypeServiceBase { }
}
