// <autogenerated>
// <copyright file="MessageRecipientService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the message recipient service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of message recipients.</summary>
    /// <seealso cref="MessageRecipientSearchModel"/>
    /// <seealso cref="IReturn{MessageRecipientPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/MessageRecipients", "GET", Priority = 1,
            Summary = "Use to get a list of message recipients")]
    public partial class GetMessageRecipients : MessageRecipientSearchModel, IReturn<MessageRecipientPagedResults> { }

    /// <summary>A ServiceStack Route to get message recipients for connect.</summary>
    /// <seealso cref="MessageRecipientSearchModel"/>
    /// <seealso cref="IReturn{List{MessageRecipientModel}}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.View"),
        PublicAPI,
        Route("/Messaging/MessageRecipientsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all message recipients")]
    public partial class GetMessageRecipientsForConnect : MessageRecipientSearchModel, IReturn<List<MessageRecipientModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all message recipients.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.View"),
        PublicAPI,
        Route("/Messaging/MessageRecipientsDigest", "GET",
            Summary = "Use to get a hash representing each message recipients")]
    public partial class GetMessageRecipientsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get message recipient.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{MessageRecipientModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/MessageRecipient/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific message recipient")]
    public partial class GetMessageRecipientByID : ImplementsIDBase, IReturn<MessageRecipientModel> { }

    /// <summary>A ServiceStack Route to get message recipient.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{MessageRecipientModel}"/>
    [PublicAPI,
        Route("/Messaging/MessageRecipient/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific message recipient by the custom key")]
    public partial class GetMessageRecipientByKey : ImplementsKeyBase, IReturn<MessageRecipientModel> { }

    /// <summary>A ServiceStack Route to check message recipient exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.View"),
        PublicAPI,
        Route("/Messaging/MessageRecipient/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageRecipientExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check message recipient exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.View"),
        PublicAPI,
        Route("/Messaging/MessageRecipient/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageRecipientExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create message recipient.</summary>
    /// <seealso cref="MessageRecipientModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageRecipient/Create", "POST", Priority = 1,
            Summary = "Use to create a new message recipient.")]
    public partial class CreateMessageRecipient : MessageRecipientModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert message recipient.</summary>
    /// <seealso cref="MessageRecipientModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/MessageRecipient/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing message recipient (as needed).")]
    public partial class UpsertMessageRecipient : MessageRecipientModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update message recipient.</summary>
    /// <seealso cref="MessageRecipientModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageRecipient/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing message recipient.")]
    public partial class UpdateMessageRecipient : MessageRecipientModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate message recipient.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageRecipient/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific message recipient from the system [Soft-Delete]")]
    public partial class DeactivateMessageRecipientByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate message recipient by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Deactivate"),
        PublicAPI,
        Route("/Messaging/MessageRecipient/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific message recipient from the system [Soft-Delete]")]
    public partial class DeactivateMessageRecipientByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate message recipient.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageRecipient/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific message recipient from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMessageRecipientByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate message recipient by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Reactivate"),
        PublicAPI,
        Route("/Messaging/MessageRecipient/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific message recipient from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMessageRecipientByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete message recipient.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageRecipient/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific message recipient from the system [Hard-Delete]")]
    public partial class DeleteMessageRecipientByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete message recipient by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageRecipient.Delete"),
        PublicAPI,
        Route("/Messaging/MessageRecipient/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific message recipient from the system [Hard-Delete]")]
    public partial class DeleteMessageRecipientByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear message recipient cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/MessageRecipient/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all message recipient calls.")]
    public class ClearMessageRecipientCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class MessageRecipientServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetMessageRecipients"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageRecipients request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IMessageRecipientModel, MessageRecipientModel, IMessageRecipientSearchModel, MessageRecipientPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.MessageRecipients)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageRecipientsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetMessageRecipientsForConnect request)
        {
            return await Workflows.MessageRecipients.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageRecipientsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageRecipientsDigest request)
        {
            return await Workflows.MessageRecipients.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetMessageRecipientByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageRecipientByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.MessageRecipients, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageRecipientByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageRecipientByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.MessageRecipients, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckMessageRecipientExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageRecipientExistsByID request)
        {
            return await Workflows.MessageRecipients.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMessageRecipientExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageRecipientExistsByKey request)
        {
            return await Workflows.MessageRecipients.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertMessageRecipient"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertMessageRecipient request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateMessageRecipient"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateMessageRecipient request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateMessageRecipient"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateMessageRecipient request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateMessageRecipientByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMessageRecipientByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateMessageRecipientByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMessageRecipientByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateMessageRecipientByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMessageRecipientByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateMessageRecipientByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMessageRecipientByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteMessageRecipientByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMessageRecipientByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteMessageRecipientByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMessageRecipientByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageRecipientDataAsync,
                    () => Workflows.MessageRecipients.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearMessageRecipientCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearMessageRecipientCache request)
        {
            await ClearCachedMessageRecipientDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedMessageRecipientDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetMessageRecipients>(string.Empty),
                    UrnId.Create<GetMessageRecipientByID>(string.Empty),
                    UrnId.Create<GetMessageRecipientByKey>(string.Empty),
                    UrnId.Create<CheckMessageRecipientExistsByID>(string.Empty),
                    UrnId.Create<CheckMessageRecipientExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class MessageRecipientService : MessageRecipientServiceBase { }
}
