// <autogenerated>
// <copyright file="SalesOrderContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order contacts.</summary>
    /// <seealso cref="SalesOrderContactSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderContacts", "GET", Priority = 1,
            Summary = "Use to get a list of sales order contacts")]
    public partial class GetSalesOrderContacts : SalesOrderContactSearchModel, IReturn<SalesOrderContactPagedResults> { }

    /// <summary>A ServiceStack Route to get sales order contacts for connect.</summary>
    /// <seealso cref="SalesOrderContactSearchModel"/>
    /// <seealso cref="IReturn{List{SalesOrderContactModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order contacts")]
    public partial class GetSalesOrderContactsForConnect : SalesOrderContactSearchModel, IReturn<List<SalesOrderContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderContactsDigest", "GET",
            Summary = "Use to get a hash representing each sales order contacts")]
    public partial class GetSalesOrderContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesOrderContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order contact")]
    public partial class GetSalesOrderContactByID : ImplementsIDBase, IReturn<SalesOrderContactModel> { }

    /// <summary>A ServiceStack Route to get sales order contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesOrderContactModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order contact by the custom key")]
    public partial class GetSalesOrderContactByKey : ImplementsKeyBase, IReturn<SalesOrderContactModel> { }

    /// <summary>A ServiceStack Route to check sales order contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order contact.</summary>
    /// <seealso cref="SalesOrderContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order contact.")]
    public partial class CreateSalesOrderContact : SalesOrderContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order contact.</summary>
    /// <seealso cref="SalesOrderContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order contact (as needed).")]
    public partial class UpsertSalesOrderContact : SalesOrderContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order contact.</summary>
    /// <seealso cref="SalesOrderContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order contact.")]
    public partial class UpdateSalesOrderContact : SalesOrderContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order contact from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Deactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order contact from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Reactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order contact from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderContact.Delete"),
        PublicAPI,
        Route("/Ordering/SalesOrderContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order contact from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order contact calls.")]
    public class ClearSalesOrderContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesOrderContactModel, SalesOrderContactModel, ISalesOrderContactSearchModel, SalesOrderContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderContactsForConnect request)
        {
            return await Workflows.SalesOrderContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderContactsDigest request)
        {
            return await Workflows.SalesOrderContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderContactExistsByID request)
        {
            return await Workflows.SalesOrderContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderContactExistsByKey request)
        {
            return await Workflows.SalesOrderContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderContactDataAsync,
                    () => Workflows.SalesOrderContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderContactCache request)
        {
            await ClearCachedSalesOrderContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderContacts>(string.Empty),
                    UrnId.Create<GetSalesOrderContactByID>(string.Empty),
                    UrnId.Create<GetSalesOrderContactByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderContactExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderContactExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderContactService : SalesOrderContactServiceBase { }
}
