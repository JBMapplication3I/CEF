// <autogenerated>
// <copyright file="StoreInventoryLocationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store inventory location service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store inventory locations.</summary>
    /// <seealso cref="StoreInventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{StoreInventoryLocationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreInventoryLocations", "GET", Priority = 1,
            Summary = "Use to get a list of store inventory locations")]
    public partial class GetStoreInventoryLocations : StoreInventoryLocationSearchModel, IReturn<StoreInventoryLocationPagedResults> { }

    /// <summary>A ServiceStack Route to get store inventory locations for connect.</summary>
    /// <seealso cref="StoreInventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{List{StoreInventoryLocationModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store inventory locations")]
    public partial class GetStoreInventoryLocationsForConnect : StoreInventoryLocationSearchModel, IReturn<List<StoreInventoryLocationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store inventory locations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationsDigest", "GET",
            Summary = "Use to get a hash representing each store inventory locations")]
    public partial class GetStoreInventoryLocationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreInventoryLocationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreInventoryLocation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store inventory location")]
    public partial class GetStoreInventoryLocationByID : ImplementsIDBase, IReturn<StoreInventoryLocationModel> { }

    /// <summary>A ServiceStack Route to get store inventory location.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreInventoryLocationModel}"/>
    [PublicAPI,
        Route("/Stores/StoreInventoryLocation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store inventory location by the custom key")]
    public partial class GetStoreInventoryLocationByKey : ImplementsKeyBase, IReturn<StoreInventoryLocationModel> { }

    /// <summary>A ServiceStack Route to check store inventory location exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreInventoryLocationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store inventory location exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreInventoryLocationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store inventory location.</summary>
    /// <seealso cref="StoreInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Create", "POST", Priority = 1,
            Summary = "Use to create a new store inventory location.")]
    public partial class CreateStoreInventoryLocation : StoreInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store inventory location.</summary>
    /// <seealso cref="StoreInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store inventory location (as needed).")]
    public partial class UpsertStoreInventoryLocation : StoreInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store inventory location.</summary>
    /// <seealso cref="StoreInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store inventory location.")]
    public partial class UpdateStoreInventoryLocation : StoreInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store inventory location from the system [Soft-Delete]")]
    public partial class DeactivateStoreInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store inventory location from the system [Soft-Delete]")]
    public partial class DeactivateStoreInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store inventory location from the system [Hard-Delete]")]
    public partial class DeleteStoreInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocation.Delete"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store inventory location from the system [Hard-Delete]")]
    public partial class DeleteStoreInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store inventory location cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreInventoryLocation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store inventory location calls.")]
    public class ClearStoreInventoryLocationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreInventoryLocationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreInventoryLocations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreInventoryLocationModel, StoreInventoryLocationModel, IStoreInventoryLocationSearchModel, StoreInventoryLocationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreInventoryLocations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreInventoryLocationsForConnect request)
        {
            return await Workflows.StoreInventoryLocations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationsDigest request)
        {
            return await Workflows.StoreInventoryLocations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreInventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreInventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreInventoryLocationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreInventoryLocationExistsByID request)
        {
            return await Workflows.StoreInventoryLocations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreInventoryLocationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreInventoryLocationExistsByKey request)
        {
            return await Workflows.StoreInventoryLocations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationDataAsync,
                    () => Workflows.StoreInventoryLocations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreInventoryLocationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreInventoryLocationCache request)
        {
            await ClearCachedStoreInventoryLocationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreInventoryLocationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreInventoryLocations>(string.Empty),
                    UrnId.Create<GetStoreInventoryLocationByID>(string.Empty),
                    UrnId.Create<GetStoreInventoryLocationByKey>(string.Empty),
                    UrnId.Create<CheckStoreInventoryLocationExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreInventoryLocationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreInventoryLocationService : StoreInventoryLocationServiceBase { }
}
