// <autogenerated>
// <copyright file="ProductInventoryLocationSectionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product inventory location section service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product inventory location sections.</summary>
    /// <seealso cref="ProductInventoryLocationSectionSearchModel"/>
    /// <seealso cref="IReturn{ProductInventoryLocationSectionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductInventoryLocationSections", "GET", Priority = 1,
            Summary = "Use to get a list of product inventory location sections")]
    public partial class GetProductInventoryLocationSections : ProductInventoryLocationSectionSearchModel, IReturn<ProductInventoryLocationSectionPagedResults> { }

    /// <summary>A ServiceStack Route to get product inventory location sections for connect.</summary>
    /// <seealso cref="ProductInventoryLocationSectionSearchModel"/>
    /// <seealso cref="IReturn{List{ProductInventoryLocationSectionModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.View"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSectionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product inventory location sections")]
    public partial class GetProductInventoryLocationSectionsForConnect : ProductInventoryLocationSectionSearchModel, IReturn<List<ProductInventoryLocationSectionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product inventory location sections.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.View"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSectionsDigest", "GET",
            Summary = "Use to get a hash representing each product inventory location sections")]
    public partial class GetProductInventoryLocationSectionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductInventoryLocationSectionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductInventoryLocationSection/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product inventory location section")]
    public partial class GetProductInventoryLocationSectionByID : ImplementsIDBase, IReturn<ProductInventoryLocationSectionModel> { }

    /// <summary>A ServiceStack Route to get product inventory location section.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductInventoryLocationSectionModel}"/>
    [PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product inventory location section by the custom key")]
    public partial class GetProductInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<ProductInventoryLocationSectionModel> { }

    /// <summary>A ServiceStack Route to check product inventory location section exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.View"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductInventoryLocationSectionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product inventory location section exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.View"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductInventoryLocationSectionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product inventory location section.</summary>
    /// <seealso cref="ProductInventoryLocationSectionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Create", "POST", Priority = 1,
            Summary = "Use to create a new product inventory location section.")]
    public partial class CreateProductInventoryLocationSection : ProductInventoryLocationSectionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product inventory location section.</summary>
    /// <seealso cref="ProductInventoryLocationSectionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product inventory location section (as needed).")]
    public partial class UpsertProductInventoryLocationSection : ProductInventoryLocationSectionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product inventory location section.</summary>
    /// <seealso cref="ProductInventoryLocationSectionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product inventory location section.")]
    public partial class UpdateProductInventoryLocationSection : ProductInventoryLocationSectionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product inventory location section from the system [Soft-Delete]")]
    public partial class DeactivateProductInventoryLocationSectionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product inventory location section by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Deactivate"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product inventory location section from the system [Soft-Delete]")]
    public partial class DeactivateProductInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product inventory location section from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductInventoryLocationSectionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product inventory location section by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Reactivate"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product inventory location section from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product inventory location section.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product inventory location section from the system [Hard-Delete]")]
    public partial class DeleteProductInventoryLocationSectionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product inventory location section by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductInventoryLocationSection.Delete"),
        PublicAPI,
        Route("/Products/ProductInventoryLocationSection/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product inventory location section from the system [Hard-Delete]")]
    public partial class DeleteProductInventoryLocationSectionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product inventory location section cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductInventoryLocationSection/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product inventory location section calls.")]
    public class ClearProductInventoryLocationSectionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductInventoryLocationSectionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductInventoryLocationSections"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductInventoryLocationSections request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductInventoryLocationSectionModel, ProductInventoryLocationSectionModel, IProductInventoryLocationSectionSearchModel, ProductInventoryLocationSectionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductInventoryLocationSections)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductInventoryLocationSectionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductInventoryLocationSectionsForConnect request)
        {
            return await Workflows.ProductInventoryLocationSections.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductInventoryLocationSectionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductInventoryLocationSectionsDigest request)
        {
            return await Workflows.ProductInventoryLocationSections.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductInventoryLocationSectionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductInventoryLocationSections, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductInventoryLocationSectionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductInventoryLocationSections, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductInventoryLocationSectionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductInventoryLocationSectionExistsByID request)
        {
            return await Workflows.ProductInventoryLocationSections.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductInventoryLocationSectionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductInventoryLocationSectionExistsByKey request)
        {
            return await Workflows.ProductInventoryLocationSections.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductInventoryLocationSection"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductInventoryLocationSection request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductInventoryLocationSection"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductInventoryLocationSection request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductInventoryLocationSection"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductInventoryLocationSection request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductInventoryLocationSectionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductInventoryLocationSectionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductInventoryLocationSectionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductInventoryLocationSectionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductInventoryLocationSectionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductInventoryLocationSectionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductInventoryLocationSectionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductInventoryLocationSectionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductInventoryLocationSectionDataAsync,
                    () => Workflows.ProductInventoryLocationSections.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductInventoryLocationSectionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductInventoryLocationSectionCache request)
        {
            await ClearCachedProductInventoryLocationSectionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductInventoryLocationSectionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductInventoryLocationSections>(string.Empty),
                    UrnId.Create<GetProductInventoryLocationSectionByID>(string.Empty),
                    UrnId.Create<GetProductInventoryLocationSectionByKey>(string.Empty),
                    UrnId.Create<CheckProductInventoryLocationSectionExistsByID>(string.Empty),
                    UrnId.Create<CheckProductInventoryLocationSectionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductInventoryLocationSectionService : ProductInventoryLocationSectionServiceBase { }
}
