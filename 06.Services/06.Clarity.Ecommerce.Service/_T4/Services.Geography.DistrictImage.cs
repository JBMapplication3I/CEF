// <autogenerated>
// <copyright file="DistrictImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the district image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of district images.</summary>
    /// <seealso cref="DistrictImageSearchModel"/>
    /// <seealso cref="IReturn{DistrictImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictImages", "GET", Priority = 1,
            Summary = "Use to get a list of district images")]
    public partial class GetDistrictImages : DistrictImageSearchModel, IReturn<DistrictImagePagedResults> { }

    /// <summary>A ServiceStack Route to get district images for connect.</summary>
    /// <seealso cref="DistrictImageSearchModel"/>
    /// <seealso cref="IReturn{List{DistrictImageModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.View"),
        PublicAPI,
        Route("/Geography/DistrictImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all district images")]
    public partial class GetDistrictImagesForConnect : DistrictImageSearchModel, IReturn<List<DistrictImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all district images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.View"),
        PublicAPI,
        Route("/Geography/DistrictImagesDigest", "GET",
            Summary = "Use to get a hash representing each district images")]
    public partial class GetDistrictImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get district image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DistrictImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific district image")]
    public partial class GetDistrictImageByID : ImplementsIDBase, IReturn<DistrictImageModel> { }

    /// <summary>A ServiceStack Route to get district image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DistrictImageModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific district image by the custom key")]
    public partial class GetDistrictImageByKey : ImplementsKeyBase, IReturn<DistrictImageModel> { }

    /// <summary>A ServiceStack Route to get district image.</summary>
    /// <seealso cref="IReturn{DistrictImageModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific district image by the name")]
    public partial class GetDistrictImageByName : ImplementsNameBase, IReturn<DistrictImageModel> { }

    /// <summary>A ServiceStack Route to check district image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.View"),
        PublicAPI,
        Route("/Geography/DistrictImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.View"),
        PublicAPI,
        Route("/Geography/DistrictImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.View"),
        PublicAPI,
        Route("/Geography/DistrictImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create district image.</summary>
    /// <seealso cref="DistrictImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new district image.")]
    public partial class CreateDistrictImage : DistrictImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert district image.</summary>
    /// <seealso cref="DistrictImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/DistrictImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing district image (as needed).")]
    public partial class UpsertDistrictImage : DistrictImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update district image.</summary>
    /// <seealso cref="DistrictImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing district image.")]
    public partial class UpdateDistrictImage : DistrictImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate district image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district image from the system [Soft-Delete]")]
    public partial class DeactivateDistrictImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate district image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Deactivate"),
        PublicAPI,
        Route("/Geography/DistrictImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district image from the system [Soft-Delete]")]
    public partial class DeactivateDistrictImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Reactivate"),
        PublicAPI,
        Route("/Geography/DistrictImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific district image from the system [Hard-Delete]")]
    public partial class DeleteDistrictImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImage.Delete"),
        PublicAPI,
        Route("/Geography/DistrictImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific district image from the system [Hard-Delete]")]
    public partial class DeleteDistrictImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear district image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all district image calls.")]
    public class ClearDistrictImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DistrictImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDistrictImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDistrictImageModel, DistrictImageModel, IDistrictImageSearchModel, DistrictImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DistrictImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDistrictImagesForConnect request)
        {
            return await Workflows.DistrictImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImagesDigest request)
        {
            return await Workflows.DistrictImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDistrictImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DistrictImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DistrictImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.DistrictImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDistrictImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageExistsByID request)
        {
            return await Workflows.DistrictImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageExistsByKey request)
        {
            return await Workflows.DistrictImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageExistsByName request)
        {
            return await Workflows.DistrictImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDistrictImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDistrictImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDistrictImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDistrictImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDistrictImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDistrictImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDistrictImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDistrictImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDistrictImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDistrictImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDistrictImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDistrictImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageDataAsync,
                    () => Workflows.DistrictImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDistrictImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDistrictImageCache request)
        {
            await ClearCachedDistrictImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDistrictImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDistrictImages>(string.Empty),
                    UrnId.Create<GetDistrictImageByID>(string.Empty),
                    UrnId.Create<GetDistrictImageByKey>(string.Empty),
                    UrnId.Create<GetDistrictImageByName>(string.Empty),
                    UrnId.Create<CheckDistrictImageExistsByID>(string.Empty),
                    UrnId.Create<CheckDistrictImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckDistrictImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DistrictImageService : DistrictImageServiceBase { }
}
