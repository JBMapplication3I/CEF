// <autogenerated>
// <copyright file="DistrictCurrencyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the district currency service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of district currencies.</summary>
    /// <seealso cref="DistrictCurrencySearchModel"/>
    /// <seealso cref="IReturn{DistrictCurrencyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictCurrencies", "GET", Priority = 1,
            Summary = "Use to get a list of district currencies")]
    public partial class GetDistrictCurrencies : DistrictCurrencySearchModel, IReturn<DistrictCurrencyPagedResults> { }

    /// <summary>A ServiceStack Route to get district currencies for connect.</summary>
    /// <seealso cref="DistrictCurrencySearchModel"/>
    /// <seealso cref="IReturn{List{DistrictCurrencyModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.View"),
        PublicAPI,
        Route("/Geography/DistrictCurrenciesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all district currencies")]
    public partial class GetDistrictCurrenciesForConnect : DistrictCurrencySearchModel, IReturn<List<DistrictCurrencyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all district currencies.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.View"),
        PublicAPI,
        Route("/Geography/DistrictCurrenciesDigest", "GET",
            Summary = "Use to get a hash representing each district currencies")]
    public partial class GetDistrictCurrenciesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get district currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DistrictCurrencyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictCurrency/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific district currency")]
    public partial class GetDistrictCurrencyByID : ImplementsIDBase, IReturn<DistrictCurrencyModel> { }

    /// <summary>A ServiceStack Route to get district currency.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DistrictCurrencyModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictCurrency/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific district currency by the custom key")]
    public partial class GetDistrictCurrencyByKey : ImplementsKeyBase, IReturn<DistrictCurrencyModel> { }

    /// <summary>A ServiceStack Route to check district currency exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.View"),
        PublicAPI,
        Route("/Geography/DistrictCurrency/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictCurrencyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district currency exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.View"),
        PublicAPI,
        Route("/Geography/DistrictCurrency/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictCurrencyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create district currency.</summary>
    /// <seealso cref="DistrictCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictCurrency/Create", "POST", Priority = 1,
            Summary = "Use to create a new district currency.")]
    public partial class CreateDistrictCurrency : DistrictCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert district currency.</summary>
    /// <seealso cref="DistrictCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/DistrictCurrency/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing district currency (as needed).")]
    public partial class UpsertDistrictCurrency : DistrictCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update district currency.</summary>
    /// <seealso cref="DistrictCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictCurrency/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing district currency.")]
    public partial class UpdateDistrictCurrency : DistrictCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate district currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictCurrency/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district currency from the system [Soft-Delete]")]
    public partial class DeactivateDistrictCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate district currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Deactivate"),
        PublicAPI,
        Route("/Geography/DistrictCurrency/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district currency from the system [Soft-Delete]")]
    public partial class DeactivateDistrictCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictCurrency/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Reactivate"),
        PublicAPI,
        Route("/Geography/DistrictCurrency/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictCurrency/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific district currency from the system [Hard-Delete]")]
    public partial class DeleteDistrictCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictCurrency.Delete"),
        PublicAPI,
        Route("/Geography/DistrictCurrency/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific district currency from the system [Hard-Delete]")]
    public partial class DeleteDistrictCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear district currency cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictCurrency/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all district currency calls.")]
    public class ClearDistrictCurrencyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DistrictCurrencyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDistrictCurrencies"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictCurrencies request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDistrictCurrencyModel, DistrictCurrencyModel, IDistrictCurrencySearchModel, DistrictCurrencyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DistrictCurrencies)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictCurrenciesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDistrictCurrenciesForConnect request)
        {
            return await Workflows.DistrictCurrencies.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictCurrenciesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictCurrenciesDigest request)
        {
            return await Workflows.DistrictCurrencies.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDistrictCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictCurrencyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DistrictCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictCurrencyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DistrictCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDistrictCurrencyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictCurrencyExistsByID request)
        {
            return await Workflows.DistrictCurrencies.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictCurrencyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictCurrencyExistsByKey request)
        {
            return await Workflows.DistrictCurrencies.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDistrictCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDistrictCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDistrictCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDistrictCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDistrictCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDistrictCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDistrictCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDistrictCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDistrictCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDistrictCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDistrictCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDistrictCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictCurrencyDataAsync,
                    () => Workflows.DistrictCurrencies.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDistrictCurrencyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDistrictCurrencyCache request)
        {
            await ClearCachedDistrictCurrencyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDistrictCurrencyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDistrictCurrencies>(string.Empty),
                    UrnId.Create<GetDistrictCurrencyByID>(string.Empty),
                    UrnId.Create<GetDistrictCurrencyByKey>(string.Empty),
                    UrnId.Create<CheckDistrictCurrencyExistsByID>(string.Empty),
                    UrnId.Create<CheckDistrictCurrencyExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DistrictCurrencyService : DistrictCurrencyServiceBase { }
}
