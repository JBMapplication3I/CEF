// <autogenerated>
// <copyright file="AdImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad images.</summary>
    /// <seealso cref="AdImageSearchModel"/>
    /// <seealso cref="IReturn{AdImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdImages", "GET", Priority = 1,
            Summary = "Use to get a list of ad images")]
    public partial class GetAdImages : AdImageSearchModel, IReturn<AdImagePagedResults> { }

    /// <summary>A ServiceStack Route to get ad images for connect.</summary>
    /// <seealso cref="AdImageSearchModel"/>
    /// <seealso cref="IReturn{List{AdImageModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.View"),
        PublicAPI,
        Route("/Advertising/AdImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad images")]
    public partial class GetAdImagesForConnect : AdImageSearchModel, IReturn<List<AdImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.View"),
        PublicAPI,
        Route("/Advertising/AdImagesDigest", "GET",
            Summary = "Use to get a hash representing each ad images")]
    public partial class GetAdImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad image")]
    public partial class GetAdImageByID : ImplementsIDBase, IReturn<AdImageModel> { }

    /// <summary>A ServiceStack Route to get ad image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdImageModel}"/>
    [PublicAPI,
        Route("/Advertising/AdImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad image by the custom key")]
    public partial class GetAdImageByKey : ImplementsKeyBase, IReturn<AdImageModel> { }

    /// <summary>A ServiceStack Route to get ad image.</summary>
    /// <seealso cref="IReturn{AdImageModel}"/>
    [PublicAPI,
        Route("/Advertising/AdImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific ad image by the name")]
    public partial class GetAdImageByName : ImplementsNameBase, IReturn<AdImageModel> { }

    /// <summary>A ServiceStack Route to check ad image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.View"),
        PublicAPI,
        Route("/Advertising/AdImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.View"),
        PublicAPI,
        Route("/Advertising/AdImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.View"),
        PublicAPI,
        Route("/Advertising/AdImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAdImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad image.</summary>
    /// <seealso cref="AdImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad image.")]
    public partial class CreateAdImage : AdImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad image.</summary>
    /// <seealso cref="AdImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad image (as needed).")]
    public partial class UpsertAdImage : AdImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad image.</summary>
    /// <seealso cref="AdImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad image.")]
    public partial class UpdateAdImage : AdImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad image from the system [Soft-Delete]")]
    public partial class DeactivateAdImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad image from the system [Soft-Delete]")]
    public partial class DeactivateAdImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad image from the system [Hard-Delete]")]
    public partial class DeleteAdImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdImage.Delete"),
        PublicAPI,
        Route("/Advertising/AdImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad image from the system [Hard-Delete]")]
    public partial class DeleteAdImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad image calls.")]
    public class ClearAdImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdImageModel, AdImageModel, IAdImageSearchModel, AdImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdImagesForConnect request)
        {
            return await Workflows.AdImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdImagesDigest request)
        {
            return await Workflows.AdImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AdImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdImageExistsByID request)
        {
            return await Workflows.AdImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdImageExistsByKey request)
        {
            return await Workflows.AdImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdImageExistsByName request)
        {
            return await Workflows.AdImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdImageDataAsync,
                    () => Workflows.AdImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdImageCache request)
        {
            await ClearCachedAdImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdImages>(string.Empty),
                    UrnId.Create<GetAdImageByID>(string.Empty),
                    UrnId.Create<GetAdImageByKey>(string.Empty),
                    UrnId.Create<GetAdImageByName>(string.Empty),
                    UrnId.Create<CheckAdImageExistsByID>(string.Empty),
                    UrnId.Create<CheckAdImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckAdImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdImageService : AdImageServiceBase { }
}
