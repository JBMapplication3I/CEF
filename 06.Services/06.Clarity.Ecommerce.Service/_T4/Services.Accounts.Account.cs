// <autogenerated>
// <copyright file="AccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of accounts.</summary>
    /// <seealso cref="AccountSearchModel"/>
    /// <seealso cref="IReturn{AccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/Accounts", "GET", Priority = 1,
            Summary = "Use to get a list of accounts")]
    public partial class GetAccounts : AccountSearchModel, IReturn<AccountPagedResults> { }

    /// <summary>A ServiceStack Route to get accounts for connect.</summary>
    /// <seealso cref="AccountSearchModel"/>
    /// <seealso cref="IReturn{List{AccountModel}}"/>
    [Authenticate, RequiredPermission("Accounts.Account.View"),
        PublicAPI,
        Route("/Accounts/AccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all accounts")]
    public partial class GetAccountsForConnect : AccountSearchModel, IReturn<List<AccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.Account.View"),
        PublicAPI,
        Route("/Accounts/AccountsDigest", "GET",
            Summary = "Use to get a hash representing each accounts")]
    public partial class GetAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/Account/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account")]
    public partial class GetAccountByID : ImplementsIDBase, IReturn<AccountModel> { }

    /// <summary>A ServiceStack Route to get account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountModel}"/>
    [PublicAPI,
        Route("/Accounts/Account/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account by the custom key")]
    public partial class GetAccountByKey : ImplementsKeyBase, IReturn<AccountModel> { }

    /// <summary>A ServiceStack Route to get account.</summary>
    /// <seealso cref="IReturn{AccountModel}"/>
    [PublicAPI,
        Route("/Accounts/Account/Name", "GET", Priority = 1,
            Summary = "Use to get a specific account by the name")]
    public partial class GetAccountByName : ImplementsNameBase, IReturn<AccountModel> { }

    /// <summary>A ServiceStack Route to check account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.Account.View"),
        PublicAPI,
        Route("/Accounts/Account/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.Account.View"),
        PublicAPI,
        Route("/Accounts/Account/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.Account.View"),
        PublicAPI,
        Route("/Accounts/Account/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account.</summary>
    /// <seealso cref="AccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Account/Create", "POST", Priority = 1,
            Summary = "Use to create a new account.")]
    public partial class CreateAccount : AccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account.</summary>
    /// <seealso cref="AccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/Account/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account (as needed).")]
    public partial class UpsertAccount : AccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account.</summary>
    /// <seealso cref="AccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Account/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account.")]
    public partial class UpdateAccount : AccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Account/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account from the system [Soft-Delete]")]
    public partial class DeactivateAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Deactivate"),
        PublicAPI,
        Route("/Accounts/Account/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account from the system [Soft-Delete]")]
    public partial class DeactivateAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Account/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Reactivate"),
        PublicAPI,
        Route("/Accounts/Account/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Account/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account from the system [Hard-Delete]")]
    public partial class DeleteAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Account.Delete"),
        PublicAPI,
        Route("/Accounts/Account/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account from the system [Hard-Delete]")]
    public partial class DeleteAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/Account/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account calls.")]
    public class ClearAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountModel, AccountModel, IAccountSearchModel, AccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Accounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountsForConnect request)
        {
            return await Workflows.Accounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountsDigest request)
        {
            return await Workflows.Accounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Accounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Accounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Accounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountExistsByID request)
        {
            return await Workflows.Accounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountExistsByKey request)
        {
            return await Workflows.Accounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountExistsByName request)
        {
            return await Workflows.Accounts.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountDataAsync,
                    () => Workflows.Accounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountCache request)
        {
            await ClearCachedAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccounts>(string.Empty),
                    UrnId.Create<GetAccountByID>(string.Empty),
                    UrnId.Create<GetAccountByKey>(string.Empty),
                    UrnId.Create<GetAccountByName>(string.Empty),
                    UrnId.Create<CheckAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountExistsByKey>(string.Empty),
                    UrnId.Create<CheckAccountExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountService : AccountServiceBase { }
}
