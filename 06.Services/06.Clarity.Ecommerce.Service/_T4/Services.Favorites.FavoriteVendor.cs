// <autogenerated>
// <copyright file="FavoriteVendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the favorite vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of favorite vendors.</summary>
    /// <seealso cref="FavoriteVendorSearchModel"/>
    /// <seealso cref="IReturn{FavoriteVendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteVendors", "GET", Priority = 1,
            Summary = "Use to get a list of favorite vendors")]
    public partial class GetFavoriteVendors : FavoriteVendorSearchModel, IReturn<FavoriteVendorPagedResults> { }

    /// <summary>A ServiceStack Route to get favorite vendors for connect.</summary>
    /// <seealso cref="FavoriteVendorSearchModel"/>
    /// <seealso cref="IReturn{List{FavoriteVendorModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.View"),
        PublicAPI,
        Route("/Favorites/FavoriteVendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all favorite vendors")]
    public partial class GetFavoriteVendorsForConnect : FavoriteVendorSearchModel, IReturn<List<FavoriteVendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all favorite vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.View"),
        PublicAPI,
        Route("/Favorites/FavoriteVendorsDigest", "GET",
            Summary = "Use to get a hash representing each favorite vendors")]
    public partial class GetFavoriteVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get favorite vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FavoriteVendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteVendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite vendor")]
    public partial class GetFavoriteVendorByID : ImplementsIDBase, IReturn<FavoriteVendorModel> { }

    /// <summary>A ServiceStack Route to get favorite vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FavoriteVendorModel}"/>
    [PublicAPI,
        Route("/Favorites/FavoriteVendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite vendor by the custom key")]
    public partial class GetFavoriteVendorByKey : ImplementsKeyBase, IReturn<FavoriteVendorModel> { }

    /// <summary>A ServiceStack Route to check favorite vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.View"),
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check favorite vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.View"),
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create favorite vendor.</summary>
    /// <seealso cref="FavoriteVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new favorite vendor.")]
    public partial class CreateFavoriteVendor : FavoriteVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert favorite vendor.</summary>
    /// <seealso cref="FavoriteVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing favorite vendor (as needed).")]
    public partial class UpsertFavoriteVendor : FavoriteVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update favorite vendor.</summary>
    /// <seealso cref="FavoriteVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing favorite vendor.")]
    public partial class UpdateFavoriteVendor : FavoriteVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate favorite vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite vendor from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate favorite vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Deactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite vendor from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Reactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific favorite vendor from the system [Hard-Delete]")]
    public partial class DeleteFavoriteVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteVendor.Delete"),
        PublicAPI,
        Route("/Favorites/FavoriteVendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific favorite vendor from the system [Hard-Delete]")]
    public partial class DeleteFavoriteVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear favorite vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteVendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all favorite vendor calls.")]
    public class ClearFavoriteVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FavoriteVendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFavoriteVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFavoriteVendorModel, FavoriteVendorModel, IFavoriteVendorSearchModel, FavoriteVendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FavoriteVendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFavoriteVendorsForConnect request)
        {
            return await Workflows.FavoriteVendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteVendorsDigest request)
        {
            return await Workflows.FavoriteVendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFavoriteVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FavoriteVendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FavoriteVendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFavoriteVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteVendorExistsByID request)
        {
            return await Workflows.FavoriteVendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFavoriteVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteVendorExistsByKey request)
        {
            return await Workflows.FavoriteVendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFavoriteVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFavoriteVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFavoriteVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFavoriteVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFavoriteVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFavoriteVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFavoriteVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFavoriteVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteVendorDataAsync,
                    () => Workflows.FavoriteVendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFavoriteVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFavoriteVendorCache request)
        {
            await ClearCachedFavoriteVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFavoriteVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFavoriteVendors>(string.Empty),
                    UrnId.Create<GetFavoriteVendorByID>(string.Empty),
                    UrnId.Create<GetFavoriteVendorByKey>(string.Empty),
                    UrnId.Create<CheckFavoriteVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckFavoriteVendorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FavoriteVendorService : FavoriteVendorServiceBase { }
}
