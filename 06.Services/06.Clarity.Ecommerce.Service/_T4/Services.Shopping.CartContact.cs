// <autogenerated>
// <copyright file="CartContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart contacts.</summary>
    /// <seealso cref="CartContactSearchModel"/>
    /// <seealso cref="IReturn{CartContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartContacts", "GET", Priority = 1,
            Summary = "Use to get a list of cart contacts")]
    public partial class GetCartContacts : CartContactSearchModel, IReturn<CartContactPagedResults> { }

    /// <summary>A ServiceStack Route to get cart contacts for connect.</summary>
    /// <seealso cref="CartContactSearchModel"/>
    /// <seealso cref="IReturn{List{CartContactModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.View"),
        PublicAPI,
        Route("/Shopping/CartContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart contacts")]
    public partial class GetCartContactsForConnect : CartContactSearchModel, IReturn<List<CartContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.View"),
        PublicAPI,
        Route("/Shopping/CartContactsDigest", "GET",
            Summary = "Use to get a hash representing each cart contacts")]
    public partial class GetCartContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CartContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart contact")]
    public partial class GetCartContactByID : ImplementsIDBase, IReturn<CartContactModel> { }

    /// <summary>A ServiceStack Route to get cart contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CartContactModel}"/>
    [PublicAPI,
        Route("/Shopping/CartContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart contact by the custom key")]
    public partial class GetCartContactByKey : ImplementsKeyBase, IReturn<CartContactModel> { }

    /// <summary>A ServiceStack Route to check cart contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.View"),
        PublicAPI,
        Route("/Shopping/CartContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.View"),
        PublicAPI,
        Route("/Shopping/CartContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart contact.</summary>
    /// <seealso cref="CartContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart contact.")]
    public partial class CreateCartContact : CartContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart contact.</summary>
    /// <seealso cref="CartContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart contact (as needed).")]
    public partial class UpsertCartContact : CartContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart contact.</summary>
    /// <seealso cref="CartContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart contact.")]
    public partial class UpdateCartContact : CartContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart contact from the system [Soft-Delete]")]
    public partial class DeactivateCartContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart contact from the system [Soft-Delete]")]
    public partial class DeactivateCartContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart contact from the system [Hard-Delete]")]
    public partial class DeleteCartContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartContact.Delete"),
        PublicAPI,
        Route("/Shopping/CartContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart contact from the system [Hard-Delete]")]
    public partial class DeleteCartContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart contact calls.")]
    public class ClearCartContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICartContactModel, CartContactModel, ICartContactSearchModel, CartContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartContactsForConnect request)
        {
            return await Workflows.CartContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartContactsDigest request)
        {
            return await Workflows.CartContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartContactExistsByID request)
        {
            return await Workflows.CartContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartContactExistsByKey request)
        {
            return await Workflows.CartContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartContactDataAsync,
                    () => Workflows.CartContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartContactCache request)
        {
            await ClearCachedCartContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartContacts>(string.Empty),
                    UrnId.Create<GetCartContactByID>(string.Empty),
                    UrnId.Create<GetCartContactByKey>(string.Empty),
                    UrnId.Create<CheckCartContactExistsByID>(string.Empty),
                    UrnId.Create<CheckCartContactExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartContactService : CartContactServiceBase { }
}
