// <autogenerated>
// <copyright file="AppointmentTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the appointment type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of appointment types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{AppointmentTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/AppointmentTypes", "GET", Priority = 1,
            Summary = "Use to get a list of appointment types")]
    public partial class GetAppointmentTypes : TypeSearchModel, IReturn<AppointmentTypePagedResults> { }

    /// <summary>A ServiceStack Route to get appointment types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all appointment types")]
    public partial class GetAppointmentTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all appointment types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentTypesDigest", "GET",
            Summary = "Use to get a hash representing each appointment types")]
    public partial class GetAppointmentTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get appointment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/AppointmentType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific appointment type")]
    public partial class GetAppointmentTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get appointment type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Scheduling/AppointmentType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific appointment type by the custom key")]
    public partial class GetAppointmentTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get appointment type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Scheduling/AppointmentType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific appointment type by the name")]
    public partial class GetAppointmentTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get appointment type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Scheduling/AppointmentType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific appointment type by the name")]
    public partial class GetAppointmentTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check appointment type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create appointment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentType/Create", "POST", Priority = 1,
            Summary = "Use to create a new appointment type.")]
    public partial class CreateAppointmentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert appointment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scheduling/AppointmentType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing appointment type (as needed).")]
    public partial class UpsertAppointmentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update appointment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing appointment type.")]
    public partial class UpdateAppointmentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate appointment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific appointment type from the system [Soft-Delete]")]
    public partial class DeactivateAppointmentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate appointment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Deactivate"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific appointment type from the system [Soft-Delete]")]
    public partial class DeactivateAppointmentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate appointment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific appointment type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppointmentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate appointment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Reactivate"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific appointment type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppointmentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete appointment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific appointment type from the system [Hard-Delete]")]
    public partial class DeleteAppointmentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete appointment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentType.Delete"),
        PublicAPI,
        Route("/Scheduling/AppointmentType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific appointment type from the system [Hard-Delete]")]
    public partial class DeleteAppointmentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear appointment type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/AppointmentType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all appointment type calls.")]
    public class ClearAppointmentTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppointmentTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppointmentTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, AppointmentTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppointmentTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppointmentTypesForConnect request)
        {
            return await Workflows.AppointmentTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentTypesDigest request)
        {
            return await Workflows.AppointmentTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppointmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppointmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppointmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AppointmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AppointmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppointmentTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentTypeExistsByID request)
        {
            return await Workflows.AppointmentTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentTypeExistsByKey request)
        {
            return await Workflows.AppointmentTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentTypeExistsByName request)
        {
            return await Workflows.AppointmentTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentTypeExistsByDisplayName request)
        {
            return await Workflows.AppointmentTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppointmentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppointmentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppointmentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppointmentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppointmentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppointmentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppointmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppointmentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppointmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppointmentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppointmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppointmentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppointmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppointmentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppointmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppointmentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppointmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppointmentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentTypeDataAsync,
                    () => Workflows.AppointmentTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppointmentTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppointmentTypeCache request)
        {
            await ClearCachedAppointmentTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppointmentTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppointmentTypes>(string.Empty),
                    UrnId.Create<GetAppointmentTypeByID>(string.Empty),
                    UrnId.Create<GetAppointmentTypeByKey>(string.Empty),
                    UrnId.Create<GetAppointmentTypeByName>(string.Empty),
                    UrnId.Create<CheckAppointmentTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckAppointmentTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckAppointmentTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckAppointmentTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppointmentTypeService : AppointmentTypeServiceBase { }
}
