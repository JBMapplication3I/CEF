// <autogenerated>
// <copyright file="AuctionCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the auction category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of auction categories.</summary>
    /// <seealso cref="AuctionCategorySearchModel"/>
    /// <seealso cref="IReturn{AuctionCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionCategories", "GET", Priority = 1,
            Summary = "Use to get a list of auction categories")]
    public partial class GetAuctionCategories : AuctionCategorySearchModel, IReturn<AuctionCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get auction categories for connect.</summary>
    /// <seealso cref="AuctionCategorySearchModel"/>
    /// <seealso cref="IReturn{List{AuctionCategoryModel}}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.View"),
        PublicAPI,
        Route("/Auctions/AuctionCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all auction categories")]
    public partial class GetAuctionCategoriesForConnect : AuctionCategorySearchModel, IReturn<List<AuctionCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all auction categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.View"),
        PublicAPI,
        Route("/Auctions/AuctionCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each auction categories")]
    public partial class GetAuctionCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get auction category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AuctionCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific auction category")]
    public partial class GetAuctionCategoryByID : ImplementsIDBase, IReturn<AuctionCategoryModel> { }

    /// <summary>A ServiceStack Route to get auction category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AuctionCategoryModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific auction category by the custom key")]
    public partial class GetAuctionCategoryByKey : ImplementsKeyBase, IReturn<AuctionCategoryModel> { }

    /// <summary>A ServiceStack Route to check auction category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.View"),
        PublicAPI,
        Route("/Auctions/AuctionCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.View"),
        PublicAPI,
        Route("/Auctions/AuctionCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create auction category.</summary>
    /// <seealso cref="AuctionCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new auction category.")]
    public partial class CreateAuctionCategory : AuctionCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert auction category.</summary>
    /// <seealso cref="AuctionCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/AuctionCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing auction category (as needed).")]
    public partial class UpsertAuctionCategory : AuctionCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update auction category.</summary>
    /// <seealso cref="AuctionCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing auction category.")]
    public partial class UpdateAuctionCategory : AuctionCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate auction category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction category from the system [Soft-Delete]")]
    public partial class DeactivateAuctionCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate auction category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Deactivate"),
        PublicAPI,
        Route("/Auctions/AuctionCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction category from the system [Soft-Delete]")]
    public partial class DeactivateAuctionCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Reactivate"),
        PublicAPI,
        Route("/Auctions/AuctionCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific auction category from the system [Hard-Delete]")]
    public partial class DeleteAuctionCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionCategory.Delete"),
        PublicAPI,
        Route("/Auctions/AuctionCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific auction category from the system [Hard-Delete]")]
    public partial class DeleteAuctionCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear auction category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all auction category calls.")]
    public class ClearAuctionCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AuctionCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAuctionCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAuctionCategoryModel, AuctionCategoryModel, IAuctionCategorySearchModel, AuctionCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AuctionCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAuctionCategoriesForConnect request)
        {
            return await Workflows.AuctionCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionCategoriesDigest request)
        {
            return await Workflows.AuctionCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAuctionCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AuctionCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AuctionCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAuctionCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionCategoryExistsByID request)
        {
            return await Workflows.AuctionCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionCategoryExistsByKey request)
        {
            return await Workflows.AuctionCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAuctionCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAuctionCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAuctionCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAuctionCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAuctionCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAuctionCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAuctionCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAuctionCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAuctionCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAuctionCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAuctionCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAuctionCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionCategoryDataAsync,
                    () => Workflows.AuctionCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAuctionCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAuctionCategoryCache request)
        {
            await ClearCachedAuctionCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAuctionCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAuctionCategories>(string.Empty),
                    UrnId.Create<GetAuctionCategoryByID>(string.Empty),
                    UrnId.Create<GetAuctionCategoryByKey>(string.Empty),
                    UrnId.Create<CheckAuctionCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckAuctionCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AuctionCategoryService : AuctionCategoryServiceBase { }
}
