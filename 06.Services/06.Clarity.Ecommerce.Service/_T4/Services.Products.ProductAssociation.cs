// <autogenerated>
// <copyright file="ProductAssociationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product association service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product associations.</summary>
    /// <seealso cref="ProductAssociationSearchModel"/>
    /// <seealso cref="IReturn{ProductAssociationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductAssociations", "GET", Priority = 1,
            Summary = "Use to get a list of product associations")]
    public partial class GetProductAssociations : ProductAssociationSearchModel, IReturn<ProductAssociationPagedResults> { }

    /// <summary>A ServiceStack Route to get product associations for connect.</summary>
    /// <seealso cref="ProductAssociationSearchModel"/>
    /// <seealso cref="IReturn{List{ProductAssociationModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.View"),
        PublicAPI,
        Route("/Products/ProductAssociationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product associations")]
    public partial class GetProductAssociationsForConnect : ProductAssociationSearchModel, IReturn<List<ProductAssociationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product associations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.View"),
        PublicAPI,
        Route("/Products/ProductAssociationsDigest", "GET",
            Summary = "Use to get a hash representing each product associations")]
    public partial class GetProductAssociationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductAssociationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductAssociation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product association")]
    public partial class GetProductAssociationByID : ImplementsIDBase, IReturn<ProductAssociationModel> { }

    /// <summary>A ServiceStack Route to get product association.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductAssociationModel}"/>
    [PublicAPI,
        Route("/Products/ProductAssociation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product association by the custom key")]
    public partial class GetProductAssociationByKey : ImplementsKeyBase, IReturn<ProductAssociationModel> { }

    /// <summary>A ServiceStack Route to check product association exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.View"),
        PublicAPI,
        Route("/Products/ProductAssociation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductAssociationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product association exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.View"),
        PublicAPI,
        Route("/Products/ProductAssociation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductAssociationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product association.</summary>
    /// <seealso cref="ProductAssociationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociation/Create", "POST", Priority = 1,
            Summary = "Use to create a new product association.")]
    public partial class CreateProductAssociation : ProductAssociationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product association.</summary>
    /// <seealso cref="ProductAssociationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductAssociation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product association (as needed).")]
    public partial class UpsertProductAssociation : ProductAssociationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product association.</summary>
    /// <seealso cref="ProductAssociationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product association.")]
    public partial class UpdateProductAssociation : ProductAssociationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product association from the system [Soft-Delete]")]
    public partial class DeactivateProductAssociationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product association by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Deactivate"),
        PublicAPI,
        Route("/Products/ProductAssociation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product association from the system [Soft-Delete]")]
    public partial class DeactivateProductAssociationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product association from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductAssociationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product association by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Reactivate"),
        PublicAPI,
        Route("/Products/ProductAssociation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product association from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductAssociationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductAssociation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product association from the system [Hard-Delete]")]
    public partial class DeleteProductAssociationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product association by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductAssociation.Delete"),
        PublicAPI,
        Route("/Products/ProductAssociation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product association from the system [Hard-Delete]")]
    public partial class DeleteProductAssociationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product association cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductAssociation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product association calls.")]
    public class ClearProductAssociationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductAssociationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductAssociations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductAssociationModel, ProductAssociationModel, IProductAssociationSearchModel, ProductAssociationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductAssociations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductAssociationsForConnect request)
        {
            return await Workflows.ProductAssociations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationsDigest request)
        {
            return await Workflows.ProductAssociations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductAssociations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductAssociationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductAssociations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductAssociationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductAssociationExistsByID request)
        {
            return await Workflows.ProductAssociations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductAssociationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductAssociationExistsByKey request)
        {
            return await Workflows.ProductAssociations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductAssociation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductAssociation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductAssociation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductAssociation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductAssociation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductAssociation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductAssociationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductAssociationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductAssociationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductAssociationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductAssociationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductAssociationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductAssociationDataAsync,
                    () => Workflows.ProductAssociations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductAssociationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductAssociationCache request)
        {
            await ClearCachedProductAssociationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductAssociationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductAssociations>(string.Empty),
                    UrnId.Create<GetProductAssociationByID>(string.Empty),
                    UrnId.Create<GetProductAssociationByKey>(string.Empty),
                    UrnId.Create<CheckProductAssociationExistsByID>(string.Empty),
                    UrnId.Create<CheckProductAssociationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductAssociationService : ProductAssociationServiceBase { }
}
