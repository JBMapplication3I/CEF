// <autogenerated>
// <copyright file="ReferralCodeTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the referral code type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of referral code types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ReferralCodeTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodeTypes", "GET", Priority = 1,
            Summary = "Use to get a list of referral code types")]
    public partial class GetReferralCodeTypes : TypeSearchModel, IReturn<ReferralCodeTypePagedResults> { }

    /// <summary>A ServiceStack Route to get referral code types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all referral code types")]
    public partial class GetReferralCodeTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all referral code types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeTypesDigest", "GET",
            Summary = "Use to get a hash representing each referral code types")]
    public partial class GetReferralCodeTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get referral code type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodeType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific referral code type")]
    public partial class GetReferralCodeTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get referral code type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCodeType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific referral code type by the custom key")]
    public partial class GetReferralCodeTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get referral code type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCodeType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific referral code type by the name")]
    public partial class GetReferralCodeTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get referral code type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCodeType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific referral code type by the name")]
    public partial class GetReferralCodeTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check referral code type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create referral code type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Create", "POST", Priority = 1,
            Summary = "Use to create a new referral code type.")]
    public partial class CreateReferralCodeType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert referral code type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing referral code type (as needed).")]
    public partial class UpsertReferralCodeType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update referral code type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing referral code type.")]
    public partial class UpdateReferralCodeType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate referral code type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific referral code type from the system [Soft-Delete]")]
    public partial class DeactivateReferralCodeTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate referral code type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Deactivate"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific referral code type from the system [Soft-Delete]")]
    public partial class DeactivateReferralCodeTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate referral code type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific referral code type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReferralCodeTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate referral code type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Reactivate"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific referral code type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReferralCodeTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete referral code type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific referral code type from the system [Hard-Delete]")]
    public partial class DeleteReferralCodeTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete referral code type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeType.Delete"),
        PublicAPI,
        Route("/Contacts/ReferralCodeType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific referral code type from the system [Hard-Delete]")]
    public partial class DeleteReferralCodeTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear referral code type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodeType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all referral code type calls.")]
    public class ClearReferralCodeTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ReferralCodeTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetReferralCodeTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ReferralCodeTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ReferralCodeTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetReferralCodeTypesForConnect request)
        {
            return await Workflows.ReferralCodeTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeTypesDigest request)
        {
            return await Workflows.ReferralCodeTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetReferralCodeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ReferralCodeTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ReferralCodeTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ReferralCodeTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ReferralCodeTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckReferralCodeTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeTypeExistsByID request)
        {
            return await Workflows.ReferralCodeTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeTypeExistsByKey request)
        {
            return await Workflows.ReferralCodeTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeTypeExistsByName request)
        {
            return await Workflows.ReferralCodeTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeTypeExistsByDisplayName request)
        {
            return await Workflows.ReferralCodeTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertReferralCodeType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertReferralCodeType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateReferralCodeType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateReferralCodeType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateReferralCodeType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateReferralCodeType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateReferralCodeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReferralCodeTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateReferralCodeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReferralCodeTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateReferralCodeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReferralCodeTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateReferralCodeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReferralCodeTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteReferralCodeTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReferralCodeTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteReferralCodeTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReferralCodeTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeTypeDataAsync,
                    () => Workflows.ReferralCodeTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearReferralCodeTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearReferralCodeTypeCache request)
        {
            await ClearCachedReferralCodeTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedReferralCodeTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetReferralCodeTypes>(string.Empty),
                    UrnId.Create<GetReferralCodeTypeByID>(string.Empty),
                    UrnId.Create<GetReferralCodeTypeByKey>(string.Empty),
                    UrnId.Create<GetReferralCodeTypeByName>(string.Empty),
                    UrnId.Create<CheckReferralCodeTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckReferralCodeTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckReferralCodeTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckReferralCodeTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ReferralCodeTypeService : ReferralCodeTypeServiceBase { }
}
