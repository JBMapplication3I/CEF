// <autogenerated>
// <copyright file="InventoryLocationUserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the inventory location user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of inventory location users.</summary>
    /// <seealso cref="InventoryLocationUserSearchModel"/>
    /// <seealso cref="IReturn{InventoryLocationUserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationUsers", "GET", Priority = 1,
            Summary = "Use to get a list of inventory location users")]
    public partial class GetInventoryLocationUsers : InventoryLocationUserSearchModel, IReturn<InventoryLocationUserPagedResults> { }

    /// <summary>A ServiceStack Route to get inventory location users for connect.</summary>
    /// <seealso cref="InventoryLocationUserSearchModel"/>
    /// <seealso cref="IReturn{List{InventoryLocationUserModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all inventory location users")]
    public partial class GetInventoryLocationUsersForConnect : InventoryLocationUserSearchModel, IReturn<List<InventoryLocationUserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all inventory location users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUsersDigest", "GET",
            Summary = "Use to get a hash representing each inventory location users")]
    public partial class GetInventoryLocationUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get inventory location user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{InventoryLocationUserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationUser/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location user")]
    public partial class GetInventoryLocationUserByID : ImplementsIDBase, IReturn<InventoryLocationUserModel> { }

    /// <summary>A ServiceStack Route to get inventory location user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{InventoryLocationUserModel}"/>
    [PublicAPI,
        Route("/Inventory/InventoryLocationUser/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location user by the custom key")]
    public partial class GetInventoryLocationUserByKey : ImplementsKeyBase, IReturn<InventoryLocationUserModel> { }

    /// <summary>A ServiceStack Route to check inventory location user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check inventory location user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create inventory location user.</summary>
    /// <seealso cref="InventoryLocationUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Create", "POST", Priority = 1,
            Summary = "Use to create a new inventory location user.")]
    public partial class CreateInventoryLocationUser : InventoryLocationUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert inventory location user.</summary>
    /// <seealso cref="InventoryLocationUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing inventory location user (as needed).")]
    public partial class UpsertInventoryLocationUser : InventoryLocationUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update inventory location user.</summary>
    /// <seealso cref="InventoryLocationUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing inventory location user.")]
    public partial class UpdateInventoryLocationUser : InventoryLocationUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate inventory location user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location user from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate inventory location user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Deactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location user from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Reactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific inventory location user from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationUser.Delete"),
        PublicAPI,
        Route("/Inventory/InventoryLocationUser/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific inventory location user from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear inventory location user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationUser/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all inventory location user calls.")]
    public class ClearInventoryLocationUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class InventoryLocationUserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetInventoryLocationUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IInventoryLocationUserModel, InventoryLocationUserModel, IInventoryLocationUserSearchModel, InventoryLocationUserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.InventoryLocationUsers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetInventoryLocationUsersForConnect request)
        {
            return await Workflows.InventoryLocationUsers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationUsersDigest request)
        {
            return await Workflows.InventoryLocationUsers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetInventoryLocationUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.InventoryLocationUsers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.InventoryLocationUsers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckInventoryLocationUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationUserExistsByID request)
        {
            return await Workflows.InventoryLocationUsers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckInventoryLocationUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationUserExistsByKey request)
        {
            return await Workflows.InventoryLocationUsers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertInventoryLocationUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertInventoryLocationUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateInventoryLocationUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateInventoryLocationUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateInventoryLocationUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateInventoryLocationUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationUserDataAsync,
                    () => Workflows.InventoryLocationUsers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearInventoryLocationUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearInventoryLocationUserCache request)
        {
            await ClearCachedInventoryLocationUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedInventoryLocationUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetInventoryLocationUsers>(string.Empty),
                    UrnId.Create<GetInventoryLocationUserByID>(string.Empty),
                    UrnId.Create<GetInventoryLocationUserByKey>(string.Empty),
                    UrnId.Create<CheckInventoryLocationUserExistsByID>(string.Empty),
                    UrnId.Create<CheckInventoryLocationUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class InventoryLocationUserService : InventoryLocationUserServiceBase { }
}
