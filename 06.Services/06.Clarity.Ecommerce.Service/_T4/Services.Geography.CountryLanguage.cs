// <autogenerated>
// <copyright file="CountryLanguageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the country language service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of country languages.</summary>
    /// <seealso cref="CountryLanguageSearchModel"/>
    /// <seealso cref="IReturn{CountryLanguagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryLanguages", "GET", Priority = 1,
            Summary = "Use to get a list of country languages")]
    public partial class GetCountryLanguages : CountryLanguageSearchModel, IReturn<CountryLanguagePagedResults> { }

    /// <summary>A ServiceStack Route to get country languages for connect.</summary>
    /// <seealso cref="CountryLanguageSearchModel"/>
    /// <seealso cref="IReturn{List{CountryLanguageModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.View"),
        PublicAPI,
        Route("/Geography/CountryLanguagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all country languages")]
    public partial class GetCountryLanguagesForConnect : CountryLanguageSearchModel, IReturn<List<CountryLanguageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all country languages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.View"),
        PublicAPI,
        Route("/Geography/CountryLanguagesDigest", "GET",
            Summary = "Use to get a hash representing each country languages")]
    public partial class GetCountryLanguagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get country language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CountryLanguageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryLanguage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific country language")]
    public partial class GetCountryLanguageByID : ImplementsIDBase, IReturn<CountryLanguageModel> { }

    /// <summary>A ServiceStack Route to get country language.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CountryLanguageModel}"/>
    [PublicAPI,
        Route("/Geography/CountryLanguage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific country language by the custom key")]
    public partial class GetCountryLanguageByKey : ImplementsKeyBase, IReturn<CountryLanguageModel> { }

    /// <summary>A ServiceStack Route to check country language exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.View"),
        PublicAPI,
        Route("/Geography/CountryLanguage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryLanguageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country language exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.View"),
        PublicAPI,
        Route("/Geography/CountryLanguage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryLanguageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create country language.</summary>
    /// <seealso cref="CountryLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryLanguage/Create", "POST", Priority = 1,
            Summary = "Use to create a new country language.")]
    public partial class CreateCountryLanguage : CountryLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert country language.</summary>
    /// <seealso cref="CountryLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/CountryLanguage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing country language (as needed).")]
    public partial class UpsertCountryLanguage : CountryLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update country language.</summary>
    /// <seealso cref="CountryLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryLanguage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing country language.")]
    public partial class UpdateCountryLanguage : CountryLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate country language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryLanguage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country language from the system [Soft-Delete]")]
    public partial class DeactivateCountryLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate country language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Deactivate"),
        PublicAPI,
        Route("/Geography/CountryLanguage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country language from the system [Soft-Delete]")]
    public partial class DeactivateCountryLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryLanguage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Reactivate"),
        PublicAPI,
        Route("/Geography/CountryLanguage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryLanguage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific country language from the system [Hard-Delete]")]
    public partial class DeleteCountryLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryLanguage.Delete"),
        PublicAPI,
        Route("/Geography/CountryLanguage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific country language from the system [Hard-Delete]")]
    public partial class DeleteCountryLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear country language cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryLanguage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all country language calls.")]
    public class ClearCountryLanguageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CountryLanguageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCountryLanguages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryLanguages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICountryLanguageModel, CountryLanguageModel, ICountryLanguageSearchModel, CountryLanguagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CountryLanguages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryLanguagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCountryLanguagesForConnect request)
        {
            return await Workflows.CountryLanguages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryLanguagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryLanguagesDigest request)
        {
            return await Workflows.CountryLanguages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCountryLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryLanguageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CountryLanguages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryLanguageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CountryLanguages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCountryLanguageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryLanguageExistsByID request)
        {
            return await Workflows.CountryLanguages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryLanguageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryLanguageExistsByKey request)
        {
            return await Workflows.CountryLanguages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCountryLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCountryLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCountryLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCountryLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCountryLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCountryLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCountryLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCountryLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCountryLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCountryLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCountryLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCountryLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryLanguageDataAsync,
                    () => Workflows.CountryLanguages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCountryLanguageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCountryLanguageCache request)
        {
            await ClearCachedCountryLanguageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCountryLanguageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCountryLanguages>(string.Empty),
                    UrnId.Create<GetCountryLanguageByID>(string.Empty),
                    UrnId.Create<GetCountryLanguageByKey>(string.Empty),
                    UrnId.Create<CheckCountryLanguageExistsByID>(string.Empty),
                    UrnId.Create<CheckCountryLanguageExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CountryLanguageService : CountryLanguageServiceBase { }
}
