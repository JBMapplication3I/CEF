// <autogenerated>
// <copyright file="AuctionStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the auction status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of auction statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{AuctionStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of auction statuses")]
    public partial class GetAuctionStatuses : StatusSearchModel, IReturn<AuctionStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get auction statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.View"),
        PublicAPI,
        Route("/Auctions/AuctionStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all auction statuses")]
    public partial class GetAuctionStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all auction statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.View"),
        PublicAPI,
        Route("/Auctions/AuctionStatusesDigest", "GET",
            Summary = "Use to get a hash representing each auction statuses")]
    public partial class GetAuctionStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get auction status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific auction status")]
    public partial class GetAuctionStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get auction status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific auction status by the custom key")]
    public partial class GetAuctionStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get auction status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific auction status by the name")]
    public partial class GetAuctionStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get auction status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Auctions/AuctionStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific auction status by the name")]
    public partial class GetAuctionStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check auction status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.View"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.View"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.View"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.View"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create auction status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new auction status.")]
    public partial class CreateAuctionStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert auction status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/AuctionStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing auction status (as needed).")]
    public partial class UpsertAuctionStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update auction status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing auction status.")]
    public partial class UpdateAuctionStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate auction status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction status from the system [Soft-Delete]")]
    public partial class DeactivateAuctionStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate auction status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Deactivate"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction status from the system [Soft-Delete]")]
    public partial class DeactivateAuctionStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Reactivate"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/AuctionStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific auction status from the system [Hard-Delete]")]
    public partial class DeleteAuctionStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.AuctionStatus.Delete"),
        PublicAPI,
        Route("/Auctions/AuctionStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific auction status from the system [Hard-Delete]")]
    public partial class DeleteAuctionStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear auction status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/AuctionStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all auction status calls.")]
    public class ClearAuctionStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AuctionStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAuctionStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, AuctionStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AuctionStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAuctionStatusesForConnect request)
        {
            return await Workflows.AuctionStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionStatusesDigest request)
        {
            return await Workflows.AuctionStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAuctionStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AuctionStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AuctionStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AuctionStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AuctionStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAuctionStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionStatusExistsByID request)
        {
            return await Workflows.AuctionStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionStatusExistsByKey request)
        {
            return await Workflows.AuctionStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionStatusExistsByName request)
        {
            return await Workflows.AuctionStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionStatusExistsByDisplayName request)
        {
            return await Workflows.AuctionStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAuctionStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAuctionStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAuctionStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAuctionStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAuctionStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAuctionStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAuctionStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAuctionStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAuctionStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAuctionStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAuctionStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAuctionStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionStatusDataAsync,
                    () => Workflows.AuctionStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAuctionStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAuctionStatusCache request)
        {
            await ClearCachedAuctionStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAuctionStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAuctionStatuses>(string.Empty),
                    UrnId.Create<GetAuctionStatusByID>(string.Empty),
                    UrnId.Create<GetAuctionStatusByKey>(string.Empty),
                    UrnId.Create<GetAuctionStatusByName>(string.Empty),
                    UrnId.Create<CheckAuctionStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckAuctionStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckAuctionStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckAuctionStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AuctionStatusService : AuctionStatusServiceBase { }
}
