// <autogenerated>
// <copyright file="AdAccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad accounts.</summary>
    /// <seealso cref="AdAccountSearchModel"/>
    /// <seealso cref="IReturn{AdAccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdAccounts", "GET", Priority = 1,
            Summary = "Use to get a list of ad accounts")]
    public partial class GetAdAccounts : AdAccountSearchModel, IReturn<AdAccountPagedResults> { }

    /// <summary>A ServiceStack Route to get ad accounts for connect.</summary>
    /// <seealso cref="AdAccountSearchModel"/>
    /// <seealso cref="IReturn{List{AdAccountModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.View"),
        PublicAPI,
        Route("/Advertising/AdAccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad accounts")]
    public partial class GetAdAccountsForConnect : AdAccountSearchModel, IReturn<List<AdAccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.View"),
        PublicAPI,
        Route("/Advertising/AdAccountsDigest", "GET",
            Summary = "Use to get a hash representing each ad accounts")]
    public partial class GetAdAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdAccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdAccount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad account")]
    public partial class GetAdAccountByID : ImplementsIDBase, IReturn<AdAccountModel> { }

    /// <summary>A ServiceStack Route to get ad account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdAccountModel}"/>
    [PublicAPI,
        Route("/Advertising/AdAccount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad account by the custom key")]
    public partial class GetAdAccountByKey : ImplementsKeyBase, IReturn<AdAccountModel> { }

    /// <summary>A ServiceStack Route to check ad account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.View"),
        PublicAPI,
        Route("/Advertising/AdAccount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.View"),
        PublicAPI,
        Route("/Advertising/AdAccount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad account.</summary>
    /// <seealso cref="AdAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdAccount/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad account.")]
    public partial class CreateAdAccount : AdAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad account.</summary>
    /// <seealso cref="AdAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdAccount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad account (as needed).")]
    public partial class UpsertAdAccount : AdAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad account.</summary>
    /// <seealso cref="AdAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdAccount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad account.")]
    public partial class UpdateAdAccount : AdAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdAccount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad account from the system [Soft-Delete]")]
    public partial class DeactivateAdAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdAccount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad account from the system [Soft-Delete]")]
    public partial class DeactivateAdAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdAccount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdAccount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdAccount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad account from the system [Hard-Delete]")]
    public partial class DeleteAdAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdAccount.Delete"),
        PublicAPI,
        Route("/Advertising/AdAccount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad account from the system [Hard-Delete]")]
    public partial class DeleteAdAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdAccount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad account calls.")]
    public class ClearAdAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdAccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdAccountModel, AdAccountModel, IAdAccountSearchModel, AdAccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdAccounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdAccountsForConnect request)
        {
            return await Workflows.AdAccounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdAccountsDigest request)
        {
            return await Workflows.AdAccounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdAccounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdAccounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdAccountExistsByID request)
        {
            return await Workflows.AdAccounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdAccountExistsByKey request)
        {
            return await Workflows.AdAccounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdAccountDataAsync,
                    () => Workflows.AdAccounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdAccountCache request)
        {
            await ClearCachedAdAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdAccounts>(string.Empty),
                    UrnId.Create<GetAdAccountByID>(string.Empty),
                    UrnId.Create<GetAdAccountByKey>(string.Empty),
                    UrnId.Create<CheckAdAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckAdAccountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdAccountService : AdAccountServiceBase { }
}
