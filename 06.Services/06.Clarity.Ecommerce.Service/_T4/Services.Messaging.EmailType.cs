// <autogenerated>
// <copyright file="EmailTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the email type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of email types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{EmailTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailTypes", "GET", Priority = 1,
            Summary = "Use to get a list of email types")]
    public partial class GetEmailTypes : TypeSearchModel, IReturn<EmailTypePagedResults> { }

    /// <summary>A ServiceStack Route to get email types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.View"),
        PublicAPI,
        Route("/Messaging/EmailTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all email types")]
    public partial class GetEmailTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all email types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.View"),
        PublicAPI,
        Route("/Messaging/EmailTypesDigest", "GET",
            Summary = "Use to get a hash representing each email types")]
    public partial class GetEmailTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get email type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific email type")]
    public partial class GetEmailTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get email type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific email type by the custom key")]
    public partial class GetEmailTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get email type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific email type by the name")]
    public partial class GetEmailTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get email type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific email type by the name")]
    public partial class GetEmailTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check email type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.View"),
        PublicAPI,
        Route("/Messaging/EmailType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.View"),
        PublicAPI,
        Route("/Messaging/EmailType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.View"),
        PublicAPI,
        Route("/Messaging/EmailType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.View"),
        PublicAPI,
        Route("/Messaging/EmailType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create email type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailType/Create", "POST", Priority = 1,
            Summary = "Use to create a new email type.")]
    public partial class CreateEmailType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert email type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/EmailType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing email type (as needed).")]
    public partial class UpsertEmailType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update email type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing email type.")]
    public partial class UpdateEmailType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate email type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email type from the system [Soft-Delete]")]
    public partial class DeactivateEmailTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate email type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Deactivate"),
        PublicAPI,
        Route("/Messaging/EmailType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email type from the system [Soft-Delete]")]
    public partial class DeactivateEmailTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Reactivate"),
        PublicAPI,
        Route("/Messaging/EmailType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific email type from the system [Hard-Delete]")]
    public partial class DeleteEmailTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailType.Delete"),
        PublicAPI,
        Route("/Messaging/EmailType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific email type from the system [Hard-Delete]")]
    public partial class DeleteEmailTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear email type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all email type calls.")]
    public class ClearEmailTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EmailTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEmailTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, EmailTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.EmailTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEmailTypesForConnect request)
        {
            return await Workflows.EmailTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTypesDigest request)
        {
            return await Workflows.EmailTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEmailTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.EmailTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.EmailTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.EmailTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.EmailTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEmailTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTypeExistsByID request)
        {
            return await Workflows.EmailTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTypeExistsByKey request)
        {
            return await Workflows.EmailTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTypeExistsByName request)
        {
            return await Workflows.EmailTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTypeExistsByDisplayName request)
        {
            return await Workflows.EmailTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEmailType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEmailType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEmailType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEmailType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEmailType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEmailType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEmailTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEmailTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEmailTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEmailTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEmailTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEmailTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTypeDataAsync,
                    () => Workflows.EmailTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEmailTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEmailTypeCache request)
        {
            await ClearCachedEmailTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEmailTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEmailTypes>(string.Empty),
                    UrnId.Create<GetEmailTypeByID>(string.Empty),
                    UrnId.Create<GetEmailTypeByKey>(string.Empty),
                    UrnId.Create<GetEmailTypeByName>(string.Empty),
                    UrnId.Create<CheckEmailTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckEmailTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckEmailTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckEmailTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EmailTypeService : EmailTypeServiceBase { }
}
