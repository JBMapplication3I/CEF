// <autogenerated>
// <copyright file="UserOnlineStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user online status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user online statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{UserOnlineStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserOnlineStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of user online statuses")]
    public partial class GetUserOnlineStatuses : StatusSearchModel, IReturn<UserOnlineStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get user online statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.View"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user online statuses")]
    public partial class GetUserOnlineStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user online statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.View"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatusesDigest", "GET",
            Summary = "Use to get a hash representing each user online statuses")]
    public partial class GetUserOnlineStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user online status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserOnlineStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user online status")]
    public partial class GetUserOnlineStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get user online status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Contacts/UserOnlineStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user online status by the custom key")]
    public partial class GetUserOnlineStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get user online status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Contacts/UserOnlineStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific user online status by the name")]
    public partial class GetUserOnlineStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get user online status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Contacts/UserOnlineStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific user online status by the name")]
    public partial class GetUserOnlineStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check user online status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.View"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserOnlineStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user online status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.View"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserOnlineStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user online status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.View"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserOnlineStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user online status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.View"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserOnlineStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user online status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new user online status.")]
    public partial class CreateUserOnlineStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user online status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user online status (as needed).")]
    public partial class UpsertUserOnlineStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user online status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user online status.")]
    public partial class UpdateUserOnlineStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user online status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user online status from the system [Soft-Delete]")]
    public partial class DeactivateUserOnlineStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user online status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Deactivate"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user online status from the system [Soft-Delete]")]
    public partial class DeactivateUserOnlineStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user online status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user online status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserOnlineStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user online status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Reactivate"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user online status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserOnlineStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user online status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user online status from the system [Hard-Delete]")]
    public partial class DeleteUserOnlineStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user online status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserOnlineStatus.Delete"),
        PublicAPI,
        Route("/Contacts/UserOnlineStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user online status from the system [Hard-Delete]")]
    public partial class DeleteUserOnlineStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user online status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserOnlineStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user online status calls.")]
    public class ClearUserOnlineStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserOnlineStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserOnlineStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserOnlineStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, UserOnlineStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserOnlineStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserOnlineStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserOnlineStatusesForConnect request)
        {
            return await Workflows.UserOnlineStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserOnlineStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserOnlineStatusesDigest request)
        {
            return await Workflows.UserOnlineStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserOnlineStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserOnlineStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserOnlineStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserOnlineStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserOnlineStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserOnlineStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserOnlineStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserOnlineStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.UserOnlineStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserOnlineStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserOnlineStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.UserOnlineStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserOnlineStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserOnlineStatusExistsByID request)
        {
            return await Workflows.UserOnlineStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserOnlineStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserOnlineStatusExistsByKey request)
        {
            return await Workflows.UserOnlineStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserOnlineStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserOnlineStatusExistsByName request)
        {
            return await Workflows.UserOnlineStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserOnlineStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserOnlineStatusExistsByDisplayName request)
        {
            return await Workflows.UserOnlineStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserOnlineStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserOnlineStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserOnlineStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserOnlineStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserOnlineStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserOnlineStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserOnlineStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserOnlineStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserOnlineStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserOnlineStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserOnlineStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserOnlineStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserOnlineStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserOnlineStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserOnlineStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserOnlineStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserOnlineStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserOnlineStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserOnlineStatusDataAsync,
                    () => Workflows.UserOnlineStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserOnlineStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserOnlineStatusCache request)
        {
            await ClearCachedUserOnlineStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserOnlineStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserOnlineStatuses>(string.Empty),
                    UrnId.Create<GetUserOnlineStatusByID>(string.Empty),
                    UrnId.Create<GetUserOnlineStatusByKey>(string.Empty),
                    UrnId.Create<GetUserOnlineStatusByName>(string.Empty),
                    UrnId.Create<CheckUserOnlineStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckUserOnlineStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckUserOnlineStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckUserOnlineStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserOnlineStatusService : UserOnlineStatusServiceBase { }
}
