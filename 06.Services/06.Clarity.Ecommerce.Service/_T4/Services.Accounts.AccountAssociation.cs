// <autogenerated>
// <copyright file="AccountAssociationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account association service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account associations.</summary>
    /// <seealso cref="AccountAssociationSearchModel"/>
    /// <seealso cref="IReturn{AccountAssociationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountAssociations", "GET", Priority = 1,
            Summary = "Use to get a list of account associations")]
    public partial class GetAccountAssociations : AccountAssociationSearchModel, IReturn<AccountAssociationPagedResults> { }

    /// <summary>A ServiceStack Route to get account associations for connect.</summary>
    /// <seealso cref="AccountAssociationSearchModel"/>
    /// <seealso cref="IReturn{List{AccountAssociationModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account associations")]
    public partial class GetAccountAssociationsForConnect : AccountAssociationSearchModel, IReturn<List<AccountAssociationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account associations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationsDigest", "GET",
            Summary = "Use to get a hash representing each account associations")]
    public partial class GetAccountAssociationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountAssociationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountAssociation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account association")]
    public partial class GetAccountAssociationByID : ImplementsIDBase, IReturn<AccountAssociationModel> { }

    /// <summary>A ServiceStack Route to get account association.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountAssociationModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountAssociation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account association by the custom key")]
    public partial class GetAccountAssociationByKey : ImplementsKeyBase, IReturn<AccountAssociationModel> { }

    /// <summary>A ServiceStack Route to check account association exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountAssociationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account association exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountAssociationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account association.</summary>
    /// <seealso cref="AccountAssociationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociation/Create", "POST", Priority = 1,
            Summary = "Use to create a new account association.")]
    public partial class CreateAccountAssociation : AccountAssociationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account association.</summary>
    /// <seealso cref="AccountAssociationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountAssociation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account association (as needed).")]
    public partial class UpsertAccountAssociation : AccountAssociationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account association.</summary>
    /// <seealso cref="AccountAssociationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account association.")]
    public partial class UpdateAccountAssociation : AccountAssociationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account association from the system [Soft-Delete]")]
    public partial class DeactivateAccountAssociationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account association by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountAssociation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account association from the system [Soft-Delete]")]
    public partial class DeactivateAccountAssociationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account association from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountAssociationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account association by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountAssociation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account association from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountAssociationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account association.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account association from the system [Hard-Delete]")]
    public partial class DeleteAccountAssociationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account association by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociation.Delete"),
        PublicAPI,
        Route("/Accounts/AccountAssociation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account association from the system [Hard-Delete]")]
    public partial class DeleteAccountAssociationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account association cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountAssociation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account association calls.")]
    public class ClearAccountAssociationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountAssociationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountAssociations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountAssociationModel, AccountAssociationModel, IAccountAssociationSearchModel, AccountAssociationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountAssociations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountAssociationsForConnect request)
        {
            return await Workflows.AccountAssociations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationsDigest request)
        {
            return await Workflows.AccountAssociations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountAssociations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountAssociations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountAssociationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountAssociationExistsByID request)
        {
            return await Workflows.AccountAssociations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountAssociationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountAssociationExistsByKey request)
        {
            return await Workflows.AccountAssociations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountAssociation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountAssociation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountAssociation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountAssociation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountAssociation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountAssociation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountAssociationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountAssociationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountAssociationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountAssociationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountAssociationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountAssociationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountAssociationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountAssociationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationDataAsync,
                    () => Workflows.AccountAssociations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountAssociationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountAssociationCache request)
        {
            await ClearCachedAccountAssociationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountAssociationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountAssociations>(string.Empty),
                    UrnId.Create<GetAccountAssociationByID>(string.Empty),
                    UrnId.Create<GetAccountAssociationByKey>(string.Empty),
                    UrnId.Create<CheckAccountAssociationExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountAssociationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountAssociationService : AccountAssociationServiceBase { }
}
