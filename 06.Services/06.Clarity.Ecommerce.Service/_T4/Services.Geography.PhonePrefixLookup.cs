// <autogenerated>
// <copyright file="PhonePrefixLookupService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the phone prefix lookup service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of phone prefix lookups.</summary>
    /// <seealso cref="PhonePrefixLookupSearchModel"/>
    /// <seealso cref="IReturn{PhonePrefixLookupPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/PhonePrefixLookups", "GET", Priority = 1,
            Summary = "Use to get a list of phone prefix lookups")]
    public partial class GetPhonePrefixLookups : PhonePrefixLookupSearchModel, IReturn<PhonePrefixLookupPagedResults> { }

    /// <summary>A ServiceStack Route to get phone prefix lookups for connect.</summary>
    /// <seealso cref="PhonePrefixLookupSearchModel"/>
    /// <seealso cref="IReturn{List{PhonePrefixLookupModel}}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.View"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookupsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all phone prefix lookups")]
    public partial class GetPhonePrefixLookupsForConnect : PhonePrefixLookupSearchModel, IReturn<List<PhonePrefixLookupModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all phone prefix lookups.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.View"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookupsDigest", "GET",
            Summary = "Use to get a hash representing each phone prefix lookups")]
    public partial class GetPhonePrefixLookupsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get phone prefix lookup.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PhonePrefixLookupModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/PhonePrefixLookup/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific phone prefix lookup")]
    public partial class GetPhonePrefixLookupByID : ImplementsIDBase, IReturn<PhonePrefixLookupModel> { }

    /// <summary>A ServiceStack Route to get phone prefix lookup.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PhonePrefixLookupModel}"/>
    [PublicAPI,
        Route("/Geography/PhonePrefixLookup/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific phone prefix lookup by the custom key")]
    public partial class GetPhonePrefixLookupByKey : ImplementsKeyBase, IReturn<PhonePrefixLookupModel> { }

    /// <summary>A ServiceStack Route to check phone prefix lookup exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.View"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPhonePrefixLookupExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check phone prefix lookup exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.View"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPhonePrefixLookupExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create phone prefix lookup.</summary>
    /// <seealso cref="PhonePrefixLookupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Create", "POST", Priority = 1,
            Summary = "Use to create a new phone prefix lookup.")]
    public partial class CreatePhonePrefixLookup : PhonePrefixLookupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert phone prefix lookup.</summary>
    /// <seealso cref="PhonePrefixLookupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing phone prefix lookup (as needed).")]
    public partial class UpsertPhonePrefixLookup : PhonePrefixLookupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update phone prefix lookup.</summary>
    /// <seealso cref="PhonePrefixLookupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing phone prefix lookup.")]
    public partial class UpdatePhonePrefixLookup : PhonePrefixLookupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate phone prefix lookup.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific phone prefix lookup from the system [Soft-Delete]")]
    public partial class DeactivatePhonePrefixLookupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate phone prefix lookup by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Deactivate"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific phone prefix lookup from the system [Soft-Delete]")]
    public partial class DeactivatePhonePrefixLookupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate phone prefix lookup.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific phone prefix lookup from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePhonePrefixLookupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate phone prefix lookup by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Reactivate"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific phone prefix lookup from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePhonePrefixLookupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete phone prefix lookup.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific phone prefix lookup from the system [Hard-Delete]")]
    public partial class DeletePhonePrefixLookupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete phone prefix lookup by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.PhonePrefixLookup.Delete"),
        PublicAPI,
        Route("/Geography/PhonePrefixLookup/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific phone prefix lookup from the system [Hard-Delete]")]
    public partial class DeletePhonePrefixLookupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear phone prefix lookup cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/PhonePrefixLookup/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all phone prefix lookup calls.")]
    public class ClearPhonePrefixLookupCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PhonePrefixLookupServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPhonePrefixLookups"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPhonePrefixLookups request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPhonePrefixLookupModel, PhonePrefixLookupModel, IPhonePrefixLookupSearchModel, PhonePrefixLookupPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PhonePrefixLookups)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPhonePrefixLookupsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPhonePrefixLookupsForConnect request)
        {
            return await Workflows.PhonePrefixLookups.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPhonePrefixLookupsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPhonePrefixLookupsDigest request)
        {
            return await Workflows.PhonePrefixLookups.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPhonePrefixLookupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPhonePrefixLookupByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PhonePrefixLookups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPhonePrefixLookupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPhonePrefixLookupByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PhonePrefixLookups, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPhonePrefixLookupExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPhonePrefixLookupExistsByID request)
        {
            return await Workflows.PhonePrefixLookups.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPhonePrefixLookupExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPhonePrefixLookupExistsByKey request)
        {
            return await Workflows.PhonePrefixLookups.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPhonePrefixLookup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPhonePrefixLookup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePhonePrefixLookup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePhonePrefixLookup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePhonePrefixLookup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePhonePrefixLookup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePhonePrefixLookupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePhonePrefixLookupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePhonePrefixLookupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePhonePrefixLookupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePhonePrefixLookupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePhonePrefixLookupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePhonePrefixLookupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePhonePrefixLookupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePhonePrefixLookupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePhonePrefixLookupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePhonePrefixLookupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePhonePrefixLookupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPhonePrefixLookupDataAsync,
                    () => Workflows.PhonePrefixLookups.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPhonePrefixLookupCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPhonePrefixLookupCache request)
        {
            await ClearCachedPhonePrefixLookupDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPhonePrefixLookupDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPhonePrefixLookups>(string.Empty),
                    UrnId.Create<GetPhonePrefixLookupByID>(string.Empty),
                    UrnId.Create<GetPhonePrefixLookupByKey>(string.Empty),
                    UrnId.Create<CheckPhonePrefixLookupExistsByID>(string.Empty),
                    UrnId.Create<CheckPhonePrefixLookupExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PhonePrefixLookupService : PhonePrefixLookupServiceBase { }
}
