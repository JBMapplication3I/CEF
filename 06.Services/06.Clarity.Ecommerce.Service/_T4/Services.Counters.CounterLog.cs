// <autogenerated>
// <copyright file="CounterLogService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the counter log service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of counter logs.</summary>
    /// <seealso cref="CounterLogSearchModel"/>
    /// <seealso cref="IReturn{CounterLogPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterLogs", "GET", Priority = 1,
            Summary = "Use to get a list of counter logs")]
    public partial class GetCounterLogs : CounterLogSearchModel, IReturn<CounterLogPagedResults> { }

    /// <summary>A ServiceStack Route to get counter logs for connect.</summary>
    /// <seealso cref="CounterLogSearchModel"/>
    /// <seealso cref="IReturn{List{CounterLogModel}}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.View"),
        PublicAPI,
        Route("/Counters/CounterLogsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all counter logs")]
    public partial class GetCounterLogsForConnect : CounterLogSearchModel, IReturn<List<CounterLogModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all counter logs.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.View"),
        PublicAPI,
        Route("/Counters/CounterLogsDigest", "GET",
            Summary = "Use to get a hash representing each counter logs")]
    public partial class GetCounterLogsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get counter log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CounterLogModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterLog/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific counter log")]
    public partial class GetCounterLogByID : ImplementsIDBase, IReturn<CounterLogModel> { }

    /// <summary>A ServiceStack Route to get counter log.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CounterLogModel}"/>
    [PublicAPI,
        Route("/Counters/CounterLog/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific counter log by the custom key")]
    public partial class GetCounterLogByKey : ImplementsKeyBase, IReturn<CounterLogModel> { }

    /// <summary>A ServiceStack Route to check counter log exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.View"),
        PublicAPI,
        Route("/Counters/CounterLog/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterLogExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter log exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.View"),
        PublicAPI,
        Route("/Counters/CounterLog/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterLogExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create counter log.</summary>
    /// <seealso cref="CounterLogModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLog/Create", "POST", Priority = 1,
            Summary = "Use to create a new counter log.")]
    public partial class CreateCounterLog : CounterLogModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert counter log.</summary>
    /// <seealso cref="CounterLogModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Counters/CounterLog/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing counter log (as needed).")]
    public partial class UpsertCounterLog : CounterLogModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update counter log.</summary>
    /// <seealso cref="CounterLogModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLog/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing counter log.")]
    public partial class UpdateCounterLog : CounterLogModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate counter log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLog/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter log from the system [Soft-Delete]")]
    public partial class DeactivateCounterLogByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate counter log by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Deactivate"),
        PublicAPI,
        Route("/Counters/CounterLog/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter log from the system [Soft-Delete]")]
    public partial class DeactivateCounterLogByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLog/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter log from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterLogByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter log by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Reactivate"),
        PublicAPI,
        Route("/Counters/CounterLog/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter log from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterLogByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter log.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterLog/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific counter log from the system [Hard-Delete]")]
    public partial class DeleteCounterLogByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter log by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterLog.Delete"),
        PublicAPI,
        Route("/Counters/CounterLog/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific counter log from the system [Hard-Delete]")]
    public partial class DeleteCounterLogByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear counter log cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterLog/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all counter log calls.")]
    public class ClearCounterLogCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CounterLogServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCounterLogs"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogs request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICounterLogModel, CounterLogModel, ICounterLogSearchModel, CounterLogPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CounterLogs)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCounterLogsForConnect request)
        {
            return await Workflows.CounterLogs.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogsDigest request)
        {
            return await Workflows.CounterLogs.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCounterLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CounterLogs, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterLogByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CounterLogs, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCounterLogExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterLogExistsByID request)
        {
            return await Workflows.CounterLogs.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterLogExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterLogExistsByKey request)
        {
            return await Workflows.CounterLogs.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCounterLog"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCounterLog request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCounterLog"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCounterLog request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCounterLog"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCounterLog request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCounterLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterLogByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCounterLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterLogByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCounterLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterLogByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCounterLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterLogByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCounterLogByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterLogByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCounterLogByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterLogByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterLogDataAsync,
                    () => Workflows.CounterLogs.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCounterLogCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCounterLogCache request)
        {
            await ClearCachedCounterLogDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCounterLogDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCounterLogs>(string.Empty),
                    UrnId.Create<GetCounterLogByID>(string.Empty),
                    UrnId.Create<GetCounterLogByKey>(string.Empty),
                    UrnId.Create<CheckCounterLogExistsByID>(string.Empty),
                    UrnId.Create<CheckCounterLogExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CounterLogService : CounterLogServiceBase { }
}
