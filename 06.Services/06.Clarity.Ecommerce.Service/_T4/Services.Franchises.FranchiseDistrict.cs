// <autogenerated>
// <copyright file="FranchiseDistrictService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise district service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise districts.</summary>
    /// <seealso cref="FranchiseDistrictSearchModel"/>
    /// <seealso cref="IReturn{FranchiseDistrictPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseDistricts", "GET", Priority = 1,
            Summary = "Use to get a list of franchise districts")]
    public partial class GetFranchiseDistricts : FranchiseDistrictSearchModel, IReturn<FranchiseDistrictPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise districts for connect.</summary>
    /// <seealso cref="FranchiseDistrictSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseDistrictModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.View"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrictsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise districts")]
    public partial class GetFranchiseDistrictsForConnect : FranchiseDistrictSearchModel, IReturn<List<FranchiseDistrictModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise districts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.View"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrictsDigest", "GET",
            Summary = "Use to get a hash representing each franchise districts")]
    public partial class GetFranchiseDistrictsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseDistrictModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseDistrict/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise district")]
    public partial class GetFranchiseDistrictByID : ImplementsIDBase, IReturn<FranchiseDistrictModel> { }

    /// <summary>A ServiceStack Route to get franchise district.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseDistrictModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseDistrict/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise district by the custom key")]
    public partial class GetFranchiseDistrictByKey : ImplementsKeyBase, IReturn<FranchiseDistrictModel> { }

    /// <summary>A ServiceStack Route to check franchise district exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.View"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseDistrictExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise district exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.View"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseDistrictExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise district.</summary>
    /// <seealso cref="FranchiseDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise district.")]
    public partial class CreateFranchiseDistrict : FranchiseDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise district.</summary>
    /// <seealso cref="FranchiseDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise district (as needed).")]
    public partial class UpsertFranchiseDistrict : FranchiseDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise district.</summary>
    /// <seealso cref="FranchiseDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise district.")]
    public partial class UpdateFranchiseDistrict : FranchiseDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise district from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise district from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise district from the system [Hard-Delete]")]
    public partial class DeleteFranchiseDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseDistrict.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseDistrict/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise district from the system [Hard-Delete]")]
    public partial class DeleteFranchiseDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise district cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseDistrict/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise district calls.")]
    public class ClearFranchiseDistrictCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseDistrictServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseDistricts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseDistricts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseDistrictModel, FranchiseDistrictModel, IFranchiseDistrictSearchModel, FranchiseDistrictPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseDistricts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseDistrictsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseDistrictsForConnect request)
        {
            return await Workflows.FranchiseDistricts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseDistrictsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseDistrictsDigest request)
        {
            return await Workflows.FranchiseDistricts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseDistrictByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseDistricts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseDistrictByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseDistricts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseDistrictExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseDistrictExistsByID request)
        {
            return await Workflows.FranchiseDistricts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseDistrictExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseDistrictExistsByKey request)
        {
            return await Workflows.FranchiseDistricts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDistrictDataAsync,
                    () => Workflows.FranchiseDistricts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseDistrictCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseDistrictCache request)
        {
            await ClearCachedFranchiseDistrictDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseDistrictDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseDistricts>(string.Empty),
                    UrnId.Create<GetFranchiseDistrictByID>(string.Empty),
                    UrnId.Create<GetFranchiseDistrictByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseDistrictExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseDistrictExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseDistrictService : FranchiseDistrictServiceBase { }
}
