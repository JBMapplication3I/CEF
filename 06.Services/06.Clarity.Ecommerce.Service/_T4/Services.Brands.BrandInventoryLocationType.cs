// <autogenerated>
// <copyright file="BrandInventoryLocationTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand inventory location type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand inventory location types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{BrandInventoryLocationTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandInventoryLocationTypes", "GET", Priority = 1,
            Summary = "Use to get a list of brand inventory location types")]
    public partial class GetBrandInventoryLocationTypes : TypeSearchModel, IReturn<BrandInventoryLocationTypePagedResults> { }

    /// <summary>A ServiceStack Route to get brand inventory location types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand inventory location types")]
    public partial class GetBrandInventoryLocationTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand inventory location types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationTypesDigest", "GET",
            Summary = "Use to get a hash representing each brand inventory location types")]
    public partial class GetBrandInventoryLocationTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandInventoryLocationType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand inventory location type")]
    public partial class GetBrandInventoryLocationTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get brand inventory location type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand inventory location type by the custom key")]
    public partial class GetBrandInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get brand inventory location type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific brand inventory location type by the name")]
    public partial class GetBrandInventoryLocationTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get brand inventory location type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Brands/BrandInventoryLocationType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific brand inventory location type by the name")]
    public partial class GetBrandInventoryLocationTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check brand inventory location type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandInventoryLocationTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand inventory location type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandInventoryLocationTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand inventory location type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandInventoryLocationTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand inventory location type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandInventoryLocationTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand inventory location type.")]
    public partial class CreateBrandInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand inventory location type (as needed).")]
    public partial class UpsertBrandInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand inventory location type.")]
    public partial class UpdateBrandInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand inventory location type from the system [Soft-Delete]")]
    public partial class DeactivateBrandInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand inventory location type from the system [Soft-Delete]")]
    public partial class DeactivateBrandInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand inventory location type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand inventory location type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand inventory location type from the system [Hard-Delete]")]
    public partial class DeleteBrandInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocationType.Delete"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand inventory location type from the system [Hard-Delete]")]
    public partial class DeleteBrandInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand inventory location type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandInventoryLocationType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand inventory location type calls.")]
    public class ClearBrandInventoryLocationTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandInventoryLocationTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, BrandInventoryLocationTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandInventoryLocationTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandInventoryLocationTypesForConnect request)
        {
            return await Workflows.BrandInventoryLocationTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationTypesDigest request)
        {
            return await Workflows.BrandInventoryLocationTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.BrandInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.BrandInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandInventoryLocationTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandInventoryLocationTypeExistsByID request)
        {
            return await Workflows.BrandInventoryLocationTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandInventoryLocationTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandInventoryLocationTypeExistsByKey request)
        {
            return await Workflows.BrandInventoryLocationTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandInventoryLocationTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandInventoryLocationTypeExistsByName request)
        {
            return await Workflows.BrandInventoryLocationTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandInventoryLocationTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandInventoryLocationTypeExistsByDisplayName request)
        {
            return await Workflows.BrandInventoryLocationTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationTypeDataAsync,
                    () => Workflows.BrandInventoryLocationTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandInventoryLocationTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandInventoryLocationTypeCache request)
        {
            await ClearCachedBrandInventoryLocationTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandInventoryLocationTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandInventoryLocationTypes>(string.Empty),
                    UrnId.Create<GetBrandInventoryLocationTypeByID>(string.Empty),
                    UrnId.Create<GetBrandInventoryLocationTypeByKey>(string.Empty),
                    UrnId.Create<GetBrandInventoryLocationTypeByName>(string.Empty),
                    UrnId.Create<CheckBrandInventoryLocationTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandInventoryLocationTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckBrandInventoryLocationTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckBrandInventoryLocationTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandInventoryLocationTypeService : BrandInventoryLocationTypeServiceBase { }
}
