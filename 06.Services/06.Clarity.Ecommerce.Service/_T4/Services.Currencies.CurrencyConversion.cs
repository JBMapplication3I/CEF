// <autogenerated>
// <copyright file="CurrencyConversionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the currency conversion service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of currency conversions.</summary>
    /// <seealso cref="CurrencyConversionSearchModel"/>
    /// <seealso cref="IReturn{CurrencyConversionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/CurrencyConversions", "GET", Priority = 1,
            Summary = "Use to get a list of currency conversions")]
    public partial class GetCurrencyConversions : CurrencyConversionSearchModel, IReturn<CurrencyConversionPagedResults> { }

    /// <summary>A ServiceStack Route to get currency conversions for connect.</summary>
    /// <seealso cref="CurrencyConversionSearchModel"/>
    /// <seealso cref="IReturn{List{CurrencyConversionModel}}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.View"),
        PublicAPI,
        Route("/Currencies/CurrencyConversionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all currency conversions")]
    public partial class GetCurrencyConversionsForConnect : CurrencyConversionSearchModel, IReturn<List<CurrencyConversionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all currency conversions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.View"),
        PublicAPI,
        Route("/Currencies/CurrencyConversionsDigest", "GET",
            Summary = "Use to get a hash representing each currency conversions")]
    public partial class GetCurrencyConversionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get currency conversion.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CurrencyConversionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/CurrencyConversion/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific currency conversion")]
    public partial class GetCurrencyConversionByID : ImplementsIDBase, IReturn<CurrencyConversionModel> { }

    /// <summary>A ServiceStack Route to get currency conversion.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CurrencyConversionModel}"/>
    [PublicAPI,
        Route("/Currencies/CurrencyConversion/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific currency conversion by the custom key")]
    public partial class GetCurrencyConversionByKey : ImplementsKeyBase, IReturn<CurrencyConversionModel> { }

    /// <summary>A ServiceStack Route to check currency conversion exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.View"),
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyConversionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check currency conversion exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.View"),
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyConversionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create currency conversion.</summary>
    /// <seealso cref="CurrencyConversionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Create", "POST", Priority = 1,
            Summary = "Use to create a new currency conversion.")]
    public partial class CreateCurrencyConversion : CurrencyConversionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert currency conversion.</summary>
    /// <seealso cref="CurrencyConversionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing currency conversion (as needed).")]
    public partial class UpsertCurrencyConversion : CurrencyConversionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update currency conversion.</summary>
    /// <seealso cref="CurrencyConversionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing currency conversion.")]
    public partial class UpdateCurrencyConversion : CurrencyConversionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate currency conversion.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific currency conversion from the system [Soft-Delete]")]
    public partial class DeactivateCurrencyConversionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate currency conversion by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Deactivate"),
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific currency conversion from the system [Soft-Delete]")]
    public partial class DeactivateCurrencyConversionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate currency conversion.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific currency conversion from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCurrencyConversionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate currency conversion by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Reactivate"),
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific currency conversion from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCurrencyConversionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete currency conversion.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific currency conversion from the system [Hard-Delete]")]
    public partial class DeleteCurrencyConversionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete currency conversion by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyConversion.Delete"),
        PublicAPI,
        Route("/Currencies/CurrencyConversion/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific currency conversion from the system [Hard-Delete]")]
    public partial class DeleteCurrencyConversionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear currency conversion cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/CurrencyConversion/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all currency conversion calls.")]
    public class ClearCurrencyConversionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CurrencyConversionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCurrencyConversions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyConversions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICurrencyConversionModel, CurrencyConversionModel, ICurrencyConversionSearchModel, CurrencyConversionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CurrencyConversions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyConversionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCurrencyConversionsForConnect request)
        {
            return await Workflows.CurrencyConversions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyConversionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyConversionsDigest request)
        {
            return await Workflows.CurrencyConversions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCurrencyConversionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyConversionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CurrencyConversions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyConversionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyConversionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CurrencyConversions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCurrencyConversionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyConversionExistsByID request)
        {
            return await Workflows.CurrencyConversions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCurrencyConversionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyConversionExistsByKey request)
        {
            return await Workflows.CurrencyConversions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCurrencyConversion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCurrencyConversion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCurrencyConversion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCurrencyConversion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCurrencyConversion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCurrencyConversion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCurrencyConversionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCurrencyConversionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCurrencyConversionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCurrencyConversionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCurrencyConversionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCurrencyConversionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCurrencyConversionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCurrencyConversionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCurrencyConversionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCurrencyConversionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCurrencyConversionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCurrencyConversionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyConversionDataAsync,
                    () => Workflows.CurrencyConversions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCurrencyConversionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCurrencyConversionCache request)
        {
            await ClearCachedCurrencyConversionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCurrencyConversionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCurrencyConversions>(string.Empty),
                    UrnId.Create<GetCurrencyConversionByID>(string.Empty),
                    UrnId.Create<GetCurrencyConversionByKey>(string.Empty),
                    UrnId.Create<CheckCurrencyConversionExistsByID>(string.Empty),
                    UrnId.Create<CheckCurrencyConversionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CurrencyConversionService : CurrencyConversionServiceBase { }
}
