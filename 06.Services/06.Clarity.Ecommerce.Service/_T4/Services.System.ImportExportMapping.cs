// <autogenerated>
// <copyright file="ImportExportMappingService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the import export mapping service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of import export mappings.</summary>
    /// <seealso cref="ImportExportMappingSearchModel"/>
    /// <seealso cref="IReturn{ImportExportMappingPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/ImportExportMappings", "GET", Priority = 1,
            Summary = "Use to get a list of import export mappings")]
    public partial class GetImportExportMappings : ImportExportMappingSearchModel, IReturn<ImportExportMappingPagedResults> { }

    /// <summary>A ServiceStack Route to get import export mappings for connect.</summary>
    /// <seealso cref="ImportExportMappingSearchModel"/>
    /// <seealso cref="IReturn{List{ImportExportMappingModel}}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.View"),
        PublicAPI,
        Route("/Structure/ImportExportMappingsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all import export mappings")]
    public partial class GetImportExportMappingsForConnect : ImportExportMappingSearchModel, IReturn<List<ImportExportMappingModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all import export mappings.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.View"),
        PublicAPI,
        Route("/Structure/ImportExportMappingsDigest", "GET",
            Summary = "Use to get a hash representing each import export mappings")]
    public partial class GetImportExportMappingsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get import export mapping.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ImportExportMappingModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/ImportExportMapping/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific import export mapping")]
    public partial class GetImportExportMappingByID : ImplementsIDBase, IReturn<ImportExportMappingModel> { }

    /// <summary>A ServiceStack Route to get import export mapping.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ImportExportMappingModel}"/>
    [PublicAPI,
        Route("/Structure/ImportExportMapping/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific import export mapping by the custom key")]
    public partial class GetImportExportMappingByKey : ImplementsKeyBase, IReturn<ImportExportMappingModel> { }

    /// <summary>A ServiceStack Route to get import export mapping.</summary>
    /// <seealso cref="IReturn{ImportExportMappingModel}"/>
    [PublicAPI,
        Route("/Structure/ImportExportMapping/Name", "GET", Priority = 1,
            Summary = "Use to get a specific import export mapping by the name")]
    public partial class GetImportExportMappingByName : ImplementsNameBase, IReturn<ImportExportMappingModel> { }

    /// <summary>A ServiceStack Route to check import export mapping exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.View"),
        PublicAPI,
        Route("/Structure/ImportExportMapping/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckImportExportMappingExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check import export mapping exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.View"),
        PublicAPI,
        Route("/Structure/ImportExportMapping/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckImportExportMappingExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check import export mapping exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.View"),
        PublicAPI,
        Route("/Structure/ImportExportMapping/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckImportExportMappingExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create import export mapping.</summary>
    /// <seealso cref="ImportExportMappingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/ImportExportMapping/Create", "POST", Priority = 1,
            Summary = "Use to create a new import export mapping.")]
    public partial class CreateImportExportMapping : ImportExportMappingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert import export mapping.</summary>
    /// <seealso cref="ImportExportMappingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/ImportExportMapping/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing import export mapping (as needed).")]
    public partial class UpsertImportExportMapping : ImportExportMappingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update import export mapping.</summary>
    /// <seealso cref="ImportExportMappingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/ImportExportMapping/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing import export mapping.")]
    public partial class UpdateImportExportMapping : ImportExportMappingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate import export mapping.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/ImportExportMapping/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific import export mapping from the system [Soft-Delete]")]
    public partial class DeactivateImportExportMappingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate import export mapping by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Deactivate"),
        PublicAPI,
        Route("/Structure/ImportExportMapping/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific import export mapping from the system [Soft-Delete]")]
    public partial class DeactivateImportExportMappingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate import export mapping.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/ImportExportMapping/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific import export mapping from the system [Restore from Soft-Delete]")]
    public partial class ReactivateImportExportMappingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate import export mapping by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Reactivate"),
        PublicAPI,
        Route("/Structure/ImportExportMapping/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific import export mapping from the system [Restore from Soft-Delete]")]
    public partial class ReactivateImportExportMappingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete import export mapping.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/ImportExportMapping/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific import export mapping from the system [Hard-Delete]")]
    public partial class DeleteImportExportMappingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete import export mapping by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.ImportExportMapping.Delete"),
        PublicAPI,
        Route("/Structure/ImportExportMapping/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific import export mapping from the system [Hard-Delete]")]
    public partial class DeleteImportExportMappingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear import export mapping cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/ImportExportMapping/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all import export mapping calls.")]
    public class ClearImportExportMappingCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ImportExportMappingServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetImportExportMappings"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetImportExportMappings request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IImportExportMappingModel, ImportExportMappingModel, IImportExportMappingSearchModel, ImportExportMappingPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ImportExportMappings)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetImportExportMappingsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetImportExportMappingsForConnect request)
        {
            return await Workflows.ImportExportMappings.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetImportExportMappingsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetImportExportMappingsDigest request)
        {
            return await Workflows.ImportExportMappings.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetImportExportMappingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetImportExportMappingByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ImportExportMappings, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetImportExportMappingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetImportExportMappingByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ImportExportMappings, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetImportExportMappingByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetImportExportMappingByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ImportExportMappings, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckImportExportMappingExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckImportExportMappingExistsByID request)
        {
            return await Workflows.ImportExportMappings.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckImportExportMappingExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckImportExportMappingExistsByKey request)
        {
            return await Workflows.ImportExportMappings.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckImportExportMappingExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckImportExportMappingExistsByName request)
        {
            return await Workflows.ImportExportMappings.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertImportExportMapping"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertImportExportMapping request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateImportExportMapping"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateImportExportMapping request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateImportExportMapping"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateImportExportMapping request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateImportExportMappingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateImportExportMappingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateImportExportMappingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateImportExportMappingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateImportExportMappingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateImportExportMappingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateImportExportMappingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateImportExportMappingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteImportExportMappingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteImportExportMappingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteImportExportMappingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteImportExportMappingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedImportExportMappingDataAsync,
                    () => Workflows.ImportExportMappings.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearImportExportMappingCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearImportExportMappingCache request)
        {
            await ClearCachedImportExportMappingDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedImportExportMappingDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetImportExportMappings>(string.Empty),
                    UrnId.Create<GetImportExportMappingByID>(string.Empty),
                    UrnId.Create<GetImportExportMappingByKey>(string.Empty),
                    UrnId.Create<GetImportExportMappingByName>(string.Empty),
                    UrnId.Create<CheckImportExportMappingExistsByID>(string.Empty),
                    UrnId.Create<CheckImportExportMappingExistsByKey>(string.Empty),
                    UrnId.Create<CheckImportExportMappingExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ImportExportMappingService : ImportExportMappingServiceBase { }
}
