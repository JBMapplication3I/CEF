// <autogenerated>
// <copyright file="CurrencyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the currency service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of currencies.</summary>
    /// <seealso cref="CurrencySearchModel"/>
    /// <seealso cref="IReturn{CurrencyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/Currencies", "GET", Priority = 1,
            Summary = "Use to get a list of currencies")]
    public partial class GetCurrencies : CurrencySearchModel, IReturn<CurrencyPagedResults> { }

    /// <summary>A ServiceStack Route to get currencies for connect.</summary>
    /// <seealso cref="CurrencySearchModel"/>
    /// <seealso cref="IReturn{List{CurrencyModel}}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.View"),
        PublicAPI,
        Route("/Currencies/CurrenciesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all currencies")]
    public partial class GetCurrenciesForConnect : CurrencySearchModel, IReturn<List<CurrencyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all currencies.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.View"),
        PublicAPI,
        Route("/Currencies/CurrenciesDigest", "GET",
            Summary = "Use to get a hash representing each currencies")]
    public partial class GetCurrenciesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CurrencyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/Currency/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific currency")]
    public partial class GetCurrencyByID : ImplementsIDBase, IReturn<CurrencyModel> { }

    /// <summary>A ServiceStack Route to get currency.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CurrencyModel}"/>
    [PublicAPI,
        Route("/Currencies/Currency/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific currency by the custom key")]
    public partial class GetCurrencyByKey : ImplementsKeyBase, IReturn<CurrencyModel> { }

    /// <summary>A ServiceStack Route to get currency.</summary>
    /// <seealso cref="IReturn{CurrencyModel}"/>
    [PublicAPI,
        Route("/Currencies/Currency/Name", "GET", Priority = 1,
            Summary = "Use to get a specific currency by the name")]
    public partial class GetCurrencyByName : ImplementsNameBase, IReturn<CurrencyModel> { }

    /// <summary>A ServiceStack Route to check currency exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.View"),
        PublicAPI,
        Route("/Currencies/Currency/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check currency exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.View"),
        PublicAPI,
        Route("/Currencies/Currency/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check currency exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.View"),
        PublicAPI,
        Route("/Currencies/Currency/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create currency.</summary>
    /// <seealso cref="CurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/Currency/Create", "POST", Priority = 1,
            Summary = "Use to create a new currency.")]
    public partial class CreateCurrency : CurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert currency.</summary>
    /// <seealso cref="CurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Currencies/Currency/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing currency (as needed).")]
    public partial class UpsertCurrency : CurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update currency.</summary>
    /// <seealso cref="CurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/Currency/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing currency.")]
    public partial class UpdateCurrency : CurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/Currency/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific currency from the system [Soft-Delete]")]
    public partial class DeactivateCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Deactivate"),
        PublicAPI,
        Route("/Currencies/Currency/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific currency from the system [Soft-Delete]")]
    public partial class DeactivateCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/Currency/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Reactivate"),
        PublicAPI,
        Route("/Currencies/Currency/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/Currency/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific currency from the system [Hard-Delete]")]
    public partial class DeleteCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.Currency.Delete"),
        PublicAPI,
        Route("/Currencies/Currency/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific currency from the system [Hard-Delete]")]
    public partial class DeleteCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear currency cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/Currency/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all currency calls.")]
    public class ClearCurrencyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CurrencyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCurrencies"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencies request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICurrencyModel, CurrencyModel, ICurrencySearchModel, CurrencyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Currencies)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrenciesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCurrenciesForConnect request)
        {
            return await Workflows.Currencies.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrenciesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrenciesDigest request)
        {
            return await Workflows.Currencies.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Currencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Currencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Currencies, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCurrencyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyExistsByID request)
        {
            return await Workflows.Currencies.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCurrencyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyExistsByKey request)
        {
            return await Workflows.Currencies.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCurrencyExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyExistsByName request)
        {
            return await Workflows.Currencies.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyDataAsync,
                    () => Workflows.Currencies.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCurrencyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCurrencyCache request)
        {
            await ClearCachedCurrencyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCurrencyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCurrencies>(string.Empty),
                    UrnId.Create<GetCurrencyByID>(string.Empty),
                    UrnId.Create<GetCurrencyByKey>(string.Empty),
                    UrnId.Create<GetCurrencyByName>(string.Empty),
                    UrnId.Create<CheckCurrencyExistsByID>(string.Empty),
                    UrnId.Create<CheckCurrencyExistsByKey>(string.Empty),
                    UrnId.Create<CheckCurrencyExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CurrencyService : CurrencyServiceBase { }
}
