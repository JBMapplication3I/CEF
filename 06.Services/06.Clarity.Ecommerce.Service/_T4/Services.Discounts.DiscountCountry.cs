// <autogenerated>
// <copyright file="DiscountCountryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount country service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount countries.</summary>
    /// <seealso cref="DiscountCountrySearchModel"/>
    /// <seealso cref="IReturn{DiscountCountryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCountries", "GET", Priority = 1,
            Summary = "Use to get a list of discount countries")]
    public partial class GetDiscountCountries : DiscountCountrySearchModel, IReturn<DiscountCountryPagedResults> { }

    /// <summary>A ServiceStack Route to get discount countries for connect.</summary>
    /// <seealso cref="DiscountCountrySearchModel"/>
    /// <seealso cref="IReturn{List{DiscountCountryModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.View"),
        PublicAPI,
        Route("/Discounts/DiscountCountriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount countries")]
    public partial class GetDiscountCountriesForConnect : DiscountCountrySearchModel, IReturn<List<DiscountCountryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount countries.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.View"),
        PublicAPI,
        Route("/Discounts/DiscountCountriesDigest", "GET",
            Summary = "Use to get a hash representing each discount countries")]
    public partial class GetDiscountCountriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountCountryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCountry/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount country")]
    public partial class GetDiscountCountryByID : ImplementsIDBase, IReturn<DiscountCountryModel> { }

    /// <summary>A ServiceStack Route to get discount country.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountCountryModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountCountry/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount country by the custom key")]
    public partial class GetDiscountCountryByKey : ImplementsKeyBase, IReturn<DiscountCountryModel> { }

    /// <summary>A ServiceStack Route to check discount country exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.View"),
        PublicAPI,
        Route("/Discounts/DiscountCountry/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountCountryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount country exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.View"),
        PublicAPI,
        Route("/Discounts/DiscountCountry/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountCountryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount country.</summary>
    /// <seealso cref="DiscountCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCountry/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount country.")]
    public partial class CreateDiscountCountry : DiscountCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount country.</summary>
    /// <seealso cref="DiscountCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountCountry/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount country (as needed).")]
    public partial class UpsertDiscountCountry : DiscountCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount country.</summary>
    /// <seealso cref="DiscountCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCountry/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount country.")]
    public partial class UpdateDiscountCountry : DiscountCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCountry/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount country from the system [Soft-Delete]")]
    public partial class DeactivateDiscountCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountCountry/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount country from the system [Soft-Delete]")]
    public partial class DeactivateDiscountCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCountry/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountCountry/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCountry/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount country from the system [Hard-Delete]")]
    public partial class DeleteDiscountCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCountry.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountCountry/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount country from the system [Hard-Delete]")]
    public partial class DeleteDiscountCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount country cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCountry/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount country calls.")]
    public class ClearDiscountCountryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountCountryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountCountries"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCountries request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountCountryModel, DiscountCountryModel, IDiscountCountrySearchModel, DiscountCountryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountCountries)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCountriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountCountriesForConnect request)
        {
            return await Workflows.DiscountCountries.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCountriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCountriesDigest request)
        {
            return await Workflows.DiscountCountries.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCountryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountCountries, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCountryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountCountries, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountCountryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountCountryExistsByID request)
        {
            return await Workflows.DiscountCountries.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountCountryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountCountryExistsByKey request)
        {
            return await Workflows.DiscountCountries.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCountryDataAsync,
                    () => Workflows.DiscountCountries.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountCountryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountCountryCache request)
        {
            await ClearCachedDiscountCountryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountCountryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountCountries>(string.Empty),
                    UrnId.Create<GetDiscountCountryByID>(string.Empty),
                    UrnId.Create<GetDiscountCountryByKey>(string.Empty),
                    UrnId.Create<CheckDiscountCountryExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountCountryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountCountryService : DiscountCountryServiceBase { }
}
