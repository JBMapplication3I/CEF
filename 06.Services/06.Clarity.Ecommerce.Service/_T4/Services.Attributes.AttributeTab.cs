// <autogenerated>
// <copyright file="AttributeTabService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the attribute tab service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of attribute tabs.</summary>
    /// <seealso cref="AttributeTabSearchModel"/>
    /// <seealso cref="IReturn{AttributeTabPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/AttributeTabs", "GET", Priority = 1,
            Summary = "Use to get a list of attribute tabs")]
    public partial class GetAttributeTabs : AttributeTabSearchModel, IReturn<AttributeTabPagedResults> { }

    /// <summary>A ServiceStack Route to get attribute tabs for connect.</summary>
    /// <seealso cref="AttributeTabSearchModel"/>
    /// <seealso cref="IReturn{List{AttributeTabModel}}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.View"),
        PublicAPI,
        Route("/Attributes/AttributeTabsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all attribute tabs")]
    public partial class GetAttributeTabsForConnect : AttributeTabSearchModel, IReturn<List<AttributeTabModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all attribute tabs.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.View"),
        PublicAPI,
        Route("/Attributes/AttributeTabsDigest", "GET",
            Summary = "Use to get a hash representing each attribute tabs")]
    public partial class GetAttributeTabsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get attribute tab.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AttributeTabModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/AttributeTab/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific attribute tab")]
    public partial class GetAttributeTabByID : ImplementsIDBase, IReturn<AttributeTabModel> { }

    /// <summary>A ServiceStack Route to get attribute tab.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AttributeTabModel}"/>
    [PublicAPI,
        Route("/Attributes/AttributeTab/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific attribute tab by the custom key")]
    public partial class GetAttributeTabByKey : ImplementsKeyBase, IReturn<AttributeTabModel> { }

    /// <summary>A ServiceStack Route to get attribute tab.</summary>
    /// <seealso cref="IReturn{AttributeTabModel}"/>
    [PublicAPI,
        Route("/Attributes/AttributeTab/Name", "GET", Priority = 1,
            Summary = "Use to get a specific attribute tab by the name")]
    public partial class GetAttributeTabByName : ImplementsNameBase, IReturn<AttributeTabModel> { }

    /// <summary>A ServiceStack Route to get attribute tab.</summary>
    /// <seealso cref="IReturn{AttributeTabModel}"/>
    [PublicAPI,
        Route("/Attributes/AttributeTab/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific attribute tab by the name")]
    public partial class GetAttributeTabByDisplayName : ImplementsDisplayNameBase, IReturn<AttributeTabModel> { }

    /// <summary>A ServiceStack Route to check attribute tab exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.View"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeTabExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check attribute tab exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.View"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeTabExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check attribute tab exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.View"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeTabExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check attribute tab exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.View"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAttributeTabExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create attribute tab.</summary>
    /// <seealso cref="AttributeTabModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeTab/Create", "POST", Priority = 1,
            Summary = "Use to create a new attribute tab.")]
    public partial class CreateAttributeTab : AttributeTabModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert attribute tab.</summary>
    /// <seealso cref="AttributeTabModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Attributes/AttributeTab/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing attribute tab (as needed).")]
    public partial class UpsertAttributeTab : AttributeTabModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update attribute tab.</summary>
    /// <seealso cref="AttributeTabModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeTab/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing attribute tab.")]
    public partial class UpdateAttributeTab : AttributeTabModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate attribute tab.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeTab/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific attribute tab from the system [Soft-Delete]")]
    public partial class DeactivateAttributeTabByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate attribute tab by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Deactivate"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific attribute tab from the system [Soft-Delete]")]
    public partial class DeactivateAttributeTabByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate attribute tab.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeTab/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific attribute tab from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAttributeTabByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate attribute tab by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Reactivate"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific attribute tab from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAttributeTabByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete attribute tab.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/AttributeTab/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific attribute tab from the system [Hard-Delete]")]
    public partial class DeleteAttributeTabByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete attribute tab by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.AttributeTab.Delete"),
        PublicAPI,
        Route("/Attributes/AttributeTab/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific attribute tab from the system [Hard-Delete]")]
    public partial class DeleteAttributeTabByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear attribute tab cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/AttributeTab/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all attribute tab calls.")]
    public class ClearAttributeTabCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AttributeTabServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAttributeTabs"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeTabs request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAttributeTabModel, AttributeTabModel, IAttributeTabSearchModel, AttributeTabPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AttributeTabs)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeTabsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAttributeTabsForConnect request)
        {
            return await Workflows.AttributeTabs.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeTabsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeTabsDigest request)
        {
            return await Workflows.AttributeTabs.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAttributeTabByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeTabByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AttributeTabs, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeTabByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeTabByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AttributeTabs, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeTabByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeTabByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AttributeTabs, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAttributeTabByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAttributeTabByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AttributeTabs, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAttributeTabExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeTabExistsByID request)
        {
            return await Workflows.AttributeTabs.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAttributeTabExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeTabExistsByKey request)
        {
            return await Workflows.AttributeTabs.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAttributeTabExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeTabExistsByName request)
        {
            return await Workflows.AttributeTabs.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAttributeTabExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAttributeTabExistsByDisplayName request)
        {
            return await Workflows.AttributeTabs.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAttributeTab"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAttributeTab request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAttributeTab"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAttributeTab request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAttributeTab"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAttributeTab request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAttributeTabByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAttributeTabByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAttributeTabByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAttributeTabByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAttributeTabByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAttributeTabByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAttributeTabByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAttributeTabByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAttributeTabByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAttributeTabByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAttributeTabByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAttributeTabByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAttributeTabDataAsync,
                    () => Workflows.AttributeTabs.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAttributeTabCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAttributeTabCache request)
        {
            await ClearCachedAttributeTabDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAttributeTabDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAttributeTabs>(string.Empty),
                    UrnId.Create<GetAttributeTabByID>(string.Empty),
                    UrnId.Create<GetAttributeTabByKey>(string.Empty),
                    UrnId.Create<GetAttributeTabByName>(string.Empty),
                    UrnId.Create<CheckAttributeTabExistsByID>(string.Empty),
                    UrnId.Create<CheckAttributeTabExistsByKey>(string.Empty),
                    UrnId.Create<CheckAttributeTabExistsByName>(string.Empty),
                    UrnId.Create<CheckAttributeTabExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AttributeTabService : AttributeTabServiceBase { }
}
