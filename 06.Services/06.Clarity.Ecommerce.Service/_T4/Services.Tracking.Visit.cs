// <autogenerated>
// <copyright file="VisitService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the visit service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of visits.</summary>
    /// <seealso cref="VisitSearchModel"/>
    /// <seealso cref="IReturn{VisitPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Visits", "GET", Priority = 1,
            Summary = "Use to get a list of visits")]
    public partial class GetVisits : VisitSearchModel, IReturn<VisitPagedResults> { }

    /// <summary>A ServiceStack Route to get visits for connect.</summary>
    /// <seealso cref="VisitSearchModel"/>
    /// <seealso cref="IReturn{List{VisitModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.View"),
        PublicAPI,
        Route("/Tracking/VisitsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all visits")]
    public partial class GetVisitsForConnect : VisitSearchModel, IReturn<List<VisitModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all visits.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.View"),
        PublicAPI,
        Route("/Tracking/VisitsDigest", "GET",
            Summary = "Use to get a hash representing each visits")]
    public partial class GetVisitsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get visit.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VisitModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Visit/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific visit")]
    public partial class GetVisitByID : ImplementsIDBase, IReturn<VisitModel> { }

    /// <summary>A ServiceStack Route to get visit.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VisitModel}"/>
    [PublicAPI,
        Route("/Tracking/Visit/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific visit by the custom key")]
    public partial class GetVisitByKey : ImplementsKeyBase, IReturn<VisitModel> { }

    /// <summary>A ServiceStack Route to get visit.</summary>
    /// <seealso cref="IReturn{VisitModel}"/>
    [PublicAPI,
        Route("/Tracking/Visit/Name", "GET", Priority = 1,
            Summary = "Use to get a specific visit by the name")]
    public partial class GetVisitByName : ImplementsNameBase, IReturn<VisitModel> { }

    /// <summary>A ServiceStack Route to check visit exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.View"),
        PublicAPI,
        Route("/Tracking/Visit/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVisitExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check visit exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.View"),
        PublicAPI,
        Route("/Tracking/Visit/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVisitExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check visit exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.View"),
        PublicAPI,
        Route("/Tracking/Visit/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckVisitExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create visit.</summary>
    /// <seealso cref="VisitModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visit/Create", "POST", Priority = 1,
            Summary = "Use to create a new visit.")]
    public partial class CreateVisit : VisitModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert visit.</summary>
    /// <seealso cref="VisitModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/Visit/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing visit (as needed).")]
    public partial class UpsertVisit : VisitModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update visit.</summary>
    /// <seealso cref="VisitModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visit/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing visit.")]
    public partial class UpdateVisit : VisitModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate visit.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visit/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific visit from the system [Soft-Delete]")]
    public partial class DeactivateVisitByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate visit by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Deactivate"),
        PublicAPI,
        Route("/Tracking/Visit/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific visit from the system [Soft-Delete]")]
    public partial class DeactivateVisitByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate visit.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visit/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific visit from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVisitByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate visit by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Reactivate"),
        PublicAPI,
        Route("/Tracking/Visit/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific visit from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVisitByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete visit.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Visit/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific visit from the system [Hard-Delete]")]
    public partial class DeleteVisitByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete visit by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Visit.Delete"),
        PublicAPI,
        Route("/Tracking/Visit/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific visit from the system [Hard-Delete]")]
    public partial class DeleteVisitByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear visit cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Visit/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all visit calls.")]
    public class ClearVisitCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VisitServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVisits"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisits request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVisitModel, VisitModel, IVisitSearchModel, VisitPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Visits)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVisitsForConnect request)
        {
            return await Workflows.Visits.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitsDigest request)
        {
            return await Workflows.Visits.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVisitByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Visits, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Visits, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVisitByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVisitByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Visits, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVisitExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVisitExistsByID request)
        {
            return await Workflows.Visits.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVisitExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVisitExistsByKey request)
        {
            return await Workflows.Visits.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVisitExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVisitExistsByName request)
        {
            return await Workflows.Visits.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVisit"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVisit request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVisit"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVisit request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVisit"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVisit request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVisitByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVisitByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVisitByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVisitByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVisitByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVisitByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVisitByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVisitByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVisitByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVisitByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVisitByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVisitByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVisitDataAsync,
                    () => Workflows.Visits.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVisitCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVisitCache request)
        {
            await ClearCachedVisitDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVisitDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVisits>(string.Empty),
                    UrnId.Create<GetVisitByID>(string.Empty),
                    UrnId.Create<GetVisitByKey>(string.Empty),
                    UrnId.Create<GetVisitByName>(string.Empty),
                    UrnId.Create<CheckVisitExistsByID>(string.Empty),
                    UrnId.Create<CheckVisitExistsByKey>(string.Empty),
                    UrnId.Create<CheckVisitExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VisitService : VisitServiceBase { }
}
