// <autogenerated>
// <copyright file="PriceRoundingService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rounding service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price roundings.</summary>
    /// <seealso cref="PriceRoundingSearchModel"/>
    /// <seealso cref="IReturn{PriceRoundingPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRoundings", "GET", Priority = 1,
            Summary = "Use to get a list of price roundings")]
    public partial class GetPriceRoundings : PriceRoundingSearchModel, IReturn<PriceRoundingPagedResults> { }

    /// <summary>A ServiceStack Route to get price roundings for connect.</summary>
    /// <seealso cref="PriceRoundingSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRoundingModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.View"),
        PublicAPI,
        Route("/Pricing/PriceRoundingsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price roundings")]
    public partial class GetPriceRoundingsForConnect : PriceRoundingSearchModel, IReturn<List<PriceRoundingModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price roundings.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.View"),
        PublicAPI,
        Route("/Pricing/PriceRoundingsDigest", "GET",
            Summary = "Use to get a hash representing each price roundings")]
    public partial class GetPriceRoundingsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rounding.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRoundingModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRounding/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rounding")]
    public partial class GetPriceRoundingByID : ImplementsIDBase, IReturn<PriceRoundingModel> { }

    /// <summary>A ServiceStack Route to get price rounding.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRoundingModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRounding/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rounding by the custom key")]
    public partial class GetPriceRoundingByKey : ImplementsKeyBase, IReturn<PriceRoundingModel> { }

    /// <summary>A ServiceStack Route to check price rounding exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.View"),
        PublicAPI,
        Route("/Pricing/PriceRounding/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRoundingExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rounding exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.View"),
        PublicAPI,
        Route("/Pricing/PriceRounding/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRoundingExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rounding.</summary>
    /// <seealso cref="PriceRoundingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRounding/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rounding.")]
    public partial class CreatePriceRounding : PriceRoundingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rounding.</summary>
    /// <seealso cref="PriceRoundingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRounding/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rounding (as needed).")]
    public partial class UpsertPriceRounding : PriceRoundingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rounding.</summary>
    /// <seealso cref="PriceRoundingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRounding/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rounding.")]
    public partial class UpdatePriceRounding : PriceRoundingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rounding.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRounding/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rounding from the system [Soft-Delete]")]
    public partial class DeactivatePriceRoundingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rounding by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRounding/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rounding from the system [Soft-Delete]")]
    public partial class DeactivatePriceRoundingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rounding.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRounding/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rounding from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRoundingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rounding by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRounding/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rounding from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRoundingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rounding.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRounding/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rounding from the system [Hard-Delete]")]
    public partial class DeletePriceRoundingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rounding by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRounding.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRounding/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rounding from the system [Hard-Delete]")]
    public partial class DeletePriceRoundingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rounding cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRounding/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rounding calls.")]
    public class ClearPriceRoundingCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRoundingServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRoundings"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRoundings request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRoundingModel, PriceRoundingModel, IPriceRoundingSearchModel, PriceRoundingPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRoundings)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRoundingsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRoundingsForConnect request)
        {
            return await Workflows.PriceRoundings.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRoundingsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRoundingsDigest request)
        {
            return await Workflows.PriceRoundings.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRoundingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRoundingByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRoundings, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRoundingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRoundingByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRoundings, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRoundingExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRoundingExistsByID request)
        {
            return await Workflows.PriceRoundings.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRoundingExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRoundingExistsByKey request)
        {
            return await Workflows.PriceRoundings.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRounding"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRounding request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRounding"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRounding request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRounding"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRounding request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRoundingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRoundingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRoundingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRoundingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRoundingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRoundingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRoundingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRoundingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRoundingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRoundingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRoundingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRoundingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRoundingDataAsync,
                    () => Workflows.PriceRoundings.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRoundingCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRoundingCache request)
        {
            await ClearCachedPriceRoundingDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRoundingDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRoundings>(string.Empty),
                    UrnId.Create<GetPriceRoundingByID>(string.Empty),
                    UrnId.Create<GetPriceRoundingByKey>(string.Empty),
                    UrnId.Create<CheckPriceRoundingExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRoundingExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRoundingService : PriceRoundingServiceBase { }
}
