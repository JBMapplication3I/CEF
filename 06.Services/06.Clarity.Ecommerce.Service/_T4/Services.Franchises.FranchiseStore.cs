// <autogenerated>
// <copyright file="FranchiseStoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise stores.</summary>
    /// <seealso cref="FranchiseStoreSearchModel"/>
    /// <seealso cref="IReturn{FranchiseStorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseStores", "GET", Priority = 1,
            Summary = "Use to get a list of franchise stores")]
    public partial class GetFranchiseStores : FranchiseStoreSearchModel, IReturn<FranchiseStorePagedResults> { }

    /// <summary>A ServiceStack Route to get franchise stores for connect.</summary>
    /// <seealso cref="FranchiseStoreSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseStoreModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.View"),
        PublicAPI,
        Route("/Franchises/FranchiseStoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise stores")]
    public partial class GetFranchiseStoresForConnect : FranchiseStoreSearchModel, IReturn<List<FranchiseStoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.View"),
        PublicAPI,
        Route("/Franchises/FranchiseStoresDigest", "GET",
            Summary = "Use to get a hash representing each franchise stores")]
    public partial class GetFranchiseStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseStoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseStore/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise store")]
    public partial class GetFranchiseStoreByID : ImplementsIDBase, IReturn<FranchiseStoreModel> { }

    /// <summary>A ServiceStack Route to get franchise store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseStoreModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseStore/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise store by the custom key")]
    public partial class GetFranchiseStoreByKey : ImplementsKeyBase, IReturn<FranchiseStoreModel> { }

    /// <summary>A ServiceStack Route to check franchise store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.View"),
        PublicAPI,
        Route("/Franchises/FranchiseStore/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.View"),
        PublicAPI,
        Route("/Franchises/FranchiseStore/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise store.</summary>
    /// <seealso cref="FranchiseStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseStore/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise store.")]
    public partial class CreateFranchiseStore : FranchiseStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise store.</summary>
    /// <seealso cref="FranchiseStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseStore/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise store (as needed).")]
    public partial class UpsertFranchiseStore : FranchiseStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise store.</summary>
    /// <seealso cref="FranchiseStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseStore/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise store.")]
    public partial class UpdateFranchiseStore : FranchiseStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseStore/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise store from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseStore/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise store from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseStore/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseStore/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseStore/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise store from the system [Hard-Delete]")]
    public partial class DeleteFranchiseStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseStore.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseStore/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise store from the system [Hard-Delete]")]
    public partial class DeleteFranchiseStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseStore/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise store calls.")]
    public class ClearFranchiseStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseStoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseStoreModel, FranchiseStoreModel, IFranchiseStoreSearchModel, FranchiseStorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseStores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseStoresForConnect request)
        {
            return await Workflows.FranchiseStores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseStoresDigest request)
        {
            return await Workflows.FranchiseStores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseStores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseStores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseStoreExistsByID request)
        {
            return await Workflows.FranchiseStores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseStoreExistsByKey request)
        {
            return await Workflows.FranchiseStores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseStoreDataAsync,
                    () => Workflows.FranchiseStores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseStoreCache request)
        {
            await ClearCachedFranchiseStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseStores>(string.Empty),
                    UrnId.Create<GetFranchiseStoreByID>(string.Empty),
                    UrnId.Create<GetFranchiseStoreByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseStoreExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseStoreService : FranchiseStoreServiceBase { }
}
