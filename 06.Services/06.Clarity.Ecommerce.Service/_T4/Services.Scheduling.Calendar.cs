// <autogenerated>
// <copyright file="CalendarService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendars.</summary>
    /// <seealso cref="CalendarSearchModel"/>
    /// <seealso cref="IReturn{CalendarPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/Calendars", "GET", Priority = 1,
            Summary = "Use to get a list of calendars")]
    public partial class GetCalendars : CalendarSearchModel, IReturn<CalendarPagedResults> { }

    /// <summary>A ServiceStack Route to get calendars for connect.</summary>
    /// <seealso cref="CalendarSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.View"),
        PublicAPI,
        Route("/Scheduling/CalendarsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendars")]
    public partial class GetCalendarsForConnect : CalendarSearchModel, IReturn<List<CalendarModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendars.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.View"),
        PublicAPI,
        Route("/Scheduling/CalendarsDigest", "GET",
            Summary = "Use to get a hash representing each calendars")]
    public partial class GetCalendarsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/Calendar/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar")]
    public partial class GetCalendarByID : ImplementsIDBase, IReturn<CalendarModel> { }

    /// <summary>A ServiceStack Route to get calendar.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarModel}"/>
    [PublicAPI,
        Route("/Scheduling/Calendar/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar by the custom key")]
    public partial class GetCalendarByKey : ImplementsKeyBase, IReturn<CalendarModel> { }

    /// <summary>A ServiceStack Route to check calendar exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.View"),
        PublicAPI,
        Route("/Scheduling/Calendar/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.View"),
        PublicAPI,
        Route("/Scheduling/Calendar/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar.</summary>
    /// <seealso cref="CalendarModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Calendar/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar.")]
    public partial class CreateCalendar : CalendarModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar.</summary>
    /// <seealso cref="CalendarModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scheduling/Calendar/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar (as needed).")]
    public partial class UpsertCalendar : CalendarModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar.</summary>
    /// <seealso cref="CalendarModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Calendar/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar.")]
    public partial class UpdateCalendar : CalendarModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Calendar/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar from the system [Soft-Delete]")]
    public partial class DeactivateCalendarByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Deactivate"),
        PublicAPI,
        Route("/Scheduling/Calendar/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar from the system [Soft-Delete]")]
    public partial class DeactivateCalendarByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Calendar/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Reactivate"),
        PublicAPI,
        Route("/Scheduling/Calendar/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Calendar/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar from the system [Hard-Delete]")]
    public partial class DeleteCalendarByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Calendar.Delete"),
        PublicAPI,
        Route("/Scheduling/Calendar/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar from the system [Hard-Delete]")]
    public partial class DeleteCalendarByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/Calendar/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar calls.")]
    public class ClearCalendarCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendars"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendars request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarModel, CalendarModel, ICalendarSearchModel, CalendarPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Calendars)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarsForConnect request)
        {
            return await Workflows.Calendars.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarsDigest request)
        {
            return await Workflows.Calendars.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Calendars, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Calendars, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarExistsByID request)
        {
            return await Workflows.Calendars.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarExistsByKey request)
        {
            return await Workflows.Calendars.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendar"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendar request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendar"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendar request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendar"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendar request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarDataAsync,
                    () => Workflows.Calendars.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarCache request)
        {
            await ClearCachedCalendarDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendars>(string.Empty),
                    UrnId.Create<GetCalendarByID>(string.Empty),
                    UrnId.Create<GetCalendarByKey>(string.Empty),
                    UrnId.Create<CheckCalendarExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarService : CalendarServiceBase { }
}
