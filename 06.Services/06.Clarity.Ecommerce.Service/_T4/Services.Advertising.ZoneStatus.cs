// <autogenerated>
// <copyright file="ZoneStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the zone status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of zone statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{ZoneStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/ZoneStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of zone statuses")]
    public partial class GetZoneStatuses : StatusSearchModel, IReturn<ZoneStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get zone statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.View"),
        PublicAPI,
        Route("/Advertising/ZoneStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all zone statuses")]
    public partial class GetZoneStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all zone statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.View"),
        PublicAPI,
        Route("/Advertising/ZoneStatusesDigest", "GET",
            Summary = "Use to get a hash representing each zone statuses")]
    public partial class GetZoneStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get zone status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/ZoneStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific zone status")]
    public partial class GetZoneStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get zone status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Advertising/ZoneStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific zone status by the custom key")]
    public partial class GetZoneStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get zone status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Advertising/ZoneStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific zone status by the name")]
    public partial class GetZoneStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get zone status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Advertising/ZoneStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific zone status by the name")]
    public partial class GetZoneStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check zone status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.View"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zone status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.View"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zone status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.View"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zone status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.View"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create zone status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new zone status.")]
    public partial class CreateZoneStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert zone status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/ZoneStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing zone status (as needed).")]
    public partial class UpsertZoneStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update zone status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing zone status.")]
    public partial class UpdateZoneStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate zone status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific zone status from the system [Soft-Delete]")]
    public partial class DeactivateZoneStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate zone status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Deactivate"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific zone status from the system [Soft-Delete]")]
    public partial class DeactivateZoneStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate zone status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific zone status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateZoneStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate zone status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Reactivate"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific zone status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateZoneStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete zone status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific zone status from the system [Hard-Delete]")]
    public partial class DeleteZoneStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete zone status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneStatus.Delete"),
        PublicAPI,
        Route("/Advertising/ZoneStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific zone status from the system [Hard-Delete]")]
    public partial class DeleteZoneStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear zone status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/ZoneStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all zone status calls.")]
    public class ClearZoneStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ZoneStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetZoneStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, ZoneStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ZoneStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetZoneStatusesForConnect request)
        {
            return await Workflows.ZoneStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneStatusesDigest request)
        {
            return await Workflows.ZoneStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetZoneStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ZoneStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ZoneStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ZoneStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ZoneStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckZoneStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneStatusExistsByID request)
        {
            return await Workflows.ZoneStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZoneStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneStatusExistsByKey request)
        {
            return await Workflows.ZoneStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZoneStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneStatusExistsByName request)
        {
            return await Workflows.ZoneStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZoneStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneStatusExistsByDisplayName request)
        {
            return await Workflows.ZoneStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertZoneStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertZoneStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateZoneStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateZoneStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateZoneStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateZoneStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateZoneStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateZoneStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateZoneStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateZoneStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateZoneStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateZoneStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateZoneStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateZoneStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteZoneStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteZoneStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteZoneStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteZoneStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneStatusDataAsync,
                    () => Workflows.ZoneStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearZoneStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearZoneStatusCache request)
        {
            await ClearCachedZoneStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedZoneStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetZoneStatuses>(string.Empty),
                    UrnId.Create<GetZoneStatusByID>(string.Empty),
                    UrnId.Create<GetZoneStatusByKey>(string.Empty),
                    UrnId.Create<GetZoneStatusByName>(string.Empty),
                    UrnId.Create<CheckZoneStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckZoneStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckZoneStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckZoneStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ZoneStatusService : ZoneStatusServiceBase { }
}
