// <autogenerated>
// <copyright file="NoteTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the note type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of note types.</summary>
    /// <seealso cref="NoteTypeSearchModel"/>
    /// <seealso cref="IReturn{NoteTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/NoteTypes", "GET", Priority = 1,
            Summary = "Use to get a list of note types")]
    public partial class GetNoteTypes : NoteTypeSearchModel, IReturn<NoteTypePagedResults> { }

    /// <summary>A ServiceStack Route to get note types for connect.</summary>
    /// <seealso cref="NoteTypeSearchModel"/>
    /// <seealso cref="IReturn{List{NoteTypeModel}}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.View"),
        PublicAPI,
        Route("/Structure/NoteTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all note types")]
    public partial class GetNoteTypesForConnect : NoteTypeSearchModel, IReturn<List<NoteTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all note types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.View"),
        PublicAPI,
        Route("/Structure/NoteTypesDigest", "GET",
            Summary = "Use to get a hash representing each note types")]
    public partial class GetNoteTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get note type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{NoteTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/NoteType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific note type")]
    public partial class GetNoteTypeByID : ImplementsIDBase, IReturn<NoteTypeModel> { }

    /// <summary>A ServiceStack Route to get note type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{NoteTypeModel}"/>
    [PublicAPI,
        Route("/Structure/NoteType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific note type by the custom key")]
    public partial class GetNoteTypeByKey : ImplementsKeyBase, IReturn<NoteTypeModel> { }

    /// <summary>A ServiceStack Route to get note type.</summary>
    /// <seealso cref="IReturn{NoteTypeModel}"/>
    [PublicAPI,
        Route("/Structure/NoteType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific note type by the name")]
    public partial class GetNoteTypeByName : ImplementsNameBase, IReturn<NoteTypeModel> { }

    /// <summary>A ServiceStack Route to get note type.</summary>
    /// <seealso cref="IReturn{NoteTypeModel}"/>
    [PublicAPI,
        Route("/Structure/NoteType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific note type by the name")]
    public partial class GetNoteTypeByDisplayName : ImplementsDisplayNameBase, IReturn<NoteTypeModel> { }

    /// <summary>A ServiceStack Route to check note type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.View"),
        PublicAPI,
        Route("/Structure/NoteType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckNoteTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check note type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.View"),
        PublicAPI,
        Route("/Structure/NoteType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckNoteTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check note type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.View"),
        PublicAPI,
        Route("/Structure/NoteType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckNoteTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check note type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.View"),
        PublicAPI,
        Route("/Structure/NoteType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckNoteTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create note type.</summary>
    /// <seealso cref="NoteTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/NoteType/Create", "POST", Priority = 1,
            Summary = "Use to create a new note type.")]
    public partial class CreateNoteType : NoteTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert note type.</summary>
    /// <seealso cref="NoteTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/NoteType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing note type (as needed).")]
    public partial class UpsertNoteType : NoteTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update note type.</summary>
    /// <seealso cref="NoteTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/NoteType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing note type.")]
    public partial class UpdateNoteType : NoteTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate note type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/NoteType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific note type from the system [Soft-Delete]")]
    public partial class DeactivateNoteTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate note type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Deactivate"),
        PublicAPI,
        Route("/Structure/NoteType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific note type from the system [Soft-Delete]")]
    public partial class DeactivateNoteTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate note type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/NoteType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific note type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateNoteTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate note type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Reactivate"),
        PublicAPI,
        Route("/Structure/NoteType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific note type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateNoteTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete note type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/NoteType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific note type from the system [Hard-Delete]")]
    public partial class DeleteNoteTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete note type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.NoteType.Delete"),
        PublicAPI,
        Route("/Structure/NoteType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific note type from the system [Hard-Delete]")]
    public partial class DeleteNoteTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear note type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/NoteType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all note type calls.")]
    public class ClearNoteTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class NoteTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetNoteTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<INoteTypeModel, NoteTypeModel, INoteTypeSearchModel, NoteTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.NoteTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNoteTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetNoteTypesForConnect request)
        {
            return await Workflows.NoteTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNoteTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteTypesDigest request)
        {
            return await Workflows.NoteTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetNoteTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.NoteTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNoteTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.NoteTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNoteTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.NoteTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetNoteTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetNoteTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.NoteTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckNoteTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckNoteTypeExistsByID request)
        {
            return await Workflows.NoteTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckNoteTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckNoteTypeExistsByKey request)
        {
            return await Workflows.NoteTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckNoteTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckNoteTypeExistsByName request)
        {
            return await Workflows.NoteTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckNoteTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckNoteTypeExistsByDisplayName request)
        {
            return await Workflows.NoteTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertNoteType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertNoteType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateNoteType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateNoteType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateNoteType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateNoteType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateNoteTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateNoteTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateNoteTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateNoteTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateNoteTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateNoteTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateNoteTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateNoteTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteNoteTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteNoteTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteNoteTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteNoteTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedNoteTypeDataAsync,
                    () => Workflows.NoteTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearNoteTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearNoteTypeCache request)
        {
            await ClearCachedNoteTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedNoteTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetNoteTypes>(string.Empty),
                    UrnId.Create<GetNoteTypeByID>(string.Empty),
                    UrnId.Create<GetNoteTypeByKey>(string.Empty),
                    UrnId.Create<GetNoteTypeByName>(string.Empty),
                    UrnId.Create<CheckNoteTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckNoteTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckNoteTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckNoteTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class NoteTypeService : NoteTypeServiceBase { }
}
