// <autogenerated>
// <copyright file="SampleRequestItemService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request item service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample request items.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestItemPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestItems", "GET", Priority = 1,
            Summary = "Use to get a list of sample request items")]
    public partial class GetSampleRequestItems : SalesItemBaseSearchModel, IReturn<SampleRequestItemPagedResults> { }

    /// <summary>A ServiceStack Route to get sample request items for connect.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemBaseModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestItemsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample request items")]
    public partial class GetSampleRequestItemsForConnect : SalesItemBaseSearchModel, IReturn<List<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample request items.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestItemsDigest", "GET",
            Summary = "Use to get a hash representing each sample request items")]
    public partial class GetSampleRequestItemsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestItem/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request item")]
    public partial class GetSampleRequestItemByID : ImplementsIDBase, IReturn<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sample request item.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestItem/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request item by the custom key")]
    public partial class GetSampleRequestItemByKey : ImplementsKeyBase, IReturn<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sample request item.</summary>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestItem/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sample request item by the name")]
    public partial class GetSampleRequestItemByName : ImplementsNameBase, IReturn<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to check sample request item exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestItemExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request item exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestItemExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request item exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestItemExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request item.")]
    public partial class CreateSampleRequestItem : SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request item (as needed).")]
    public partial class UpsertSampleRequestItem : SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request item.")]
    public partial class UpdateSampleRequestItem : SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request item from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request item from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request item from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestItem.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequestItem/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request item from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request item cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestItem/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request item calls.")]
    public class ClearSampleRequestItemCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestItemServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequestItems"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestItems request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemBaseModel<IAppliedSampleRequestItemDiscountModel>, SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>, ISalesItemBaseSearchModel, SampleRequestItemPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequestItems)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestItemsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestItemsForConnect request)
        {
            return await Workflows.SampleRequestItems.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestItemsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestItemsDigest request)
        {
            return await Workflows.SampleRequestItems.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestItemByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequestItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestItemByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequestItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestItemByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestItemByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SampleRequestItems, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestItemExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestItemExistsByID request)
        {
            return await Workflows.SampleRequestItems.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestItemExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestItemExistsByKey request)
        {
            return await Workflows.SampleRequestItems.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestItemExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestItemExistsByName request)
        {
            return await Workflows.SampleRequestItems.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequestItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequestItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequestItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequestItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequestItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequestItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestItemDataAsync,
                    () => Workflows.SampleRequestItems.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestItemCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestItemCache request)
        {
            await ClearCachedSampleRequestItemDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestItemDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequestItems>(string.Empty),
                    UrnId.Create<GetSampleRequestItemByID>(string.Empty),
                    UrnId.Create<GetSampleRequestItemByKey>(string.Empty),
                    UrnId.Create<GetSampleRequestItemByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestItemExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestItemExistsByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestItemExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestItemService : SampleRequestItemServiceBase { }
}
