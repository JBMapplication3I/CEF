// <autogenerated>
// <copyright file="AppliedSalesQuoteDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sales quote discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sales quote discounts.</summary>
    /// <seealso cref="AppliedSalesQuoteDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSalesQuoteDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesQuoteDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sales quote discounts")]
    public partial class GetAppliedSalesQuoteDiscounts : AppliedSalesQuoteDiscountSearchModel, IReturn<AppliedSalesQuoteDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sales quote discounts for connect.</summary>
    /// <seealso cref="AppliedSalesQuoteDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSalesQuoteDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sales quote discounts")]
    public partial class GetAppliedSalesQuoteDiscountsForConnect : AppliedSalesQuoteDiscountSearchModel, IReturn<List<AppliedSalesQuoteDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sales quote discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sales quote discounts")]
    public partial class GetAppliedSalesQuoteDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sales quote discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSalesQuoteDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesQuoteDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales quote discount")]
    public partial class GetAppliedSalesQuoteDiscountByID : ImplementsIDBase, IReturn<AppliedSalesQuoteDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sales quote discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSalesQuoteDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales quote discount by the custom key")]
    public partial class GetAppliedSalesQuoteDiscountByKey : ImplementsKeyBase, IReturn<AppliedSalesQuoteDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sales quote discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesQuoteDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sales quote discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesQuoteDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sales quote discount.</summary>
    /// <seealso cref="AppliedSalesQuoteDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sales quote discount.")]
    public partial class CreateAppliedSalesQuoteDiscount : AppliedSalesQuoteDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sales quote discount.</summary>
    /// <seealso cref="AppliedSalesQuoteDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sales quote discount (as needed).")]
    public partial class UpsertAppliedSalesQuoteDiscount : AppliedSalesQuoteDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sales quote discount.</summary>
    /// <seealso cref="AppliedSalesQuoteDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sales quote discount.")]
    public partial class UpdateAppliedSalesQuoteDiscount : AppliedSalesQuoteDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sales quote discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales quote discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesQuoteDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sales quote discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales quote discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesQuoteDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales quote discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales quote discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesQuoteDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales quote discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales quote discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesQuoteDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales quote discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sales quote discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesQuoteDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales quote discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sales quote discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesQuoteDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sales quote discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesQuoteDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sales quote discount calls.")]
    public class ClearAppliedSalesQuoteDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSalesQuoteDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSalesQuoteDiscountModel, AppliedSalesQuoteDiscountModel, IAppliedSalesQuoteDiscountSearchModel, AppliedSalesQuoteDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSalesQuoteDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSalesQuoteDiscountsForConnect request)
        {
            return await Workflows.AppliedSalesQuoteDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteDiscountsDigest request)
        {
            return await Workflows.AppliedSalesQuoteDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSalesQuoteDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSalesQuoteDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSalesQuoteDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesQuoteDiscountExistsByID request)
        {
            return await Workflows.AppliedSalesQuoteDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSalesQuoteDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesQuoteDiscountExistsByKey request)
        {
            return await Workflows.AppliedSalesQuoteDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSalesQuoteDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSalesQuoteDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSalesQuoteDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSalesQuoteDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSalesQuoteDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSalesQuoteDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesQuoteDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesQuoteDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesQuoteDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesQuoteDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesQuoteDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesQuoteDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesQuoteDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesQuoteDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesQuoteDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesQuoteDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesQuoteDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesQuoteDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSalesQuoteDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSalesQuoteDiscountCache request)
        {
            await ClearCachedAppliedSalesQuoteDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSalesQuoteDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSalesQuoteDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSalesQuoteDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSalesQuoteDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSalesQuoteDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSalesQuoteDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSalesQuoteDiscountService : AppliedSalesQuoteDiscountServiceBase { }
}
