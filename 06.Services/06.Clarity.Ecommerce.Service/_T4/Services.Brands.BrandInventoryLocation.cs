// <autogenerated>
// <copyright file="BrandInventoryLocationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand inventory location service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand inventory locations.</summary>
    /// <seealso cref="BrandInventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{BrandInventoryLocationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandInventoryLocations", "GET", Priority = 1,
            Summary = "Use to get a list of brand inventory locations")]
    public partial class GetBrandInventoryLocations : BrandInventoryLocationSearchModel, IReturn<BrandInventoryLocationPagedResults> { }

    /// <summary>A ServiceStack Route to get brand inventory locations for connect.</summary>
    /// <seealso cref="BrandInventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{List{BrandInventoryLocationModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand inventory locations")]
    public partial class GetBrandInventoryLocationsForConnect : BrandInventoryLocationSearchModel, IReturn<List<BrandInventoryLocationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand inventory locations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocationsDigest", "GET",
            Summary = "Use to get a hash representing each brand inventory locations")]
    public partial class GetBrandInventoryLocationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandInventoryLocationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandInventoryLocation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand inventory location")]
    public partial class GetBrandInventoryLocationByID : ImplementsIDBase, IReturn<BrandInventoryLocationModel> { }

    /// <summary>A ServiceStack Route to get brand inventory location.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandInventoryLocationModel}"/>
    [PublicAPI,
        Route("/Brands/BrandInventoryLocation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand inventory location by the custom key")]
    public partial class GetBrandInventoryLocationByKey : ImplementsKeyBase, IReturn<BrandInventoryLocationModel> { }

    /// <summary>A ServiceStack Route to check brand inventory location exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandInventoryLocationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand inventory location exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.View"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandInventoryLocationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand inventory location.</summary>
    /// <seealso cref="BrandInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand inventory location.")]
    public partial class CreateBrandInventoryLocation : BrandInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand inventory location.</summary>
    /// <seealso cref="BrandInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand inventory location (as needed).")]
    public partial class UpsertBrandInventoryLocation : BrandInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand inventory location.</summary>
    /// <seealso cref="BrandInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand inventory location.")]
    public partial class UpdateBrandInventoryLocation : BrandInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand inventory location from the system [Soft-Delete]")]
    public partial class DeactivateBrandInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand inventory location from the system [Soft-Delete]")]
    public partial class DeactivateBrandInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand inventory location from the system [Hard-Delete]")]
    public partial class DeleteBrandInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandInventoryLocation.Delete"),
        PublicAPI,
        Route("/Brands/BrandInventoryLocation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand inventory location from the system [Hard-Delete]")]
    public partial class DeleteBrandInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand inventory location cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandInventoryLocation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand inventory location calls.")]
    public class ClearBrandInventoryLocationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandInventoryLocationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandInventoryLocations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandInventoryLocationModel, BrandInventoryLocationModel, IBrandInventoryLocationSearchModel, BrandInventoryLocationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandInventoryLocations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandInventoryLocationsForConnect request)
        {
            return await Workflows.BrandInventoryLocations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationsDigest request)
        {
            return await Workflows.BrandInventoryLocations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandInventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandInventoryLocationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandInventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandInventoryLocationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandInventoryLocationExistsByID request)
        {
            return await Workflows.BrandInventoryLocations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandInventoryLocationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandInventoryLocationExistsByKey request)
        {
            return await Workflows.BrandInventoryLocations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandInventoryLocationDataAsync,
                    () => Workflows.BrandInventoryLocations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandInventoryLocationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandInventoryLocationCache request)
        {
            await ClearCachedBrandInventoryLocationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandInventoryLocationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandInventoryLocations>(string.Empty),
                    UrnId.Create<GetBrandInventoryLocationByID>(string.Empty),
                    UrnId.Create<GetBrandInventoryLocationByKey>(string.Empty),
                    UrnId.Create<CheckBrandInventoryLocationExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandInventoryLocationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandInventoryLocationService : BrandInventoryLocationServiceBase { }
}
