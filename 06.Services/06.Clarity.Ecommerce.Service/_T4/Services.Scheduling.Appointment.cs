// <autogenerated>
// <copyright file="AppointmentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the appointment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of appointments.</summary>
    /// <seealso cref="AppointmentSearchModel"/>
    /// <seealso cref="IReturn{AppointmentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/Appointments", "GET", Priority = 1,
            Summary = "Use to get a list of appointments")]
    public partial class GetAppointments : AppointmentSearchModel, IReturn<AppointmentPagedResults> { }

    /// <summary>A ServiceStack Route to get appointments for connect.</summary>
    /// <seealso cref="AppointmentSearchModel"/>
    /// <seealso cref="IReturn{List{AppointmentModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all appointments")]
    public partial class GetAppointmentsForConnect : AppointmentSearchModel, IReturn<List<AppointmentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all appointments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentsDigest", "GET",
            Summary = "Use to get a hash representing each appointments")]
    public partial class GetAppointmentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppointmentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/Appointment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific appointment")]
    public partial class GetAppointmentByID : ImplementsIDBase, IReturn<AppointmentModel> { }

    /// <summary>A ServiceStack Route to get appointment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppointmentModel}"/>
    [PublicAPI,
        Route("/Scheduling/Appointment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific appointment by the custom key")]
    public partial class GetAppointmentByKey : ImplementsKeyBase, IReturn<AppointmentModel> { }

    /// <summary>A ServiceStack Route to get appointment.</summary>
    /// <seealso cref="IReturn{AppointmentModel}"/>
    [PublicAPI,
        Route("/Scheduling/Appointment/Name", "GET", Priority = 1,
            Summary = "Use to get a specific appointment by the name")]
    public partial class GetAppointmentByName : ImplementsNameBase, IReturn<AppointmentModel> { }

    /// <summary>A ServiceStack Route to check appointment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.View"),
        PublicAPI,
        Route("/Scheduling/Appointment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.View"),
        PublicAPI,
        Route("/Scheduling/Appointment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.View"),
        PublicAPI,
        Route("/Scheduling/Appointment/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create appointment.</summary>
    /// <seealso cref="AppointmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Appointment/Create", "POST", Priority = 1,
            Summary = "Use to create a new appointment.")]
    public partial class CreateAppointment : AppointmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert appointment.</summary>
    /// <seealso cref="AppointmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scheduling/Appointment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing appointment (as needed).")]
    public partial class UpsertAppointment : AppointmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update appointment.</summary>
    /// <seealso cref="AppointmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Appointment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing appointment.")]
    public partial class UpdateAppointment : AppointmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Appointment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific appointment from the system [Soft-Delete]")]
    public partial class DeactivateAppointmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate appointment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Deactivate"),
        PublicAPI,
        Route("/Scheduling/Appointment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific appointment from the system [Soft-Delete]")]
    public partial class DeactivateAppointmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Appointment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific appointment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppointmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate appointment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Reactivate"),
        PublicAPI,
        Route("/Scheduling/Appointment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific appointment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppointmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/Appointment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific appointment from the system [Hard-Delete]")]
    public partial class DeleteAppointmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete appointment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.Appointment.Delete"),
        PublicAPI,
        Route("/Scheduling/Appointment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific appointment from the system [Hard-Delete]")]
    public partial class DeleteAppointmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear appointment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/Appointment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all appointment calls.")]
    public class ClearAppointmentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppointmentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppointments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppointmentModel, AppointmentModel, IAppointmentSearchModel, AppointmentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Appointments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppointmentsForConnect request)
        {
            return await Workflows.Appointments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentsDigest request)
        {
            return await Workflows.Appointments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Appointments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Appointments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Appointments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppointmentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentExistsByID request)
        {
            return await Workflows.Appointments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentExistsByKey request)
        {
            return await Workflows.Appointments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentExistsByName request)
        {
            return await Workflows.Appointments.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppointment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppointment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppointment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppointment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppointment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppointment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppointmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppointmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppointmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppointmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppointmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppointmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentDataAsync,
                    () => Workflows.Appointments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppointmentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppointmentCache request)
        {
            await ClearCachedAppointmentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppointmentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppointments>(string.Empty),
                    UrnId.Create<GetAppointmentByID>(string.Empty),
                    UrnId.Create<GetAppointmentByKey>(string.Empty),
                    UrnId.Create<GetAppointmentByName>(string.Empty),
                    UrnId.Create<CheckAppointmentExistsByID>(string.Empty),
                    UrnId.Create<CheckAppointmentExistsByKey>(string.Empty),
                    UrnId.Create<CheckAppointmentExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppointmentService : AppointmentServiceBase { }
}
