// <autogenerated>
// <copyright file="BidService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the bid service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of bids.</summary>
    /// <seealso cref="BidSearchModel"/>
    /// <seealso cref="IReturn{BidPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Bids", "GET", Priority = 1,
            Summary = "Use to get a list of bids")]
    public partial class GetBids : BidSearchModel, IReturn<BidPagedResults> { }

    /// <summary>A ServiceStack Route to get bids for connect.</summary>
    /// <seealso cref="BidSearchModel"/>
    /// <seealso cref="IReturn{List{BidModel}}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.View"),
        PublicAPI,
        Route("/Auctions/BidsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all bids")]
    public partial class GetBidsForConnect : BidSearchModel, IReturn<List<BidModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all bids.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.View"),
        PublicAPI,
        Route("/Auctions/BidsDigest", "GET",
            Summary = "Use to get a hash representing each bids")]
    public partial class GetBidsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get bid.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BidModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Bid/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific bid")]
    public partial class GetBidByID : ImplementsIDBase, IReturn<BidModel> { }

    /// <summary>A ServiceStack Route to get bid.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BidModel}"/>
    [PublicAPI,
        Route("/Auctions/Bid/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific bid by the custom key")]
    public partial class GetBidByKey : ImplementsKeyBase, IReturn<BidModel> { }

    /// <summary>A ServiceStack Route to check bid exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.View"),
        PublicAPI,
        Route("/Auctions/Bid/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBidExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check bid exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.View"),
        PublicAPI,
        Route("/Auctions/Bid/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBidExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create bid.</summary>
    /// <seealso cref="BidModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Bid/Create", "POST", Priority = 1,
            Summary = "Use to create a new bid.")]
    public partial class CreateBid : BidModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert bid.</summary>
    /// <seealso cref="BidModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/Bid/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing bid (as needed).")]
    public partial class UpsertBid : BidModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update bid.</summary>
    /// <seealso cref="BidModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Bid/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing bid.")]
    public partial class UpdateBid : BidModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate bid.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Bid/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific bid from the system [Soft-Delete]")]
    public partial class DeactivateBidByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate bid by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Deactivate"),
        PublicAPI,
        Route("/Auctions/Bid/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific bid from the system [Soft-Delete]")]
    public partial class DeactivateBidByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate bid.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Bid/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific bid from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBidByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate bid by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Reactivate"),
        PublicAPI,
        Route("/Auctions/Bid/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific bid from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBidByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete bid.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Bid/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific bid from the system [Hard-Delete]")]
    public partial class DeleteBidByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete bid by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Bid.Delete"),
        PublicAPI,
        Route("/Auctions/Bid/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific bid from the system [Hard-Delete]")]
    public partial class DeleteBidByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear bid cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Bid/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all bid calls.")]
    public class ClearBidCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BidServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBids"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBids request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBidModel, BidModel, IBidSearchModel, BidPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Bids)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBidsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBidsForConnect request)
        {
            return await Workflows.Bids.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBidsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBidsDigest request)
        {
            return await Workflows.Bids.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBidByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBidByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Bids, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBidByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBidByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Bids, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBidExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBidExistsByID request)
        {
            return await Workflows.Bids.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBidExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBidExistsByKey request)
        {
            return await Workflows.Bids.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBid"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBid request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBid"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBid request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBid"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBid request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBidByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBidByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBidByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBidByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBidByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBidByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBidByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBidByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBidByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBidByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBidByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBidByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBidDataAsync,
                    () => Workflows.Bids.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBidCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBidCache request)
        {
            await ClearCachedBidDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBidDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBids>(string.Empty),
                    UrnId.Create<GetBidByID>(string.Empty),
                    UrnId.Create<GetBidByKey>(string.Empty),
                    UrnId.Create<CheckBidExistsByID>(string.Empty),
                    UrnId.Create<CheckBidExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BidService : BidServiceBase { }
}
