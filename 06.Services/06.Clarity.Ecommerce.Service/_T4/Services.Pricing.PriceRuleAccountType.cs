// <autogenerated>
// <copyright file="PriceRuleAccountTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule account type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule account types.</summary>
    /// <seealso cref="PriceRuleAccountTypeSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleAccountTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleAccountTypes", "GET", Priority = 1,
            Summary = "Use to get a list of price rule account types")]
    public partial class GetPriceRuleAccountTypes : PriceRuleAccountTypeSearchModel, IReturn<PriceRuleAccountTypePagedResults> { }

    /// <summary>A ServiceStack Route to get price rule account types for connect.</summary>
    /// <seealso cref="PriceRuleAccountTypeSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleAccountTypeModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule account types")]
    public partial class GetPriceRuleAccountTypesForConnect : PriceRuleAccountTypeSearchModel, IReturn<List<PriceRuleAccountTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule account types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountTypesDigest", "GET",
            Summary = "Use to get a hash representing each price rule account types")]
    public partial class GetPriceRuleAccountTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleAccountTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleAccountType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule account type")]
    public partial class GetPriceRuleAccountTypeByID : ImplementsIDBase, IReturn<PriceRuleAccountTypeModel> { }

    /// <summary>A ServiceStack Route to get price rule account type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleAccountTypeModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule account type by the custom key")]
    public partial class GetPriceRuleAccountTypeByKey : ImplementsKeyBase, IReturn<PriceRuleAccountTypeModel> { }

    /// <summary>A ServiceStack Route to check price rule account type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleAccountTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule account type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleAccountTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule account type.</summary>
    /// <seealso cref="PriceRuleAccountTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule account type.")]
    public partial class CreatePriceRuleAccountType : PriceRuleAccountTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule account type.</summary>
    /// <seealso cref="PriceRuleAccountTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule account type (as needed).")]
    public partial class UpsertPriceRuleAccountType : PriceRuleAccountTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule account type.</summary>
    /// <seealso cref="PriceRuleAccountTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule account type.")]
    public partial class UpdatePriceRuleAccountType : PriceRuleAccountTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule account type from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleAccountTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule account type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule account type from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleAccountTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule account type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleAccountTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule account type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule account type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleAccountTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule account type from the system [Hard-Delete]")]
    public partial class DeletePriceRuleAccountTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule account type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccountType.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule account type from the system [Hard-Delete]")]
    public partial class DeletePriceRuleAccountTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule account type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleAccountType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule account type calls.")]
    public class ClearPriceRuleAccountTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleAccountTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleAccountTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleAccountTypeModel, PriceRuleAccountTypeModel, IPriceRuleAccountTypeSearchModel, PriceRuleAccountTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleAccountTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleAccountTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleAccountTypesForConnect request)
        {
            return await Workflows.PriceRuleAccountTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleAccountTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountTypesDigest request)
        {
            return await Workflows.PriceRuleAccountTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleAccountTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleAccountTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleAccountTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleAccountTypeExistsByID request)
        {
            return await Workflows.PriceRuleAccountTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleAccountTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleAccountTypeExistsByKey request)
        {
            return await Workflows.PriceRuleAccountTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleAccountType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleAccountType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleAccountType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleAccountType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleAccountType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleAccountType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleAccountTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleAccountTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleAccountTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleAccountTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleAccountTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleAccountTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountTypeDataAsync,
                    () => Workflows.PriceRuleAccountTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleAccountTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleAccountTypeCache request)
        {
            await ClearCachedPriceRuleAccountTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleAccountTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleAccountTypes>(string.Empty),
                    UrnId.Create<GetPriceRuleAccountTypeByID>(string.Empty),
                    UrnId.Create<GetPriceRuleAccountTypeByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleAccountTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleAccountTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleAccountTypeService : PriceRuleAccountTypeServiceBase { }
}
