// <autogenerated>
// <copyright file="StoreUserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store users.</summary>
    /// <seealso cref="StoreUserSearchModel"/>
    /// <seealso cref="IReturn{StoreUserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreUsers", "GET", Priority = 1,
            Summary = "Use to get a list of store users")]
    public partial class GetStoreUsers : StoreUserSearchModel, IReturn<StoreUserPagedResults> { }

    /// <summary>A ServiceStack Route to get store users for connect.</summary>
    /// <seealso cref="StoreUserSearchModel"/>
    /// <seealso cref="IReturn{List{StoreUserModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.View"),
        PublicAPI,
        Route("/Stores/StoreUsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store users")]
    public partial class GetStoreUsersForConnect : StoreUserSearchModel, IReturn<List<StoreUserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.View"),
        PublicAPI,
        Route("/Stores/StoreUsersDigest", "GET",
            Summary = "Use to get a hash representing each store users")]
    public partial class GetStoreUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreUserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreUser/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store user")]
    public partial class GetStoreUserByID : ImplementsIDBase, IReturn<StoreUserModel> { }

    /// <summary>A ServiceStack Route to get store user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreUserModel}"/>
    [PublicAPI,
        Route("/Stores/StoreUser/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store user by the custom key")]
    public partial class GetStoreUserByKey : ImplementsKeyBase, IReturn<StoreUserModel> { }

    /// <summary>A ServiceStack Route to check store user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.View"),
        PublicAPI,
        Route("/Stores/StoreUser/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.View"),
        PublicAPI,
        Route("/Stores/StoreUser/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store user.</summary>
    /// <seealso cref="StoreUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreUser/Create", "POST", Priority = 1,
            Summary = "Use to create a new store user.")]
    public partial class CreateStoreUser : StoreUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store user.</summary>
    /// <seealso cref="StoreUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreUser/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store user (as needed).")]
    public partial class UpsertStoreUser : StoreUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store user.</summary>
    /// <seealso cref="StoreUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreUser/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store user.")]
    public partial class UpdateStoreUser : StoreUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreUser/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store user from the system [Soft-Delete]")]
    public partial class DeactivateStoreUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreUser/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store user from the system [Soft-Delete]")]
    public partial class DeactivateStoreUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreUser/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreUser/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreUser/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store user from the system [Hard-Delete]")]
    public partial class DeleteStoreUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreUser.Delete"),
        PublicAPI,
        Route("/Stores/StoreUser/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store user from the system [Hard-Delete]")]
    public partial class DeleteStoreUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreUser/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store user calls.")]
    public class ClearStoreUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreUserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreUserModel, StoreUserModel, IStoreUserSearchModel, StoreUserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreUsers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreUsersForConnect request)
        {
            return await Workflows.StoreUsers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreUsersDigest request)
        {
            return await Workflows.StoreUsers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreUsers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreUsers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreUserExistsByID request)
        {
            return await Workflows.StoreUsers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreUserExistsByKey request)
        {
            return await Workflows.StoreUsers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreUserDataAsync,
                    () => Workflows.StoreUsers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreUserCache request)
        {
            await ClearCachedStoreUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreUsers>(string.Empty),
                    UrnId.Create<GetStoreUserByID>(string.Empty),
                    UrnId.Create<GetStoreUserByKey>(string.Empty),
                    UrnId.Create<CheckStoreUserExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreUserService : StoreUserServiceBase { }
}
