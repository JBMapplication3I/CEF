// <autogenerated>
// <copyright file="QuestionTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the question type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of question types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{QuestionTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/QuestionTypes", "GET", Priority = 1,
            Summary = "Use to get a list of question types")]
    public partial class GetQuestionTypes : TypeSearchModel, IReturn<QuestionTypePagedResults> { }

    /// <summary>A ServiceStack Route to get question types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all question types")]
    public partial class GetQuestionTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all question types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionTypesDigest", "GET",
            Summary = "Use to get a hash representing each question types")]
    public partial class GetQuestionTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get question type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/QuestionType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific question type")]
    public partial class GetQuestionTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get question type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Questionnaire/QuestionType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific question type by the custom key")]
    public partial class GetQuestionTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get question type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Questionnaire/QuestionType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific question type by the name")]
    public partial class GetQuestionTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get question type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Questionnaire/QuestionType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific question type by the name")]
    public partial class GetQuestionTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check question type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check question type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check question type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check question type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create question type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionType/Create", "POST", Priority = 1,
            Summary = "Use to create a new question type.")]
    public partial class CreateQuestionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert question type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Questionnaire/QuestionType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing question type (as needed).")]
    public partial class UpsertQuestionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update question type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing question type.")]
    public partial class UpdateQuestionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate question type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific question type from the system [Soft-Delete]")]
    public partial class DeactivateQuestionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate question type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Deactivate"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific question type from the system [Soft-Delete]")]
    public partial class DeactivateQuestionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate question type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific question type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateQuestionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate question type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Reactivate"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific question type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateQuestionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete question type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific question type from the system [Hard-Delete]")]
    public partial class DeleteQuestionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete question type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionType.Delete"),
        PublicAPI,
        Route("/Questionnaire/QuestionType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific question type from the system [Hard-Delete]")]
    public partial class DeleteQuestionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear question type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/QuestionType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all question type calls.")]
    public class ClearQuestionTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class QuestionTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetQuestionTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, QuestionTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.QuestionTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetQuestionTypesForConnect request)
        {
            return await Workflows.QuestionTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionTypesDigest request)
        {
            return await Workflows.QuestionTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetQuestionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.QuestionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.QuestionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.QuestionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.QuestionTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckQuestionTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionTypeExistsByID request)
        {
            return await Workflows.QuestionTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckQuestionTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionTypeExistsByKey request)
        {
            return await Workflows.QuestionTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckQuestionTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionTypeExistsByName request)
        {
            return await Workflows.QuestionTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckQuestionTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionTypeExistsByDisplayName request)
        {
            return await Workflows.QuestionTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertQuestionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertQuestionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateQuestionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateQuestionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateQuestionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateQuestionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateQuestionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateQuestionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateQuestionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateQuestionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateQuestionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateQuestionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateQuestionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateQuestionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteQuestionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteQuestionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteQuestionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteQuestionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionTypeDataAsync,
                    () => Workflows.QuestionTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearQuestionTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearQuestionTypeCache request)
        {
            await ClearCachedQuestionTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedQuestionTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetQuestionTypes>(string.Empty),
                    UrnId.Create<GetQuestionTypeByID>(string.Empty),
                    UrnId.Create<GetQuestionTypeByKey>(string.Empty),
                    UrnId.Create<GetQuestionTypeByName>(string.Empty),
                    UrnId.Create<CheckQuestionTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckQuestionTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckQuestionTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckQuestionTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class QuestionTypeService : QuestionTypeServiceBase { }
}
