// <autogenerated>
// <copyright file="PriceRuleProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule products.</summary>
    /// <seealso cref="PriceRuleProductSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleProducts", "GET", Priority = 1,
            Summary = "Use to get a list of price rule products")]
    public partial class GetPriceRuleProducts : PriceRuleProductSearchModel, IReturn<PriceRuleProductPagedResults> { }

    /// <summary>A ServiceStack Route to get price rule products for connect.</summary>
    /// <seealso cref="PriceRuleProductSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleProductModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule products")]
    public partial class GetPriceRuleProductsForConnect : PriceRuleProductSearchModel, IReturn<List<PriceRuleProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProductsDigest", "GET",
            Summary = "Use to get a hash representing each price rule products")]
    public partial class GetPriceRuleProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule product")]
    public partial class GetPriceRuleProductByID : ImplementsIDBase, IReturn<PriceRuleProductModel> { }

    /// <summary>A ServiceStack Route to get price rule product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleProductModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule product by the custom key")]
    public partial class GetPriceRuleProductByKey : ImplementsKeyBase, IReturn<PriceRuleProductModel> { }

    /// <summary>A ServiceStack Route to check price rule product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule product.</summary>
    /// <seealso cref="PriceRuleProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule product.")]
    public partial class CreatePriceRuleProduct : PriceRuleProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule product.</summary>
    /// <seealso cref="PriceRuleProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule product (as needed).")]
    public partial class UpsertPriceRuleProduct : PriceRuleProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule product.</summary>
    /// <seealso cref="PriceRuleProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule product.")]
    public partial class UpdatePriceRuleProduct : PriceRuleProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule product from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule product from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule product from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule product from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule product from the system [Hard-Delete]")]
    public partial class DeletePriceRuleProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleProduct.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule product from the system [Hard-Delete]")]
    public partial class DeletePriceRuleProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule product calls.")]
    public class ClearPriceRuleProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleProductModel, PriceRuleProductModel, IPriceRuleProductSearchModel, PriceRuleProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleProductsForConnect request)
        {
            return await Workflows.PriceRuleProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductsDigest request)
        {
            return await Workflows.PriceRuleProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleProductExistsByID request)
        {
            return await Workflows.PriceRuleProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleProductExistsByKey request)
        {
            return await Workflows.PriceRuleProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleProductDataAsync,
                    () => Workflows.PriceRuleProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleProductCache request)
        {
            await ClearCachedPriceRuleProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleProducts>(string.Empty),
                    UrnId.Create<GetPriceRuleProductByID>(string.Empty),
                    UrnId.Create<GetPriceRuleProductByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleProductExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleProductService : PriceRuleProductServiceBase { }
}
