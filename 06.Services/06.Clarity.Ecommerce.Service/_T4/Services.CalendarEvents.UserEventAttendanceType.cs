// <autogenerated>
// <copyright file="UserEventAttendanceTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user event attendance type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user event attendance types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{UserEventAttendanceTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/UserEventAttendanceTypes", "GET", Priority = 1,
            Summary = "Use to get a list of user event attendance types")]
    public partial class GetUserEventAttendanceTypes : TypeSearchModel, IReturn<UserEventAttendanceTypePagedResults> { }

    /// <summary>A ServiceStack Route to get user event attendance types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user event attendance types")]
    public partial class GetUserEventAttendanceTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user event attendance types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceTypesDigest", "GET",
            Summary = "Use to get a hash representing each user event attendance types")]
    public partial class GetUserEventAttendanceTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user event attendance type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/UserEventAttendanceType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user event attendance type")]
    public partial class GetUserEventAttendanceTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get user event attendance type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user event attendance type by the custom key")]
    public partial class GetUserEventAttendanceTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get user event attendance type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific user event attendance type by the name")]
    public partial class GetUserEventAttendanceTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get user event attendance type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific user event attendance type by the name")]
    public partial class GetUserEventAttendanceTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check user event attendance type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserEventAttendanceTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user event attendance type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserEventAttendanceTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user event attendance type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserEventAttendanceTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user event attendance type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserEventAttendanceTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user event attendance type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Create", "POST", Priority = 1,
            Summary = "Use to create a new user event attendance type.")]
    public partial class CreateUserEventAttendanceType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user event attendance type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user event attendance type (as needed).")]
    public partial class UpsertUserEventAttendanceType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user event attendance type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user event attendance type.")]
    public partial class UpdateUserEventAttendanceType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user event attendance type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user event attendance type from the system [Soft-Delete]")]
    public partial class DeactivateUserEventAttendanceTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user event attendance type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user event attendance type from the system [Soft-Delete]")]
    public partial class DeactivateUserEventAttendanceTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user event attendance type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user event attendance type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserEventAttendanceTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user event attendance type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user event attendance type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserEventAttendanceTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user event attendance type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user event attendance type from the system [Hard-Delete]")]
    public partial class DeleteUserEventAttendanceTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user event attendance type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendanceType.Delete"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendanceType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user event attendance type from the system [Hard-Delete]")]
    public partial class DeleteUserEventAttendanceTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user event attendance type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/UserEventAttendanceType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user event attendance type calls.")]
    public class ClearUserEventAttendanceTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserEventAttendanceTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, UserEventAttendanceTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserEventAttendanceTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserEventAttendanceTypesForConnect request)
        {
            return await Workflows.UserEventAttendanceTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceTypesDigest request)
        {
            return await Workflows.UserEventAttendanceTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserEventAttendanceTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserEventAttendanceTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.UserEventAttendanceTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendanceTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.UserEventAttendanceTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserEventAttendanceTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserEventAttendanceTypeExistsByID request)
        {
            return await Workflows.UserEventAttendanceTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserEventAttendanceTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserEventAttendanceTypeExistsByKey request)
        {
            return await Workflows.UserEventAttendanceTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserEventAttendanceTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserEventAttendanceTypeExistsByName request)
        {
            return await Workflows.UserEventAttendanceTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserEventAttendanceTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserEventAttendanceTypeExistsByDisplayName request)
        {
            return await Workflows.UserEventAttendanceTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserEventAttendanceType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserEventAttendanceType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserEventAttendanceType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserEventAttendanceType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserEventAttendanceType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserEventAttendanceType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserEventAttendanceTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserEventAttendanceTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserEventAttendanceTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserEventAttendanceTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserEventAttendanceTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserEventAttendanceTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserEventAttendanceTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserEventAttendanceTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserEventAttendanceTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserEventAttendanceTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserEventAttendanceTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserEventAttendanceTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceTypeDataAsync,
                    () => Workflows.UserEventAttendanceTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserEventAttendanceTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserEventAttendanceTypeCache request)
        {
            await ClearCachedUserEventAttendanceTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserEventAttendanceTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserEventAttendanceTypes>(string.Empty),
                    UrnId.Create<GetUserEventAttendanceTypeByID>(string.Empty),
                    UrnId.Create<GetUserEventAttendanceTypeByKey>(string.Empty),
                    UrnId.Create<GetUserEventAttendanceTypeByName>(string.Empty),
                    UrnId.Create<CheckUserEventAttendanceTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckUserEventAttendanceTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckUserEventAttendanceTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckUserEventAttendanceTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserEventAttendanceTypeService : UserEventAttendanceTypeServiceBase { }
}
