// <autogenerated>
// <copyright file="PriceRuleAccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule accounts.</summary>
    /// <seealso cref="PriceRuleAccountSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleAccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleAccounts", "GET", Priority = 1,
            Summary = "Use to get a list of price rule accounts")]
    public partial class GetPriceRuleAccounts : PriceRuleAccountSearchModel, IReturn<PriceRuleAccountPagedResults> { }

    /// <summary>A ServiceStack Route to get price rule accounts for connect.</summary>
    /// <seealso cref="PriceRuleAccountSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleAccountModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule accounts")]
    public partial class GetPriceRuleAccountsForConnect : PriceRuleAccountSearchModel, IReturn<List<PriceRuleAccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccountsDigest", "GET",
            Summary = "Use to get a hash representing each price rule accounts")]
    public partial class GetPriceRuleAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleAccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleAccount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule account")]
    public partial class GetPriceRuleAccountByID : ImplementsIDBase, IReturn<PriceRuleAccountModel> { }

    /// <summary>A ServiceStack Route to get price rule account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleAccountModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleAccount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule account by the custom key")]
    public partial class GetPriceRuleAccountByKey : ImplementsKeyBase, IReturn<PriceRuleAccountModel> { }

    /// <summary>A ServiceStack Route to check price rule account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule account.</summary>
    /// <seealso cref="PriceRuleAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule account.")]
    public partial class CreatePriceRuleAccount : PriceRuleAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule account.</summary>
    /// <seealso cref="PriceRuleAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule account (as needed).")]
    public partial class UpsertPriceRuleAccount : PriceRuleAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule account.</summary>
    /// <seealso cref="PriceRuleAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule account.")]
    public partial class UpdatePriceRuleAccount : PriceRuleAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule account from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule account from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule account from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule account from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule account from the system [Hard-Delete]")]
    public partial class DeletePriceRuleAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleAccount.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleAccount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule account from the system [Hard-Delete]")]
    public partial class DeletePriceRuleAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleAccount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule account calls.")]
    public class ClearPriceRuleAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleAccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleAccountModel, PriceRuleAccountModel, IPriceRuleAccountSearchModel, PriceRuleAccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleAccounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleAccountsForConnect request)
        {
            return await Workflows.PriceRuleAccounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountsDigest request)
        {
            return await Workflows.PriceRuleAccounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleAccounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleAccounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleAccountExistsByID request)
        {
            return await Workflows.PriceRuleAccounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleAccountExistsByKey request)
        {
            return await Workflows.PriceRuleAccounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleAccountDataAsync,
                    () => Workflows.PriceRuleAccounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleAccountCache request)
        {
            await ClearCachedPriceRuleAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleAccounts>(string.Empty),
                    UrnId.Create<GetPriceRuleAccountByID>(string.Empty),
                    UrnId.Create<GetPriceRuleAccountByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleAccountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleAccountService : PriceRuleAccountServiceBase { }
}
