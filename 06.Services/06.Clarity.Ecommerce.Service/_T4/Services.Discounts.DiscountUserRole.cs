// <autogenerated>
// <copyright file="DiscountUserRoleService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount user role service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount user roles.</summary>
    /// <seealso cref="DiscountUserRoleSearchModel"/>
    /// <seealso cref="IReturn{DiscountUserRolePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountUserRoles", "GET", Priority = 1,
            Summary = "Use to get a list of discount user roles")]
    public partial class GetDiscountUserRoles : DiscountUserRoleSearchModel, IReturn<DiscountUserRolePagedResults> { }

    /// <summary>A ServiceStack Route to get discount user roles for connect.</summary>
    /// <seealso cref="DiscountUserRoleSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountUserRoleModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.View"),
        PublicAPI,
        Route("/Discounts/DiscountUserRolesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount user roles")]
    public partial class GetDiscountUserRolesForConnect : DiscountUserRoleSearchModel, IReturn<List<DiscountUserRoleModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount user roles.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.View"),
        PublicAPI,
        Route("/Discounts/DiscountUserRolesDigest", "GET",
            Summary = "Use to get a hash representing each discount user roles")]
    public partial class GetDiscountUserRolesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountUserRoleModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountUserRole/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount user role")]
    public partial class GetDiscountUserRoleByID : ImplementsIDBase, IReturn<DiscountUserRoleModel> { }

    /// <summary>A ServiceStack Route to get discount user role.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountUserRoleModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountUserRole/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount user role by the custom key")]
    public partial class GetDiscountUserRoleByKey : ImplementsKeyBase, IReturn<DiscountUserRoleModel> { }

    /// <summary>A ServiceStack Route to check discount user role exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.View"),
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountUserRoleExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount user role exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.View"),
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountUserRoleExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount user role.</summary>
    /// <seealso cref="DiscountUserRoleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount user role.")]
    public partial class CreateDiscountUserRole : DiscountUserRoleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount user role.</summary>
    /// <seealso cref="DiscountUserRoleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount user role (as needed).")]
    public partial class UpsertDiscountUserRole : DiscountUserRoleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount user role.</summary>
    /// <seealso cref="DiscountUserRoleModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount user role.")]
    public partial class UpdateDiscountUserRole : DiscountUserRoleModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount user role from the system [Soft-Delete]")]
    public partial class DeactivateDiscountUserRoleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount user role by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount user role from the system [Soft-Delete]")]
    public partial class DeactivateDiscountUserRoleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount user role from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountUserRoleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount user role by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount user role from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountUserRoleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount user role.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount user role from the system [Hard-Delete]")]
    public partial class DeleteDiscountUserRoleByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount user role by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUserRole.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountUserRole/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount user role from the system [Hard-Delete]")]
    public partial class DeleteDiscountUserRoleByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount user role cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountUserRole/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount user role calls.")]
    public class ClearDiscountUserRoleCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountUserRoleServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountUserRoles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUserRoles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountUserRoleModel, DiscountUserRoleModel, IDiscountUserRoleSearchModel, DiscountUserRolePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountUserRoles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountUserRolesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountUserRolesForConnect request)
        {
            return await Workflows.DiscountUserRoles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountUserRolesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUserRolesDigest request)
        {
            return await Workflows.DiscountUserRoles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUserRoleByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountUserRoles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUserRoleByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountUserRoles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountUserRoleExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountUserRoleExistsByID request)
        {
            return await Workflows.DiscountUserRoles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountUserRoleExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountUserRoleExistsByKey request)
        {
            return await Workflows.DiscountUserRoles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountUserRole"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountUserRole request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountUserRole"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountUserRole request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountUserRole"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountUserRole request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountUserRoleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountUserRoleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountUserRoleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountUserRoleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountUserRoleByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountUserRoleByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountUserRoleByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountUserRoleByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserRoleDataAsync,
                    () => Workflows.DiscountUserRoles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountUserRoleCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountUserRoleCache request)
        {
            await ClearCachedDiscountUserRoleDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountUserRoleDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountUserRoles>(string.Empty),
                    UrnId.Create<GetDiscountUserRoleByID>(string.Empty),
                    UrnId.Create<GetDiscountUserRoleByKey>(string.Empty),
                    UrnId.Create<CheckDiscountUserRoleExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountUserRoleExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountUserRoleService : DiscountUserRoleServiceBase { }
}
