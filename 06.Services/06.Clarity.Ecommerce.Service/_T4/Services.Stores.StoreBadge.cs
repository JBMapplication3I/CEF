// <autogenerated>
// <copyright file="StoreBadgeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store badge service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store badges.</summary>
    /// <seealso cref="StoreBadgeSearchModel"/>
    /// <seealso cref="IReturn{StoreBadgePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreBadges", "GET", Priority = 1,
            Summary = "Use to get a list of store badges")]
    public partial class GetStoreBadges : StoreBadgeSearchModel, IReturn<StoreBadgePagedResults> { }

    /// <summary>A ServiceStack Route to get store badges for connect.</summary>
    /// <seealso cref="StoreBadgeSearchModel"/>
    /// <seealso cref="IReturn{List{StoreBadgeModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.View"),
        PublicAPI,
        Route("/Stores/StoreBadgesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store badges")]
    public partial class GetStoreBadgesForConnect : StoreBadgeSearchModel, IReturn<List<StoreBadgeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store badges.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.View"),
        PublicAPI,
        Route("/Stores/StoreBadgesDigest", "GET",
            Summary = "Use to get a hash representing each store badges")]
    public partial class GetStoreBadgesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreBadgeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreBadge/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store badge")]
    public partial class GetStoreBadgeByID : ImplementsIDBase, IReturn<StoreBadgeModel> { }

    /// <summary>A ServiceStack Route to get store badge.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreBadgeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreBadge/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store badge by the custom key")]
    public partial class GetStoreBadgeByKey : ImplementsKeyBase, IReturn<StoreBadgeModel> { }

    /// <summary>A ServiceStack Route to check store badge exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.View"),
        PublicAPI,
        Route("/Stores/StoreBadge/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreBadgeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store badge exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.View"),
        PublicAPI,
        Route("/Stores/StoreBadge/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreBadgeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store badge.</summary>
    /// <seealso cref="StoreBadgeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreBadge/Create", "POST", Priority = 1,
            Summary = "Use to create a new store badge.")]
    public partial class CreateStoreBadge : StoreBadgeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store badge.</summary>
    /// <seealso cref="StoreBadgeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreBadge/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store badge (as needed).")]
    public partial class UpsertStoreBadge : StoreBadgeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store badge.</summary>
    /// <seealso cref="StoreBadgeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreBadge/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store badge.")]
    public partial class UpdateStoreBadge : StoreBadgeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreBadge/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store badge from the system [Soft-Delete]")]
    public partial class DeactivateStoreBadgeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store badge by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreBadge/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store badge from the system [Soft-Delete]")]
    public partial class DeactivateStoreBadgeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreBadge/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store badge from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreBadgeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store badge by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreBadge/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store badge from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreBadgeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreBadge/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store badge from the system [Hard-Delete]")]
    public partial class DeleteStoreBadgeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store badge by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreBadge.Delete"),
        PublicAPI,
        Route("/Stores/StoreBadge/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store badge from the system [Hard-Delete]")]
    public partial class DeleteStoreBadgeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store badge cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreBadge/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store badge calls.")]
    public class ClearStoreBadgeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreBadgeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreBadges"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreBadges request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreBadgeModel, StoreBadgeModel, IStoreBadgeSearchModel, StoreBadgePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreBadges)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreBadgesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreBadgesForConnect request)
        {
            return await Workflows.StoreBadges.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreBadgesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreBadgesDigest request)
        {
            return await Workflows.StoreBadges.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreBadgeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreBadges, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreBadgeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreBadges, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreBadgeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreBadgeExistsByID request)
        {
            return await Workflows.StoreBadges.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreBadgeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreBadgeExistsByKey request)
        {
            return await Workflows.StoreBadges.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreBadge"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreBadge request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreBadge"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreBadge request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreBadge"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreBadge request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreBadgeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreBadgeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreBadgeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreBadgeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreBadgeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreBadgeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreBadgeDataAsync,
                    () => Workflows.StoreBadges.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreBadgeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreBadgeCache request)
        {
            await ClearCachedStoreBadgeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreBadgeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreBadges>(string.Empty),
                    UrnId.Create<GetStoreBadgeByID>(string.Empty),
                    UrnId.Create<GetStoreBadgeByKey>(string.Empty),
                    UrnId.Create<CheckStoreBadgeExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreBadgeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreBadgeService : StoreBadgeServiceBase { }
}
