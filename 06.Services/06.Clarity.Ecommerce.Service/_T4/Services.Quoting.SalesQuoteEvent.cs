// <autogenerated>
// <copyright file="SalesQuoteEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote events.</summary>
    /// <seealso cref="SalesQuoteEventSearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteEvents", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote events")]
    public partial class GetSalesQuoteEvents : SalesQuoteEventSearchModel, IReturn<SalesQuoteEventPagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote events for connect.</summary>
    /// <seealso cref="SalesQuoteEventSearchModel"/>
    /// <seealso cref="IReturn{List{SalesQuoteEventModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote events")]
    public partial class GetSalesQuoteEventsForConnect : SalesQuoteEventSearchModel, IReturn<List<SalesQuoteEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEventsDigest", "GET",
            Summary = "Use to get a hash representing each sales quote events")]
    public partial class GetSalesQuoteEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesQuoteEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote event")]
    public partial class GetSalesQuoteEventByID : ImplementsIDBase, IReturn<SalesQuoteEventModel> { }

    /// <summary>A ServiceStack Route to get sales quote event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesQuoteEventModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote event by the custom key")]
    public partial class GetSalesQuoteEventByKey : ImplementsKeyBase, IReturn<SalesQuoteEventModel> { }

    /// <summary>A ServiceStack Route to get sales quote event.</summary>
    /// <seealso cref="IReturn{SalesQuoteEventModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote event by the name")]
    public partial class GetSalesQuoteEventByName : ImplementsNameBase, IReturn<SalesQuoteEventModel> { }

    /// <summary>A ServiceStack Route to check sales quote event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote event exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteEventExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote event.</summary>
    /// <seealso cref="SalesQuoteEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote event.")]
    public partial class CreateSalesQuoteEvent : SalesQuoteEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote event.</summary>
    /// <seealso cref="SalesQuoteEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote event (as needed).")]
    public partial class UpsertSalesQuoteEvent : SalesQuoteEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote event.</summary>
    /// <seealso cref="SalesQuoteEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote event.")]
    public partial class UpdateSalesQuoteEvent : SalesQuoteEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote event from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote event from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote event from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteEvent.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote event from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote event calls.")]
    public class ClearSalesQuoteEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesQuoteEventModel, SalesQuoteEventModel, ISalesQuoteEventSearchModel, SalesQuoteEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteEventsForConnect request)
        {
            return await Workflows.SalesQuoteEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteEventsDigest request)
        {
            return await Workflows.SalesQuoteEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteEventByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteEventByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesQuoteEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteEventExistsByID request)
        {
            return await Workflows.SalesQuoteEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteEventExistsByKey request)
        {
            return await Workflows.SalesQuoteEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteEventExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteEventExistsByName request)
        {
            return await Workflows.SalesQuoteEvents.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteEventDataAsync,
                    () => Workflows.SalesQuoteEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteEventCache request)
        {
            await ClearCachedSalesQuoteEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteEvents>(string.Empty),
                    UrnId.Create<GetSalesQuoteEventByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteEventByKey>(string.Empty),
                    UrnId.Create<GetSalesQuoteEventByName>(string.Empty),
                    UrnId.Create<CheckSalesQuoteEventExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteEventExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteEventExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteEventService : SalesQuoteEventServiceBase { }
}
