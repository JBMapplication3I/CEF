// <autogenerated>
// <copyright file="SalesOrderItemService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order item service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order items.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderItemPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderItems", "GET", Priority = 1,
            Summary = "Use to get a list of sales order items")]
    public partial class GetSalesOrderItems : SalesItemBaseSearchModel, IReturn<SalesOrderItemPagedResults> { }

    /// <summary>A ServiceStack Route to get sales order items for connect.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemBaseModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order items")]
    public partial class GetSalesOrderItemsForConnect : SalesItemBaseSearchModel, IReturn<List<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order items.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemsDigest", "GET",
            Summary = "Use to get a hash representing each sales order items")]
    public partial class GetSalesOrderItemsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderItem/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order item")]
    public partial class GetSalesOrderItemByID : ImplementsIDBase, IReturn<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sales order item.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderItem/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order item by the custom key")]
    public partial class GetSalesOrderItemByKey : ImplementsKeyBase, IReturn<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sales order item.</summary>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderItem/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales order item by the name")]
    public partial class GetSalesOrderItemByName : ImplementsNameBase, IReturn<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to check sales order item exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderItemExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order item exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderItemExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order item exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderItemExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order item.")]
    public partial class CreateSalesOrderItem : SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order item (as needed).")]
    public partial class UpsertSalesOrderItem : SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order item.")]
    public partial class UpdateSalesOrderItem : SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order item from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Deactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order item from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Reactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order item from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItem.Delete"),
        PublicAPI,
        Route("/Ordering/SalesOrderItem/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order item from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order item cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderItem/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order item calls.")]
    public class ClearSalesOrderItemCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderItemServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderItems"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItems request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemBaseModel<IAppliedSalesOrderItemDiscountModel>, SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>, ISalesItemBaseSearchModel, SalesOrderItemPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderItems)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderItemsForConnect request)
        {
            return await Workflows.SalesOrderItems.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemsDigest request)
        {
            return await Workflows.SalesOrderItems.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesOrderItems, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderItemExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderItemExistsByID request)
        {
            return await Workflows.SalesOrderItems.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderItemExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderItemExistsByKey request)
        {
            return await Workflows.SalesOrderItems.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderItemExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderItemExistsByName request)
        {
            return await Workflows.SalesOrderItems.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemDataAsync,
                    () => Workflows.SalesOrderItems.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderItemCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderItemCache request)
        {
            await ClearCachedSalesOrderItemDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderItemDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderItems>(string.Empty),
                    UrnId.Create<GetSalesOrderItemByID>(string.Empty),
                    UrnId.Create<GetSalesOrderItemByKey>(string.Empty),
                    UrnId.Create<GetSalesOrderItemByName>(string.Empty),
                    UrnId.Create<CheckSalesOrderItemExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderItemExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderItemExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderItemService : SalesOrderItemServiceBase { }
}
