// <autogenerated>
// <copyright file="CategoryImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the category image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of category image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CategoryImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of category image types")]
    public partial class GetCategoryImageTypes : TypeSearchModel, IReturn<CategoryImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get category image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.View"),
        PublicAPI,
        Route("/Categories/CategoryImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all category image types")]
    public partial class GetCategoryImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all category image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.View"),
        PublicAPI,
        Route("/Categories/CategoryImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each category image types")]
    public partial class GetCategoryImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get category image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific category image type")]
    public partial class GetCategoryImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get category image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific category image type by the custom key")]
    public partial class GetCategoryImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get category image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific category image type by the name")]
    public partial class GetCategoryImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get category image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific category image type by the name")]
    public partial class GetCategoryImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check category image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.View"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.View"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.View"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.View"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create category image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new category image type.")]
    public partial class CreateCategoryImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert category image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Categories/CategoryImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing category image type (as needed).")]
    public partial class UpsertCategoryImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update category image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing category image type.")]
    public partial class UpdateCategoryImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate category image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category image type from the system [Soft-Delete]")]
    public partial class DeactivateCategoryImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate category image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Deactivate"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category image type from the system [Soft-Delete]")]
    public partial class DeactivateCategoryImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Reactivate"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific category image type from the system [Hard-Delete]")]
    public partial class DeleteCategoryImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImageType.Delete"),
        PublicAPI,
        Route("/Categories/CategoryImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific category image type from the system [Hard-Delete]")]
    public partial class DeleteCategoryImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear category image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all category image type calls.")]
    public class ClearCategoryImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CategoryImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCategoryImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CategoryImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CategoryImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCategoryImageTypesForConnect request)
        {
            return await Workflows.CategoryImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageTypesDigest request)
        {
            return await Workflows.CategoryImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCategoryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CategoryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CategoryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CategoryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CategoryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCategoryImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageTypeExistsByID request)
        {
            return await Workflows.CategoryImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageTypeExistsByKey request)
        {
            return await Workflows.CategoryImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageTypeExistsByName request)
        {
            return await Workflows.CategoryImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageTypeExistsByDisplayName request)
        {
            return await Workflows.CategoryImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCategoryImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCategoryImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCategoryImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCategoryImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCategoryImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCategoryImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCategoryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCategoryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCategoryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCategoryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCategoryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCategoryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageTypeDataAsync,
                    () => Workflows.CategoryImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCategoryImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCategoryImageTypeCache request)
        {
            await ClearCachedCategoryImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCategoryImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCategoryImageTypes>(string.Empty),
                    UrnId.Create<GetCategoryImageTypeByID>(string.Empty),
                    UrnId.Create<GetCategoryImageTypeByKey>(string.Empty),
                    UrnId.Create<GetCategoryImageTypeByName>(string.Empty),
                    UrnId.Create<CheckCategoryImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCategoryImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCategoryImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCategoryImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CategoryImageTypeService : CategoryImageTypeServiceBase { }
}
