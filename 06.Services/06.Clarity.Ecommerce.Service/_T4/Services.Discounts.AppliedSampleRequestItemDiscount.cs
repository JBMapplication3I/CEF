// <autogenerated>
// <copyright file="AppliedSampleRequestItemDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sample request item discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sample request item discounts.</summary>
    /// <seealso cref="AppliedSampleRequestItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSampleRequestItemDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSampleRequestItemDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sample request item discounts")]
    public partial class GetAppliedSampleRequestItemDiscounts : AppliedSampleRequestItemDiscountSearchModel, IReturn<AppliedSampleRequestItemDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sample request item discounts for connect.</summary>
    /// <seealso cref="AppliedSampleRequestItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSampleRequestItemDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sample request item discounts")]
    public partial class GetAppliedSampleRequestItemDiscountsForConnect : AppliedSampleRequestItemDiscountSearchModel, IReturn<List<AppliedSampleRequestItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sample request item discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sample request item discounts")]
    public partial class GetAppliedSampleRequestItemDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sample request item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSampleRequestItemDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSampleRequestItemDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sample request item discount")]
    public partial class GetAppliedSampleRequestItemDiscountByID : ImplementsIDBase, IReturn<AppliedSampleRequestItemDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sample request item discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSampleRequestItemDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sample request item discount by the custom key")]
    public partial class GetAppliedSampleRequestItemDiscountByKey : ImplementsKeyBase, IReturn<AppliedSampleRequestItemDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sample request item discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSampleRequestItemDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sample request item discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSampleRequestItemDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sample request item discount.</summary>
    /// <seealso cref="AppliedSampleRequestItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sample request item discount.")]
    public partial class CreateAppliedSampleRequestItemDiscount : AppliedSampleRequestItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sample request item discount.</summary>
    /// <seealso cref="AppliedSampleRequestItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sample request item discount (as needed).")]
    public partial class UpsertAppliedSampleRequestItemDiscount : AppliedSampleRequestItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sample request item discount.</summary>
    /// <seealso cref="AppliedSampleRequestItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sample request item discount.")]
    public partial class UpdateAppliedSampleRequestItemDiscount : AppliedSampleRequestItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sample request item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sample request item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSampleRequestItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sample request item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sample request item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSampleRequestItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sample request item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sample request item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSampleRequestItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sample request item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sample request item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSampleRequestItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sample request item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sample request item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSampleRequestItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sample request item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestItemDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestItemDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sample request item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSampleRequestItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sample request item discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSampleRequestItemDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sample request item discount calls.")]
    public class ClearAppliedSampleRequestItemDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSampleRequestItemDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestItemDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestItemDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel, IAppliedSampleRequestItemDiscountSearchModel, AppliedSampleRequestItemDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSampleRequestItemDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestItemDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSampleRequestItemDiscountsForConnect request)
        {
            return await Workflows.AppliedSampleRequestItemDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestItemDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestItemDiscountsDigest request)
        {
            return await Workflows.AppliedSampleRequestItemDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestItemDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSampleRequestItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestItemDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSampleRequestItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSampleRequestItemDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSampleRequestItemDiscountExistsByID request)
        {
            return await Workflows.AppliedSampleRequestItemDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSampleRequestItemDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSampleRequestItemDiscountExistsByKey request)
        {
            return await Workflows.AppliedSampleRequestItemDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSampleRequestItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSampleRequestItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSampleRequestItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSampleRequestItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSampleRequestItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSampleRequestItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSampleRequestItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSampleRequestItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSampleRequestItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSampleRequestItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSampleRequestItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSampleRequestItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSampleRequestItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSampleRequestItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSampleRequestItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSampleRequestItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSampleRequestItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSampleRequestItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestItemDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestItemDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSampleRequestItemDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSampleRequestItemDiscountCache request)
        {
            await ClearCachedAppliedSampleRequestItemDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSampleRequestItemDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSampleRequestItemDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSampleRequestItemDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSampleRequestItemDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSampleRequestItemDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSampleRequestItemDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSampleRequestItemDiscountService : AppliedSampleRequestItemDiscountServiceBase { }
}
