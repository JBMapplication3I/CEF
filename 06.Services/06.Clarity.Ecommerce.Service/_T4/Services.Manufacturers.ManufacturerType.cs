// <autogenerated>
// <copyright file="ManufacturerTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the manufacturer type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of manufacturer types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ManufacturerTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerTypes", "GET", Priority = 1,
            Summary = "Use to get a list of manufacturer types")]
    public partial class GetManufacturerTypes : TypeSearchModel, IReturn<ManufacturerTypePagedResults> { }

    /// <summary>A ServiceStack Route to get manufacturer types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all manufacturer types")]
    public partial class GetManufacturerTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all manufacturer types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerTypesDigest", "GET",
            Summary = "Use to get a hash representing each manufacturer types")]
    public partial class GetManufacturerTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get manufacturer type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer type")]
    public partial class GetManufacturerTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get manufacturer type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer type by the custom key")]
    public partial class GetManufacturerTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get manufacturer type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer type by the name")]
    public partial class GetManufacturerTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get manufacturer type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer type by the name")]
    public partial class GetManufacturerTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check manufacturer type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create manufacturer type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Create", "POST", Priority = 1,
            Summary = "Use to create a new manufacturer type.")]
    public partial class CreateManufacturerType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert manufacturer type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing manufacturer type (as needed).")]
    public partial class UpsertManufacturerType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update manufacturer type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing manufacturer type.")]
    public partial class UpdateManufacturerType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer type from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Deactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer type from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Reactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific manufacturer type from the system [Hard-Delete]")]
    public partial class DeleteManufacturerTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerType.Delete"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific manufacturer type from the system [Hard-Delete]")]
    public partial class DeleteManufacturerTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear manufacturer type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all manufacturer type calls.")]
    public class ClearManufacturerTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ManufacturerTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetManufacturerTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ManufacturerTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ManufacturerTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetManufacturerTypesForConnect request)
        {
            return await Workflows.ManufacturerTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerTypesDigest request)
        {
            return await Workflows.ManufacturerTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetManufacturerTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ManufacturerTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ManufacturerTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ManufacturerTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ManufacturerTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckManufacturerTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerTypeExistsByID request)
        {
            return await Workflows.ManufacturerTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerTypeExistsByKey request)
        {
            return await Workflows.ManufacturerTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerTypeExistsByName request)
        {
            return await Workflows.ManufacturerTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerTypeExistsByDisplayName request)
        {
            return await Workflows.ManufacturerTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertManufacturerType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertManufacturerType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateManufacturerType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateManufacturerType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateManufacturerType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateManufacturerType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteManufacturerTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteManufacturerTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerTypeDataAsync,
                    () => Workflows.ManufacturerTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearManufacturerTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearManufacturerTypeCache request)
        {
            await ClearCachedManufacturerTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedManufacturerTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetManufacturerTypes>(string.Empty),
                    UrnId.Create<GetManufacturerTypeByID>(string.Empty),
                    UrnId.Create<GetManufacturerTypeByKey>(string.Empty),
                    UrnId.Create<GetManufacturerTypeByName>(string.Empty),
                    UrnId.Create<CheckManufacturerTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckManufacturerTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckManufacturerTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckManufacturerTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ManufacturerTypeService : ManufacturerTypeServiceBase { }
}
