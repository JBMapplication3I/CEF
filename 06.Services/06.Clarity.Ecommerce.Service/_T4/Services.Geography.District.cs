// <autogenerated>
// <copyright file="DistrictService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the district service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of districts.</summary>
    /// <seealso cref="DistrictSearchModel"/>
    /// <seealso cref="IReturn{DistrictPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Districts", "GET", Priority = 1,
            Summary = "Use to get a list of districts")]
    public partial class GetDistricts : DistrictSearchModel, IReturn<DistrictPagedResults> { }

    /// <summary>A ServiceStack Route to get districts for connect.</summary>
    /// <seealso cref="DistrictSearchModel"/>
    /// <seealso cref="IReturn{List{DistrictModel}}"/>
    [Authenticate, RequiredPermission("Geography.District.View"),
        PublicAPI,
        Route("/Geography/DistrictsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all districts")]
    public partial class GetDistrictsForConnect : DistrictSearchModel, IReturn<List<DistrictModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all districts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.District.View"),
        PublicAPI,
        Route("/Geography/DistrictsDigest", "GET",
            Summary = "Use to get a hash representing each districts")]
    public partial class GetDistrictsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DistrictModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/District/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific district")]
    public partial class GetDistrictByID : ImplementsIDBase, IReturn<DistrictModel> { }

    /// <summary>A ServiceStack Route to get district.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DistrictModel}"/>
    [PublicAPI,
        Route("/Geography/District/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific district by the custom key")]
    public partial class GetDistrictByKey : ImplementsKeyBase, IReturn<DistrictModel> { }

    /// <summary>A ServiceStack Route to get district.</summary>
    /// <seealso cref="IReturn{DistrictModel}"/>
    [PublicAPI,
        Route("/Geography/District/Name", "GET", Priority = 1,
            Summary = "Use to get a specific district by the name")]
    public partial class GetDistrictByName : ImplementsNameBase, IReturn<DistrictModel> { }

    /// <summary>A ServiceStack Route to check district exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.District.View"),
        PublicAPI,
        Route("/Geography/District/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.District.View"),
        PublicAPI,
        Route("/Geography/District/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.District.View"),
        PublicAPI,
        Route("/Geography/District/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create district.</summary>
    /// <seealso cref="DistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.District.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/District/Create", "POST", Priority = 1,
            Summary = "Use to create a new district.")]
    public partial class CreateDistrict : DistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert district.</summary>
    /// <seealso cref="DistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/District/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing district (as needed).")]
    public partial class UpsertDistrict : DistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update district.</summary>
    /// <seealso cref="DistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.District.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/District/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing district.")]
    public partial class UpdateDistrict : DistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.District.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/District/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district from the system [Soft-Delete]")]
    public partial class DeactivateDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.District.Deactivate"),
        PublicAPI,
        Route("/Geography/District/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district from the system [Soft-Delete]")]
    public partial class DeactivateDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.District.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/District/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.District.Reactivate"),
        PublicAPI,
        Route("/Geography/District/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.District.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/District/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific district from the system [Hard-Delete]")]
    public partial class DeleteDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.District.Delete"),
        PublicAPI,
        Route("/Geography/District/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific district from the system [Hard-Delete]")]
    public partial class DeleteDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear district cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/District/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all district calls.")]
    public class ClearDistrictCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DistrictServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDistricts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistricts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDistrictModel, DistrictModel, IDistrictSearchModel, DistrictPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Districts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDistrictsForConnect request)
        {
            return await Workflows.Districts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictsDigest request)
        {
            return await Workflows.Districts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Districts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Districts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Districts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDistrictExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictExistsByID request)
        {
            return await Workflows.Districts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictExistsByKey request)
        {
            return await Workflows.Districts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictExistsByName request)
        {
            return await Workflows.Districts.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictDataAsync,
                    () => Workflows.Districts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDistrictCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDistrictCache request)
        {
            await ClearCachedDistrictDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDistrictDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDistricts>(string.Empty),
                    UrnId.Create<GetDistrictByID>(string.Empty),
                    UrnId.Create<GetDistrictByKey>(string.Empty),
                    UrnId.Create<GetDistrictByName>(string.Empty),
                    UrnId.Create<CheckDistrictExistsByID>(string.Empty),
                    UrnId.Create<CheckDistrictExistsByKey>(string.Empty),
                    UrnId.Create<CheckDistrictExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DistrictService : DistrictServiceBase { }
}
