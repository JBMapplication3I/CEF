// <autogenerated>
// <copyright file="BadgeImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the badge image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of badge images.</summary>
    /// <seealso cref="BadgeImageSearchModel"/>
    /// <seealso cref="IReturn{BadgeImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeImages", "GET", Priority = 1,
            Summary = "Use to get a list of badge images")]
    public partial class GetBadgeImages : BadgeImageSearchModel, IReturn<BadgeImagePagedResults> { }

    /// <summary>A ServiceStack Route to get badge images for connect.</summary>
    /// <seealso cref="BadgeImageSearchModel"/>
    /// <seealso cref="IReturn{List{BadgeImageModel}}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.View"),
        PublicAPI,
        Route("/Badges/BadgeImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all badge images")]
    public partial class GetBadgeImagesForConnect : BadgeImageSearchModel, IReturn<List<BadgeImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all badge images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.View"),
        PublicAPI,
        Route("/Badges/BadgeImagesDigest", "GET",
            Summary = "Use to get a hash representing each badge images")]
    public partial class GetBadgeImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get badge image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BadgeImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific badge image")]
    public partial class GetBadgeImageByID : ImplementsIDBase, IReturn<BadgeImageModel> { }

    /// <summary>A ServiceStack Route to get badge image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BadgeImageModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific badge image by the custom key")]
    public partial class GetBadgeImageByKey : ImplementsKeyBase, IReturn<BadgeImageModel> { }

    /// <summary>A ServiceStack Route to get badge image.</summary>
    /// <seealso cref="IReturn{BadgeImageModel}"/>
    [PublicAPI,
        Route("/Badges/BadgeImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific badge image by the name")]
    public partial class GetBadgeImageByName : ImplementsNameBase, IReturn<BadgeImageModel> { }

    /// <summary>A ServiceStack Route to check badge image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.View"),
        PublicAPI,
        Route("/Badges/BadgeImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.View"),
        PublicAPI,
        Route("/Badges/BadgeImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.View"),
        PublicAPI,
        Route("/Badges/BadgeImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create badge image.</summary>
    /// <seealso cref="BadgeImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new badge image.")]
    public partial class CreateBadgeImage : BadgeImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert badge image.</summary>
    /// <seealso cref="BadgeImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Badges/BadgeImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing badge image (as needed).")]
    public partial class UpsertBadgeImage : BadgeImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update badge image.</summary>
    /// <seealso cref="BadgeImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing badge image.")]
    public partial class UpdateBadgeImage : BadgeImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate badge image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge image from the system [Soft-Delete]")]
    public partial class DeactivateBadgeImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate badge image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Deactivate"),
        PublicAPI,
        Route("/Badges/BadgeImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge image from the system [Soft-Delete]")]
    public partial class DeactivateBadgeImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Reactivate"),
        PublicAPI,
        Route("/Badges/BadgeImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/BadgeImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific badge image from the system [Hard-Delete]")]
    public partial class DeleteBadgeImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.BadgeImage.Delete"),
        PublicAPI,
        Route("/Badges/BadgeImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific badge image from the system [Hard-Delete]")]
    public partial class DeleteBadgeImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear badge image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/BadgeImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all badge image calls.")]
    public class ClearBadgeImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BadgeImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBadgeImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBadgeImageModel, BadgeImageModel, IBadgeImageSearchModel, BadgeImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BadgeImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBadgeImagesForConnect request)
        {
            return await Workflows.BadgeImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImagesDigest request)
        {
            return await Workflows.BadgeImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBadgeImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BadgeImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BadgeImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.BadgeImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBadgeImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageExistsByID request)
        {
            return await Workflows.BadgeImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageExistsByKey request)
        {
            return await Workflows.BadgeImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeImageExistsByName request)
        {
            return await Workflows.BadgeImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBadgeImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBadgeImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBadgeImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBadgeImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBadgeImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBadgeImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBadgeImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBadgeImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBadgeImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBadgeImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBadgeImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBadgeImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeImageDataAsync,
                    () => Workflows.BadgeImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBadgeImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBadgeImageCache request)
        {
            await ClearCachedBadgeImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBadgeImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBadgeImages>(string.Empty),
                    UrnId.Create<GetBadgeImageByID>(string.Empty),
                    UrnId.Create<GetBadgeImageByKey>(string.Empty),
                    UrnId.Create<GetBadgeImageByName>(string.Empty),
                    UrnId.Create<CheckBadgeImageExistsByID>(string.Empty),
                    UrnId.Create<CheckBadgeImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckBadgeImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BadgeImageService : BadgeImageServiceBase { }
}
