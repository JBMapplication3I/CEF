// <autogenerated>
// <copyright file="GroupStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the group status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of group statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{GroupStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of group statuses")]
    public partial class GetGroupStatuses : StatusSearchModel, IReturn<GroupStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get group statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.View"),
        PublicAPI,
        Route("/Groups/GroupStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all group statuses")]
    public partial class GetGroupStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all group statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.View"),
        PublicAPI,
        Route("/Groups/GroupStatusesDigest", "GET",
            Summary = "Use to get a hash representing each group statuses")]
    public partial class GetGroupStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get group status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific group status")]
    public partial class GetGroupStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get group status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Groups/GroupStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific group status by the custom key")]
    public partial class GetGroupStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get group status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Groups/GroupStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific group status by the name")]
    public partial class GetGroupStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get group status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Groups/GroupStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific group status by the name")]
    public partial class GetGroupStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check group status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.View"),
        PublicAPI,
        Route("/Groups/GroupStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.View"),
        PublicAPI,
        Route("/Groups/GroupStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.View"),
        PublicAPI,
        Route("/Groups/GroupStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.View"),
        PublicAPI,
        Route("/Groups/GroupStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create group status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new group status.")]
    public partial class CreateGroupStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert group status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Groups/GroupStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing group status (as needed).")]
    public partial class UpsertGroupStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update group status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing group status.")]
    public partial class UpdateGroupStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate group status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group status from the system [Soft-Delete]")]
    public partial class DeactivateGroupStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate group status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Deactivate"),
        PublicAPI,
        Route("/Groups/GroupStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group status from the system [Soft-Delete]")]
    public partial class DeactivateGroupStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Reactivate"),
        PublicAPI,
        Route("/Groups/GroupStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific group status from the system [Hard-Delete]")]
    public partial class DeleteGroupStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupStatus.Delete"),
        PublicAPI,
        Route("/Groups/GroupStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific group status from the system [Hard-Delete]")]
    public partial class DeleteGroupStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear group status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all group status calls.")]
    public class ClearGroupStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class GroupStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetGroupStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, GroupStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.GroupStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetGroupStatusesForConnect request)
        {
            return await Workflows.GroupStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupStatusesDigest request)
        {
            return await Workflows.GroupStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetGroupStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.GroupStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.GroupStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.GroupStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.GroupStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckGroupStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupStatusExistsByID request)
        {
            return await Workflows.GroupStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupStatusExistsByKey request)
        {
            return await Workflows.GroupStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupStatusExistsByName request)
        {
            return await Workflows.GroupStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupStatusExistsByDisplayName request)
        {
            return await Workflows.GroupStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertGroupStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertGroupStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateGroupStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateGroupStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateGroupStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateGroupStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateGroupStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateGroupStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateGroupStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateGroupStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteGroupStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteGroupStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupStatusDataAsync,
                    () => Workflows.GroupStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearGroupStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearGroupStatusCache request)
        {
            await ClearCachedGroupStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedGroupStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetGroupStatuses>(string.Empty),
                    UrnId.Create<GetGroupStatusByID>(string.Empty),
                    UrnId.Create<GetGroupStatusByKey>(string.Empty),
                    UrnId.Create<GetGroupStatusByName>(string.Empty),
                    UrnId.Create<CheckGroupStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckGroupStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckGroupStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckGroupStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class GroupStatusService : GroupStatusServiceBase { }
}
