// <autogenerated>
// <copyright file="GroupTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the group type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of group types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{GroupTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupTypes", "GET", Priority = 1,
            Summary = "Use to get a list of group types")]
    public partial class GetGroupTypes : TypeSearchModel, IReturn<GroupTypePagedResults> { }

    /// <summary>A ServiceStack Route to get group types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.View"),
        PublicAPI,
        Route("/Groups/GroupTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all group types")]
    public partial class GetGroupTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all group types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.View"),
        PublicAPI,
        Route("/Groups/GroupTypesDigest", "GET",
            Summary = "Use to get a hash representing each group types")]
    public partial class GetGroupTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get group type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific group type")]
    public partial class GetGroupTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get group type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Groups/GroupType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific group type by the custom key")]
    public partial class GetGroupTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get group type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Groups/GroupType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific group type by the name")]
    public partial class GetGroupTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get group type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Groups/GroupType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific group type by the name")]
    public partial class GetGroupTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check group type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.View"),
        PublicAPI,
        Route("/Groups/GroupType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.View"),
        PublicAPI,
        Route("/Groups/GroupType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.View"),
        PublicAPI,
        Route("/Groups/GroupType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.View"),
        PublicAPI,
        Route("/Groups/GroupType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create group type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupType/Create", "POST", Priority = 1,
            Summary = "Use to create a new group type.")]
    public partial class CreateGroupType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert group type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Groups/GroupType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing group type (as needed).")]
    public partial class UpsertGroupType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update group type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing group type.")]
    public partial class UpdateGroupType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate group type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group type from the system [Soft-Delete]")]
    public partial class DeactivateGroupTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate group type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Deactivate"),
        PublicAPI,
        Route("/Groups/GroupType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group type from the system [Soft-Delete]")]
    public partial class DeactivateGroupTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Reactivate"),
        PublicAPI,
        Route("/Groups/GroupType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific group type from the system [Hard-Delete]")]
    public partial class DeleteGroupTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupType.Delete"),
        PublicAPI,
        Route("/Groups/GroupType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific group type from the system [Hard-Delete]")]
    public partial class DeleteGroupTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear group type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all group type calls.")]
    public class ClearGroupTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class GroupTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetGroupTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, GroupTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.GroupTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetGroupTypesForConnect request)
        {
            return await Workflows.GroupTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupTypesDigest request)
        {
            return await Workflows.GroupTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetGroupTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.GroupTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.GroupTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.GroupTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.GroupTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckGroupTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupTypeExistsByID request)
        {
            return await Workflows.GroupTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupTypeExistsByKey request)
        {
            return await Workflows.GroupTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupTypeExistsByName request)
        {
            return await Workflows.GroupTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupTypeExistsByDisplayName request)
        {
            return await Workflows.GroupTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertGroupType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertGroupType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateGroupType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateGroupType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateGroupType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateGroupType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateGroupTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateGroupTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateGroupTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateGroupTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteGroupTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteGroupTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupTypeDataAsync,
                    () => Workflows.GroupTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearGroupTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearGroupTypeCache request)
        {
            await ClearCachedGroupTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedGroupTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetGroupTypes>(string.Empty),
                    UrnId.Create<GetGroupTypeByID>(string.Empty),
                    UrnId.Create<GetGroupTypeByKey>(string.Empty),
                    UrnId.Create<GetGroupTypeByName>(string.Empty),
                    UrnId.Create<CheckGroupTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckGroupTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckGroupTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckGroupTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class GroupTypeService : GroupTypeServiceBase { }
}
