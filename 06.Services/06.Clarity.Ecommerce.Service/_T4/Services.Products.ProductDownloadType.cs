// <autogenerated>
// <copyright file="ProductDownloadTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product download type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product download types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ProductDownloadTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductDownloadTypes", "GET", Priority = 1,
            Summary = "Use to get a list of product download types")]
    public partial class GetProductDownloadTypes : TypeSearchModel, IReturn<ProductDownloadTypePagedResults> { }

    /// <summary>A ServiceStack Route to get product download types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.View"),
        PublicAPI,
        Route("/Products/ProductDownloadTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product download types")]
    public partial class GetProductDownloadTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product download types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.View"),
        PublicAPI,
        Route("/Products/ProductDownloadTypesDigest", "GET",
            Summary = "Use to get a hash representing each product download types")]
    public partial class GetProductDownloadTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product download type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductDownloadType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product download type")]
    public partial class GetProductDownloadTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get product download type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductDownloadType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product download type by the custom key")]
    public partial class GetProductDownloadTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get product download type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductDownloadType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific product download type by the name")]
    public partial class GetProductDownloadTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get product download type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductDownloadType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific product download type by the name")]
    public partial class GetProductDownloadTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check product download type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.View"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product download type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.View"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product download type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.View"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product download type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.View"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product download type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownloadType/Create", "POST", Priority = 1,
            Summary = "Use to create a new product download type.")]
    public partial class CreateProductDownloadType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product download type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductDownloadType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product download type (as needed).")]
    public partial class UpsertProductDownloadType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product download type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownloadType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product download type.")]
    public partial class UpdateProductDownloadType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product download type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownloadType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product download type from the system [Soft-Delete]")]
    public partial class DeactivateProductDownloadTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product download type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Deactivate"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product download type from the system [Soft-Delete]")]
    public partial class DeactivateProductDownloadTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product download type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownloadType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product download type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductDownloadTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product download type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Reactivate"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product download type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductDownloadTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product download type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownloadType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product download type from the system [Hard-Delete]")]
    public partial class DeleteProductDownloadTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product download type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownloadType.Delete"),
        PublicAPI,
        Route("/Products/ProductDownloadType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product download type from the system [Hard-Delete]")]
    public partial class DeleteProductDownloadTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product download type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductDownloadType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product download type calls.")]
    public class ClearProductDownloadTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductDownloadTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductDownloadTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ProductDownloadTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductDownloadTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductDownloadTypesForConnect request)
        {
            return await Workflows.ProductDownloadTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadTypesDigest request)
        {
            return await Workflows.ProductDownloadTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductDownloadTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductDownloadTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductDownloadTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ProductDownloadTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ProductDownloadTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductDownloadTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadTypeExistsByID request)
        {
            return await Workflows.ProductDownloadTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductDownloadTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadTypeExistsByKey request)
        {
            return await Workflows.ProductDownloadTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductDownloadTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadTypeExistsByName request)
        {
            return await Workflows.ProductDownloadTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductDownloadTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadTypeExistsByDisplayName request)
        {
            return await Workflows.ProductDownloadTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductDownloadType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductDownloadType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductDownloadType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductDownloadType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductDownloadType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductDownloadType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductDownloadTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductDownloadTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductDownloadTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductDownloadTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductDownloadTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductDownloadTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductDownloadTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductDownloadTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductDownloadTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductDownloadTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductDownloadTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductDownloadTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadTypeDataAsync,
                    () => Workflows.ProductDownloadTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductDownloadTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductDownloadTypeCache request)
        {
            await ClearCachedProductDownloadTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductDownloadTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductDownloadTypes>(string.Empty),
                    UrnId.Create<GetProductDownloadTypeByID>(string.Empty),
                    UrnId.Create<GetProductDownloadTypeByKey>(string.Empty),
                    UrnId.Create<GetProductDownloadTypeByName>(string.Empty),
                    UrnId.Create<CheckProductDownloadTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckProductDownloadTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckProductDownloadTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckProductDownloadTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductDownloadTypeService : ProductDownloadTypeServiceBase { }
}
