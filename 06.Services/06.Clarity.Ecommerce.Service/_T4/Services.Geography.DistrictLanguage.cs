// <autogenerated>
// <copyright file="DistrictLanguageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the district language service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of district languages.</summary>
    /// <seealso cref="DistrictLanguageSearchModel"/>
    /// <seealso cref="IReturn{DistrictLanguagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictLanguages", "GET", Priority = 1,
            Summary = "Use to get a list of district languages")]
    public partial class GetDistrictLanguages : DistrictLanguageSearchModel, IReturn<DistrictLanguagePagedResults> { }

    /// <summary>A ServiceStack Route to get district languages for connect.</summary>
    /// <seealso cref="DistrictLanguageSearchModel"/>
    /// <seealso cref="IReturn{List{DistrictLanguageModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.View"),
        PublicAPI,
        Route("/Geography/DistrictLanguagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all district languages")]
    public partial class GetDistrictLanguagesForConnect : DistrictLanguageSearchModel, IReturn<List<DistrictLanguageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all district languages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.View"),
        PublicAPI,
        Route("/Geography/DistrictLanguagesDigest", "GET",
            Summary = "Use to get a hash representing each district languages")]
    public partial class GetDistrictLanguagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get district language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DistrictLanguageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictLanguage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific district language")]
    public partial class GetDistrictLanguageByID : ImplementsIDBase, IReturn<DistrictLanguageModel> { }

    /// <summary>A ServiceStack Route to get district language.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DistrictLanguageModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictLanguage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific district language by the custom key")]
    public partial class GetDistrictLanguageByKey : ImplementsKeyBase, IReturn<DistrictLanguageModel> { }

    /// <summary>A ServiceStack Route to check district language exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.View"),
        PublicAPI,
        Route("/Geography/DistrictLanguage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictLanguageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district language exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.View"),
        PublicAPI,
        Route("/Geography/DistrictLanguage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictLanguageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create district language.</summary>
    /// <seealso cref="DistrictLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictLanguage/Create", "POST", Priority = 1,
            Summary = "Use to create a new district language.")]
    public partial class CreateDistrictLanguage : DistrictLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert district language.</summary>
    /// <seealso cref="DistrictLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/DistrictLanguage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing district language (as needed).")]
    public partial class UpsertDistrictLanguage : DistrictLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update district language.</summary>
    /// <seealso cref="DistrictLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictLanguage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing district language.")]
    public partial class UpdateDistrictLanguage : DistrictLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate district language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictLanguage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district language from the system [Soft-Delete]")]
    public partial class DeactivateDistrictLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate district language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Deactivate"),
        PublicAPI,
        Route("/Geography/DistrictLanguage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district language from the system [Soft-Delete]")]
    public partial class DeactivateDistrictLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictLanguage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Reactivate"),
        PublicAPI,
        Route("/Geography/DistrictLanguage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictLanguage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific district language from the system [Hard-Delete]")]
    public partial class DeleteDistrictLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictLanguage.Delete"),
        PublicAPI,
        Route("/Geography/DistrictLanguage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific district language from the system [Hard-Delete]")]
    public partial class DeleteDistrictLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear district language cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictLanguage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all district language calls.")]
    public class ClearDistrictLanguageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DistrictLanguageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDistrictLanguages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictLanguages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDistrictLanguageModel, DistrictLanguageModel, IDistrictLanguageSearchModel, DistrictLanguagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DistrictLanguages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictLanguagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDistrictLanguagesForConnect request)
        {
            return await Workflows.DistrictLanguages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictLanguagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictLanguagesDigest request)
        {
            return await Workflows.DistrictLanguages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDistrictLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictLanguageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DistrictLanguages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictLanguageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DistrictLanguages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDistrictLanguageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictLanguageExistsByID request)
        {
            return await Workflows.DistrictLanguages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictLanguageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictLanguageExistsByKey request)
        {
            return await Workflows.DistrictLanguages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDistrictLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDistrictLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDistrictLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDistrictLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDistrictLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDistrictLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDistrictLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDistrictLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDistrictLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDistrictLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDistrictLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDistrictLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictLanguageDataAsync,
                    () => Workflows.DistrictLanguages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDistrictLanguageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDistrictLanguageCache request)
        {
            await ClearCachedDistrictLanguageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDistrictLanguageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDistrictLanguages>(string.Empty),
                    UrnId.Create<GetDistrictLanguageByID>(string.Empty),
                    UrnId.Create<GetDistrictLanguageByKey>(string.Empty),
                    UrnId.Create<CheckDistrictLanguageExistsByID>(string.Empty),
                    UrnId.Create<CheckDistrictLanguageExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DistrictLanguageService : DistrictLanguageServiceBase { }
}
