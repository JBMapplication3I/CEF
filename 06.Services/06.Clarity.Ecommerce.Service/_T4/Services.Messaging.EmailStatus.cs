// <autogenerated>
// <copyright file="EmailStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the email status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of email statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{EmailStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of email statuses")]
    public partial class GetEmailStatuses : StatusSearchModel, IReturn<EmailStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get email statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.View"),
        PublicAPI,
        Route("/Messaging/EmailStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all email statuses")]
    public partial class GetEmailStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all email statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.View"),
        PublicAPI,
        Route("/Messaging/EmailStatusesDigest", "GET",
            Summary = "Use to get a hash representing each email statuses")]
    public partial class GetEmailStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get email status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific email status")]
    public partial class GetEmailStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get email status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific email status by the custom key")]
    public partial class GetEmailStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get email status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific email status by the name")]
    public partial class GetEmailStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get email status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific email status by the name")]
    public partial class GetEmailStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check email status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.View"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.View"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.View"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.View"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create email status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new email status.")]
    public partial class CreateEmailStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert email status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/EmailStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing email status (as needed).")]
    public partial class UpsertEmailStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update email status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing email status.")]
    public partial class UpdateEmailStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate email status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email status from the system [Soft-Delete]")]
    public partial class DeactivateEmailStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate email status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Deactivate"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email status from the system [Soft-Delete]")]
    public partial class DeactivateEmailStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Reactivate"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific email status from the system [Hard-Delete]")]
    public partial class DeleteEmailStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailStatus.Delete"),
        PublicAPI,
        Route("/Messaging/EmailStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific email status from the system [Hard-Delete]")]
    public partial class DeleteEmailStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear email status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all email status calls.")]
    public class ClearEmailStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EmailStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEmailStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, EmailStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.EmailStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEmailStatusesForConnect request)
        {
            return await Workflows.EmailStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailStatusesDigest request)
        {
            return await Workflows.EmailStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEmailStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.EmailStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.EmailStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.EmailStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.EmailStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEmailStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailStatusExistsByID request)
        {
            return await Workflows.EmailStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailStatusExistsByKey request)
        {
            return await Workflows.EmailStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailStatusExistsByName request)
        {
            return await Workflows.EmailStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailStatusExistsByDisplayName request)
        {
            return await Workflows.EmailStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEmailStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEmailStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEmailStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEmailStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEmailStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEmailStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEmailStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEmailStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEmailStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEmailStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEmailStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEmailStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailStatusDataAsync,
                    () => Workflows.EmailStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEmailStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEmailStatusCache request)
        {
            await ClearCachedEmailStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEmailStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEmailStatuses>(string.Empty),
                    UrnId.Create<GetEmailStatusByID>(string.Empty),
                    UrnId.Create<GetEmailStatusByKey>(string.Empty),
                    UrnId.Create<GetEmailStatusByName>(string.Empty),
                    UrnId.Create<CheckEmailStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckEmailStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckEmailStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckEmailStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EmailStatusService : EmailStatusServiceBase { }
}
