// <autogenerated>
// <copyright file="PurchaseOrderStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order statuses")]
    public partial class GetPurchaseOrderStatuses : StatusSearchModel, IReturn<PurchaseOrderStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order statuses")]
    public partial class GetPurchaseOrderStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatusesDigest", "GET",
            Summary = "Use to get a hash representing each purchase order statuses")]
    public partial class GetPurchaseOrderStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order status")]
    public partial class GetPurchaseOrderStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get purchase order status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order status by the custom key")]
    public partial class GetPurchaseOrderStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get purchase order status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order status by the name")]
    public partial class GetPurchaseOrderStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get purchase order status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order status by the name")]
    public partial class GetPurchaseOrderStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check purchase order status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order status.")]
    public partial class CreatePurchaseOrderStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order status (as needed).")]
    public partial class UpsertPurchaseOrderStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order status.")]
    public partial class UpdatePurchaseOrderStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order status from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order status from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order status from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order status from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order status from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderStatus.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order status from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order status calls.")]
    public class ClearPurchaseOrderStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, PurchaseOrderStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderStatusesForConnect request)
        {
            return await Workflows.PurchaseOrderStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatusesDigest request)
        {
            return await Workflows.PurchaseOrderStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PurchaseOrderStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PurchaseOrderStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStatusExistsByID request)
        {
            return await Workflows.PurchaseOrderStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStatusExistsByKey request)
        {
            return await Workflows.PurchaseOrderStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStatusExistsByName request)
        {
            return await Workflows.PurchaseOrderStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStatusExistsByDisplayName request)
        {
            return await Workflows.PurchaseOrderStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStatusDataAsync,
                    () => Workflows.PurchaseOrderStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderStatusCache request)
        {
            await ClearCachedPurchaseOrderStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderStatuses>(string.Empty),
                    UrnId.Create<GetPurchaseOrderStatusByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderStatusByKey>(string.Empty),
                    UrnId.Create<GetPurchaseOrderStatusByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderStatusService : PurchaseOrderStatusServiceBase { }
}
