<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var processedNames = new List<string> { "Status", "State", "Type", "RoleUser", "Report" };
#>// <autogenerated>
// <copyright file="IWorkflows.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Workflow Interfaces</summary>
// <remarks>This file was auto-generated by IWorkflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
// ReSharper disable InvalidXmlDocComment
#pragma warning disable CS0618
namespace Clarity.Ecommerce.Interfaces.Workflow
{
    using DataModel;
    using Ecommerce.DataModel;
    using Models;

<#  foreach (var group in tableClasses)
    {
        var count = 0; #>
    #region <#= group.Key #>
<#      foreach (var theType in group) {
            var name = theType.Name;
            var td = new TypeDeterminer(theType);
            if (td.IsExcludedFromT4 || processedNames.Contains(name)) { continue; }
            ++count;
            processedNames.Add(theType.Name);
            var modelName = HelpFunctions.SwapToModelType(theType.Name);
            var modelSuffix = modelName == "SalesItemBase" ? "<IApplied" + theType.Name + "DiscountModel>" : ""; #>
<# if (count > 1) { #>

<# } #>
    /// <summary>Interface for <#= HelpFunctions.SplitCamelCase(modelName) #> workflow.</summary>
<#         if (td.IsISalesCollectionBase) { #>
    /// <seealso cref="ISalesCollectionWorkflowBase{I<#= modelName #>Model,I<#= modelName #>SearchModel,I<#= theType.Name #>,<#= theType.Name #>,<#=
                theType.Name #>Status,<#= theType.Name #>Type,I<#= theType.Name #>Item,<#= theType.Name #>Item,Applied<#= theType.Name #>Discount,<#=
                theType.Name #>State,<#= theType.Name #>File,<#= theType.Name #>Contact,Applied<#= theType.Name #>ItemDiscount,<#= theType.Name
                #>ItemTarget,<#= theType.Name #>Event,<#= theType.Name #>EventType}"/>
<#         } else if (td.IsISalesEventBase) { #>
    /// <seealso cref="ISalesEventWorkflowBase{I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>, <#= theType.Name #>Type, <#= theType.Name.Replace("Event", string.Empty) #>}"/>
<#         } else if (td.IsITypableBase) { #>
    /// <seealso cref="ITypableWorkflowBase{I<#= modelName #>Model,I<#= modelName #>SearchModel,I<#= theType.Name #>,<#= theType.Name #>}"/>
<#         } else if (td.IsIStatusableBase) { #>
    /// <seealso cref="IStatusableWorkflowBase{I<#= modelName #>Model,I<#= modelName #>SearchModel,I<#= theType.Name #>,<#= theType.Name #>}"/>
<#         } else if (td.IsIStateableBase) { #>
    /// <seealso cref="IStateableWorkflowBase{I<#= modelName #>Model,I<#= modelName #>SearchModel,I<#= theType.Name #>,<#= theType.Name #>}"/>
<#         } else if (td.IsINameableBase) { #>
    /// <seealso cref="INameableWorkflowBase{I<#= modelName #>Model,I<#= modelName #>SearchModel,I<#= theType.Name #>,<#= theType.Name #>}"/>
<#         } else { #>
    /// <seealso cref="IWorkflowBase{I<#= modelName #>Model,I<#= modelName #>SearchModel,I<#= theType.Name #>,<#= theType.Name #>}"/>
<#         } #>
<#         if (td.IsIHaveSeoBase) { #>
    /// <seealso cref="IWorkflowBaseHasGetBySeoUrl{I<#= modelName #>Model}"/>
<#         } #>
    public partial interface I<#= theType.Name #>Workflow
<#         if (td.IsISalesCollectionBase) { #>
        : ISalesCollectionWorkflowBase<I<#= modelName #>Model,
            I<#= modelName #>SearchModel,
            I<#= theType.Name #>,
            <#= theType.Name #>,
            <#= theType.Name #>Status,
            <#= theType.Name #>Type,
            I<#= theType.Name #>Item,
            <#= theType.Name #>Item,
            Applied<#= theType.Name #>Discount,
            <#= theType.Name #>State,
            <#= theType.Name #>File,
            <#= theType.Name #>Contact,
            Applied<#= theType.Name #>ItemDiscount,
            <#= theType.Name #>ItemTarget,
            <#= theType.Name #>Event,
            <#= theType.Name #>EventType>
<#         } else if (td.IsISalesEventBase) { #>
        : ISalesEventWorkflowBase<I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>, <#= theType.Name #>Type, <#= theType.Name.Replace("Event", string.Empty) #>>
<#         } else if (td.IsITypableBase) { #>
        : ITypableWorkflowBase<I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>>
<#         } else if (td.IsIStatusableBase) { #>
        : IStatusableWorkflowBase<I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>>
<#         } else if (td.IsIStateableBase) { #>
        : IStateableWorkflowBase<I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>>
<#         } else if (td.IsIAmATrackedEventBase) { #>
        : IAmATrackedEventWorkflowBase<I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>, I<#=
                HelpFunctions.SwapToModelType(td.RelatedStatusType.Name) #>Model, <#= theType.Name #>Status>
<#         } else if (td.IsINameableBase) { #>
        : INameableWorkflowBase<I<#= modelName #>Model<#= modelSuffix #>, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>>
<#         } else { #>
        : IWorkflowBase<I<#= modelName #>Model, I<#= modelName #>SearchModel, I<#= theType.Name #>, <#= theType.Name #>>
<#         } #>
<#         if (td.IsIHaveSeoBase) { #>
        , IWorkflowBaseHasGetBySeoUrl<I<#= modelName #>Model>
<#         } #>
    {
    }
<#      } #>
    #endregion
<#  } #>

    public partial interface IWorkflowsController
    {
<#  var count2 = 0;
    foreach (var group in tableClasses) {
        foreach (var theType in group) {
            if (new string[]
                { "RoleUser", "UserClaim", "UserLogin", "AccountUserRole", "UserRole", "Report", "Hangfire",
                    "HangfireAggregatedCounter", "HangfireCounter", "HangfireHash", "HangfireJob", "HangfireJobParameter",
                    "HangfireJobQueue", "HangfireList", "HangfireSchema", "HangfireServer", "HangfireSet", "HangfireState"
                }.Contains(theType.Name))
            {
                continue;
            }
            var td = new TypeDeterminer(theType);
            if (td.IsExcludedFromT4) { continue; }
            ++count2;
            // var modelName = HelpFunctions.SwapToModelType(theType.Name);
            // var modelSuffix = modelName == "SalesItemBase" ? "<IApplied" + theType.Name + "DiscountModel>" : "";
            var pluralized = HelpFunctions.PluralizeName(theType.Name); #>
<# if (count2 > 1) { #>

<# } #>
        /// <summary>Gets the <#= HelpFunctions.SplitCamelCase(pluralized) #> workflow.</summary>
        /// <value>The <#= HelpFunctions.SplitCamelCase(pluralized) #> workflow.</value>
        I<#= theType.Name #>Workflow <#= pluralized #> { get; }
<#      } #>
<#  } // foreach (IGrouping<string, Type> group in tableClasses)#>
    }
}
