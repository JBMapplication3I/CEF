<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var processedNames = new List<string> { "Status", "State", "Type", "RoleUser", "Report" };
var interfacesAdded = new List<string>();
#>// <autogenerated>
// <copyright file="IAssociationWorkflows.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Association Workflow Interfaces</summary>
// <remarks>This file was auto-generated by IAssociationWorkflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
// ReSharper disable InvalidXmlDocComment
#pragma warning disable CS0618
namespace Clarity.Ecommerce.Interfaces.Workflow
{
    using DataModel;
    using Models;

<#  foreach (var group in tableClasses) { #>
    #region <#= group.Key #>
<#      foreach (var theType in group)
        {
            var name = theType.Name;
            var td = new TypeDeterminer(theType);
            if (td.IsExcludedFromT4 || processedNames.Contains(name)) { continue; }
            processedNames.Add(theType.Name);
            var propertiesToAssociate = theType.GetPublicProperties()
                .Where(x => x.PropertyType.IsGenericType && x.PropertyType.Name == "ICollection`1")
                .ToList();
            var count = 0; #>
    #region <#= name #>
<#          foreach (var property in propertiesToAssociate)
            {
                ++count;
                var collectionType = property.GetMethod.ReturnType.GenericTypeArguments[0];
                if (collectionType.Name == "UserClaim"
                    || collectionType.Name == "AccountUserRole"
                    || collectionType.Name == "UserRole"
                    || collectionType.Name == "RoleUser"
                    || collectionType.Name == "UserLogin"
                    || property.Name == "Children")
                { #>
<# if (count > 1) { #>

<# } #>
    // Skipped: Not supposed to make it or fully deprecated: <#= property.Name #>
<#                  continue;
                }
                var dontMapIn = property.GetCustomAttributes<DontMapInWithAssociateWorkflowsAttribute>().Any() || property.GetCustomAttributes<DontMapInEverAttribute>().Any();
                if (dontMapIn)
                { #>
<# if (count > 1) { #>

<# } #>
    // Skipped: Not supposed to map this property in via this manner: <#= property.Name #>
<#                  continue;
                }
                var dontCreateDuringMapIn = property.GetCustomAttributes<AllowMapInWithAssociateWorkflowsButDontAutoGenerateAttribute>().Any() || property.GetCustomAttributes<DontMapInEverAttribute>().Any();
                var td2 = new TypeDeterminer(collectionType);
                var td3 = td2.IsIAmARelationshipTable ? new TypeDeterminer(td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType : td2.RelationshipSecondaryType) : null;
#>
<# if (count > 1) { #>

<# } #>
    /// <summary>Interface for a workflow to associate <#= HelpFunctions.PluralizeName(name) #> with their <#= property.Name #>.</summary>
    /// <seealso cref="IAssociateObjectsWorkflowBase{I<#= HelpFunctions.SwapToModelType(name) #>Model, I<#= name #>}"/>
<#
                if (td.IsDeprecated) { #>
    [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#              } else if (td2.IsDeprecated) { #>
    [Obsolete("<#= td2.DeprecatedMessage #>", false)]
<#              } #>
<#              interfacesAdded.Add("I" + name + "With" + property.Name + "AssociationWorkflow"); #>
    public partial interface I<#= name #>With<#= property.Name #>AssociationWorkflow
        : IAssociateObjectsWorkflowBase<I<#= HelpFunctions.SwapToModelType(name) #>Model<#= HelpFunctions.SwapToModelType(name) == "SalesItemBase" ? "<IApplied" + name + "DiscountModel>" : "" #>, I<#= name #>> { }
<#          } #>
<#          if (count <= 0) { #>
    // None
<#          } #>
    #endregion
<#      } #>
    #endregion
<#  } #>

    /// <summary>Interface for workflows controller.</summary>
    public partial interface IWorkflowsController
    {
<#  var count2 = 0;
    foreach (var iface in interfacesAdded) {
        var name = iface.Substring(1, iface.Length - 1 - "Workflow".Length);
        ++count2; #>
<# if (count2 > 1) { #>

<# } #>
        /// <summary>Gets the <#= HelpFunctions.SplitCamelCase(name) #> workflow.</summary>
        /// <value>The <#= HelpFunctions.SplitCamelCase(name) #> workflow.</value>
        <#= iface #> <#= name #> { get; }
<#  } // foreach (var iface in interfacesAdded)#>
    }
}
