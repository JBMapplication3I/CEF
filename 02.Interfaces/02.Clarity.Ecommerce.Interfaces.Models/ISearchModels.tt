<#@ template hostSpecific="true" language="C#"
#><#@ output extension=".cstxt"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
List<string> processedNames = new List<string>() { "Report", "Contact", "Type", "Status", "State", "SalesItemBase" };
List<string> skipProperties = new List<string> {
    "ID", "CustomKey", "Active", "CreatedDate", "UpdatedDate", "Hash", "SerializableAttributes", "JsonAttributes",
    "OriginalBytes", "ThumbnailBytes", "Role", "Bytes", "Template"
};
foreach (var @group in tableClasses)
{
    foreach (var theType in @group)
    {
        var name = HelpFunctions.SwapToModelType(theType.Name);
        if (processedNames.Contains(name))
        { #>
// <#= theType.Name #>-><#= name #> skipped (Already Processed)
<#          SaveOutput(@group.Key.Replace("System", "Structure") + "\\I" + theType.Name + "SearchModel", "generated.cstxt", true);
            continue;
        }
        processedNames.Add(name);
        var td = new TypeDeterminer(theType);
        if (td.IsExcludedFromT4)
        { #>
// <#= theType.Name #>-><#= name #> skipped (IsExcludedFromT4)
<#          SaveOutput(@group.Key.Replace("System", "Structure") + "\\I" + theType.Name + "SearchModel", "generated.cstxt", true);
            continue;
        }
        List<string> thisSkipProperties = new List<string>(skipProperties);
#>// <autogenerated>
// <copyright file="<#= theType.Name #>.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ISearchModel Interfaces generated to provide base setups.</summary>
// <remarks>This file was auto-generated by ISearchModels.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable BadEmptyBracesLineBreaks, PartialTypeWithSinglePart, RedundantExtendsListEntry, RedundantUsingDirective
#pragma warning disable IDE0005_gen
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;

    /// <summary>Interface for <#= HelpFunctions.SplitCamelCase(theType.Name).ToLower() #> model.</summary>
<#      if (td.IsISalesCollectionBase) { #>
    /// <seealso cref="ISalesCollectionBaseSearchModel"/>
<#      } else if (td.IsISalesItemBase) { #>
    /// <seealso cref="ISalesItemBaseSearchModel"/>
<#      } else if (td.IsISalesEventBase) { #>
    /// <seealso cref="ISalesEventBaseSearchModel"/>
<#      } else { #>
    /// <seealso cref="I<#= td.IsIStatusableBase ? "Statusable" : string.Empty
        #><#= td.IsIStateableBase ? "Stateable" : string.Empty
        #><#= td.IsITypableBase ? "Typable" : string.Empty
        #><#= td.IsIAmARelationshipTable ? "AmARelationshipTable" : string.Empty
        #><#= !td.IsIStatusableBase && !td.IsITypableBase && td.IsINameableBase ? "Nameable" : string.Empty #>BaseSearchModel"/>
<#      } #>
<#      if (td.IsIAmARelationshipTable) { #>
    /// <seealso cref="IAmARelationshipTableBaseSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByAccountT || td.IsIAmFilterableByAccount || td.IsIAmFilterableByNullableAccount) { #>
    /// <seealso cref="IAmFilterableByAccountSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByBrandT || td.IsIAmFilterableByBrand || td.IsIAmFilterableByNullableBrand) { #>
    /// <seealso cref="IAmFilterableByBrandSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByCategoryT || td.IsIAmFilterableByCategory || td.IsIAmFilterableByNullableCategory) { #>
    /// <seealso cref="IAmFilterableByCategorySearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByFranchiseT || td.IsIAmFilterableByFranchise || td.IsIAmFilterableByNullableFranchise) { #>
    /// <seealso cref="IAmFilterableByFranchiseSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByManufacturerT || td.IsIAmFilterableByManufacturer || td.IsIAmFilterableByNullableManufacturer) { #>
    /// <seealso cref="IAmFilterableByManufacturerSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByProductT || td.IsIAmFilterableByProduct || td.IsIAmFilterableByNullableProduct) { #>
    /// <seealso cref="IAmFilterableByProductSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByStoreT || td.IsIAmFilterableByStore || td.IsIAmFilterableByNullableStore) { #>
    /// <seealso cref="IAmFilterableByStoreSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByUserT || td.IsIAmFilterableByUser || td.IsIAmFilterableByNullableUser) { #>
    /// <seealso cref="IAmFilterableByUserSearchModel"/>
<#      } #>
<#      if (td.IsIAmFilterableByVendorT || td.IsIAmFilterableByVendor || td.IsIAmFilterableByNullableVendor) { #>
    /// <seealso cref="IAmFilterableByVendorSearchModel"/>
<#      } #>
<#      if (td.IsIHaveATypeBase) { #>
    /// <seealso cref="IHaveATypeBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveAStatusBase) { #>
    /// <seealso cref="IHaveAStatusBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveAStateBase) { #>
    /// <seealso cref="IHaveAStateBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveAContactBase || td.IsIHaveANullableContactBase) { #>
    /// <seealso cref="IHaveAContactBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveAParentBase) { #>
    /// <seealso cref="IHaveAParentBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveRequiresRolesBase && false) { /* Not implemented yet */ #>
    /// <seealso cref="IHaveRequiresRolesBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveSeoBase) { #>
    /// <seealso cref="IHaveSeoBaseSearchModel"/>
<#      } #>
<#      if (td.IsIHaveNotesBase && false) { /* Not implemented yet */ #>
    /// <seealso cref="IHaveNotesBaseSearchModel"/>
<#      } #>
<#      if (td.IsDeprecated) { #>
    /// <obsolete><#= td.DeprecatedMessage #></obsolete>
    [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#      } #>
    public partial interface I<#= HelpFunctions.SwapToModelType(theType.Name) #>SearchModel
<#      if (td.IsISalesCollectionBase) { thisSkipProperties.AddRange(new[] { "AccountID", "UserID", }); #>
        : ISalesCollectionBaseSearchModel
<#      } else if (td.IsISalesItemBase) { #>
        : ISalesItemBaseSearchModel
<#      } else if (td.IsISalesEventBase) { #>
        : ISalesEventBaseSearchModel
<#      } else { #>
        : I<#= td.IsIStatusableBase ? "Statusable" : string.Empty
            #><#= td.IsIStateableBase ? "Stateable" : string.Empty
            #><#= td.IsITypableBase ? "Typable" : string.Empty
            #><#= !td.IsIStatusableBase && !td.IsIStateableBase && !td.IsITypableBase && td.IsINameableBase ? "Nameable" : string.Empty #>BaseSearchModel
<#      } #>
<#      if (td.IsIAmARelationshipTable) { #>
            , IAmARelationshipTableBaseSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByAccountT || td.IsIAmFilterableByAccount || td.IsIAmFilterableByNullableAccount) { thisSkipProperties.AddRange(new[] { "AccountID" }); #>
            , IAmFilterableByAccountSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByBrandT || td.IsIAmFilterableByBrand || td.IsIAmFilterableByNullableBrand) { thisSkipProperties.AddRange(new[] { "BrandID", "BrandName" }); #>
            , IAmFilterableByBrandSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByFranchiseT || td.IsIAmFilterableByFranchise || td.IsIAmFilterableByNullableFranchise) { thisSkipProperties.AddRange(new[] { "FranchiseID", "FranchiseName" }); #>
            , IAmFilterableByFranchiseSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByCategoryT || td.IsIAmFilterableByCategory || td.IsIAmFilterableByNullableCategory) { thisSkipProperties.AddRange(new[] { "CategoryID" }); #>
            , IAmFilterableByCategorySearchModel
<#      } #>
<#      if (td.IsIAmFilterableByManufacturerT || td.IsIAmFilterableByManufacturer || td.IsIAmFilterableByNullableManufacturer) { thisSkipProperties.AddRange(new[] { "ManufacturerID" }); #>
            , IAmFilterableByManufacturerSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByProductT || td.IsIAmFilterableByProduct || td.IsIAmFilterableByNullableProduct) { thisSkipProperties.AddRange(new[] { "ProductID" }); #>
            , IAmFilterableByProductSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByStoreT || td.IsIAmFilterableByStore || td.IsIAmFilterableByNullableStore) { thisSkipProperties.AddRange(new[] { "StoreID" }); #>
            , IAmFilterableByStoreSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByUserT || td.IsIAmFilterableByUser || td.IsIAmFilterableByNullableUser) { thisSkipProperties.AddRange(new[] { "UserID" }); #>
            , IAmFilterableByUserSearchModel
<#      } #>
<#      if (td.IsIAmFilterableByVendorT || td.IsIAmFilterableByVendor || td.IsIAmFilterableByNullableVendor) { thisSkipProperties.AddRange(new[] { "VendorID" }); #>
            , IAmFilterableByVendorSearchModel
<#      } #>
<#      if (td.IsIHaveATypeBase && !td.IsISalesEventBase) { thisSkipProperties.AddRange(new[] { "TypeID", "Type" }); #>
            , IHaveATypeBaseSearchModel
<#      } #>
<#      if (td.IsIHaveAStatusBase) { thisSkipProperties.AddRange(new[] { "StatusID", "Status" }); #>
            , IHaveAStatusBaseSearchModel
<#      } #>
<#      if (td.IsIHaveAStateBase) { thisSkipProperties.AddRange(new[] { "StateID", "State" }); #>
            , IHaveAStateBaseSearchModel
<#      } #>
<#      if (td.IsIHaveAContactBase || td.IsIHaveANullableContactBase) { thisSkipProperties.AddRange(new[] { "ContactID" }); #>
            , IHaveAContactBaseSearchModel
<#      } #>
<#      if (td.IsIHaveAParentBase) { thisSkipProperties.AddRange(new[] { "ParentID" }); #>
            , IHaveAParentBaseSearchModel
<#      } #>
<#      if (td.IsIHaveRequiresRolesBase && false) { /* Not implemented yet */ #>
            , IHaveRequiresRolesBaseSearchModel
<#      } #>
<#      if (td.IsIHaveSeoBase) { thisSkipProperties.AddRange(new[] { "SeoDescription", "SeoKeywords", "SeoMetaData", "SeoPageTitle", "SeoUrl" }); #>
            , IHaveSeoBaseSearchModel
<#      } #>
<#      if (td.IsIHaveNotesBase && false) { thisSkipProperties.AddRange(new[] { "Notes" }); /* Not implemented yet */ #>
            , IHaveNotesBaseSearchModel
<#      } #>
    {
<#
        if (td.IsINameableBase)
        {
            thisSkipProperties.AddRange(new[] { "Name", "Description" });
        }
        if (td.IsIDisplayableBase)
        {
            thisSkipProperties.AddRange(new[] { "DisplayName", "SortOrder", "TranslationKey" });
        }
        if (td.IsIHaveATypeBase)
        {
            thisSkipProperties.AddRange(new[] { "TypeID" });
        }
        if (td.IsIHaveAStatusBase)
        {
            thisSkipProperties.AddRange(new[] { "StatusID", "Status" });
        }
        if (td.IsIHaveAStateBase)
        {
            thisSkipProperties.AddRange(new[] { "StateID", "State" });
        }
        if (td.IsIAmARelationshipTable)
        {
            thisSkipProperties.AddRange(new[] { "MasterID", "Master", "SlaveID", "Slave" });
        }
        if (td.IsIHaveSeoBase)
        {
            thisSkipProperties.AddRange(new[] { "SeoDescription", "SeoKeywords", "SeoMetaData", "SeoPageTitle", "SeoUrl" });
        }
        if (td.IsIAmAStoredFileRelationshipTable)
        {
            thisSkipProperties.AddRange(new[] { "SortOrder" });
        }
        if (td.IsISalesEventBase)
        {
            thisSkipProperties.AddRange(new[]
            {
                "MasterID", "Master",
                "OldStateID", "NewStateID",
                "OldStatusID", "NewStatusID",
                "OldTypeID", "NewTypeID",
                "OldHash", "NewHash",
                "OldRecordSerialized", "NewRecordSerialized",
                "OldBalanceDue", "NewBalanceDue",
            });
        }
        if (td.IsISalesItemBase)
        {
            thisSkipProperties.AddRange(new[]
            {
                "Sku", "ForceUniqueLineItemKey", "UnitOfMeasure",
                "Quantity", "QuantityBackOrdered", "QuantityPreSold",
                "UnitCorePrice", "UnitSoldPrice", "UnitCorePriceInSellingCurrency", "UnitSoldPriceInSellingCurrency",
                "MasterID", "OriginalCurrencyID", "SellingCurrencyID", "ProductID", "UserID",
            });
        }
        if (td.IsIAmFilterableByAccountT || td.IsIAmFilterableByAccount || td.IsIAmFilterableByNullableAccount)
        {
            thisSkipProperties.AddRange(new[] { "AccountID" });
        }
        if (td.IsIAmFilterableByBrandT || td.IsIAmFilterableByBrand || td.IsIAmFilterableByNullableBrand)
        {
            thisSkipProperties.AddRange(new[] { "BrandID" });
        }
        if (td.IsIAmFilterableByFranchiseT || td.IsIAmFilterableByFranchise || td.IsIAmFilterableByNullableFranchise)
        {
            thisSkipProperties.AddRange(new[] { "FranchiseID" });
        }
        if (td.IsIAmFilterableByCategoryT || td.IsIAmFilterableByCategory || td.IsIAmFilterableByNullableCategory)
        {
            thisSkipProperties.AddRange(new[] { "CategoryID" });
        }
        if (td.IsIAmFilterableByManufacturerT || td.IsIAmFilterableByManufacturer || td.IsIAmFilterableByNullableManufacturer)
        {
            thisSkipProperties.AddRange(new[] { "ManufacturerID" });
        }
        if (td.IsIAmFilterableByProductT || td.IsIAmFilterableByProduct || td.IsIAmFilterableByNullableProduct)
        {
            thisSkipProperties.AddRange(new[] { "ProductID" });
        }
        if (td.IsIAmFilterableByStoreT || td.IsIAmFilterableByStore || td.IsIAmFilterableByNullableStore)
        {
            thisSkipProperties.AddRange(new[] { "StoreID" });
        }
        if (td.IsIAmFilterableByUserT || td.IsIAmFilterableByUser || td.IsIAmFilterableByNullableUser)
        {
            thisSkipProperties.AddRange(new[] { "UserID" });
        }
        if (td.IsIAmFilterableByVendorT || td.IsIAmFilterableByVendor|| td.IsIAmFilterableByNullableVendor)
        {
            thisSkipProperties.AddRange(new[] { "VendorID" });
        }
        List<PropertyInfo> properties = theType.GetProperties()
            .Where(x => !thisSkipProperties.Contains(x.Name)
                && x.PropertyType.Name != "ICollection`1"
                && x.PropertyType.GetInterface("IBase") == null
                && x.GetCustomAttribute<NotMappedAttribute>() == null)
            .OrderBy(x => x.PropertyType.Name)
            .ThenBy(x => x.Name)
            .ToList();
        bool first = true;
        foreach (PropertyInfo p in properties) { #>
<#          if (p.PropertyType == typeof(DateTime) || p.PropertyType == typeof(DateTime?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the minimum <#= p.Name #>.</summary>
        /// <value>The minimum <#= p.Name #>.</value>
        DateTime? Min<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the maximum <#= p.Name #>.</summary>
        /// <value>The maximum <#= p.Name #>.</value>
        DateTime? Max<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the match <#= p.Name #>.</summary>
        /// <value>The match <#= p.Name #>.</value>
        DateTime? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(DateTime?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(decimal) || p.PropertyType == typeof(decimal?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the minimum <#= p.Name #>.</summary>
        /// <value>The minimum <#= p.Name #>.</value>
        decimal? Min<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the maximum <#= p.Name #>.</summary>
        /// <value>The maximum <#= p.Name #>.</value>
        decimal? Max<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the match <#= p.Name #>.</summary>
        /// <value>The match <#= p.Name #>.</value>
        decimal? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(decimal?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(long) || p.PropertyType == typeof(long?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the minimum <#= p.Name #>.</summary>
        /// <value>The minimum <#= p.Name #>.</value>
        long? Min<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the maximum <#= p.Name #>.</summary>
        /// <value>The maximum <#= p.Name #>.</value>
        long? Max<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the match <#= p.Name #>.</summary>
        /// <value>The match <#= p.Name #>.</value>
        long? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(long?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(bool) || p.PropertyType == typeof(bool?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the <#= p.Name #>.</summary>
        /// <value>The <#= p.Name #>.</value>
        bool? <#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(bool?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(Guid) || p.PropertyType == typeof(Guid?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the <#= p.Name #>.</summary>
        /// <value>The <#= p.Name #>.</value>
        Guid? <#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(Guid?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if ((p.PropertyType == typeof(int) || p.PropertyType == typeof(int?)) && p.Name.EndsWith("ID")) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the <#= p.Name #>.</summary>
        /// <value>The <#= p.Name #>.</value>
        int? <#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(int?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(string)/* || p.PropertyType == typeof(string?)*/) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the <#= p.Name #>.</summary>
        /// <value>The <#= p.Name #>.</value>
        string? <#= p.Name #> { get; set; }

        /// <summary>Gets or sets the match <#= p.Name #> strict requirement.</summary>
        /// <value>The match <#= p.Name #> strict requirement.</value>
        bool? <#= p.Name #>Strict { get; set; }
<#              if (/*p.PropertyType == typeof(string?)*/true) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(int) || p.PropertyType == typeof(int?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the minimum <#= p.Name #>.</summary>
        /// <value>The minimum <#= p.Name #>.</value>
        int? Min<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the maximum <#= p.Name #>.</summary>
        /// <value>The maximum <#= p.Name #>.</value>
        int? Max<#= p.Name #> { get; set; }

        /// <summary>Gets or sets the match <#= p.Name #>.</summary>
        /// <value>The match <#= p.Name #>.</value>
        int? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(int?)) { #>

        /// <summary>Gets or sets the <#= p.Name #> when matching must include nulls.</summary>
        /// <value>The <#= p.Name #> when matching must include nulls.</value>
        bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else { #>
<#              if (!first) { #>

<#              } #>
        /// <summary>Gets or sets the <#= p.Name #>.</summary>
        /// <value>The <#= p.Name #>.</value>
        <#= p.PropertyType.Name #> <#= p.Name #> { get; set; }
<#          } #>
<#          first = false; #>
<#      } #>
<#      if (td.IsIAmARelationshipTable && td.RelationshipPrimaryTypeTD.IsINameableBase) { #>
<#          if (!first) { #>

<#          } #>
        /// <summary>Gets or sets the name of the master.</summary>
        /// <value>The name of the master.</value>
        string? MasterName { get; set; }
<#          first = false;
        } #>
<#      if (td.IsIAmARelationshipTable && td.RelationshipSecondaryTypeTD.IsINameableBase) { #>
<#          if (!first) { #>

<#          } #>
        /// <summary>Gets or sets the name of the slave.</summary>
        /// <value>The name of the slave.</value>
        string? SlaveName { get; set; }
<#          first = false;
        } #>
    }
}
<#      SaveOutput(@group.Key.Replace("System", "Structure") + "\\I" + theType.Name + "SearchModel", "generated.cs", true);
    }
}
DeleteOldOutputs();
#>
