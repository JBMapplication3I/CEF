// <autogenerated>
// <copyright file="DiscountWorkflow.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Workflow generated to provide base setups</summary>
// <remarks>This file was auto-generated by Workflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
// ReSharper disable ConvertToUsingDeclaration, InvertIf, ReturnValueOfPureMethodIsNotUsed, UnusedMember.Local
#pragma warning disable CS0618,CS1711,CS1572,CS1580,CS1581,CS1584
namespace Clarity.Ecommerce.Workflow
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Interfaces.Workflow;
    using Mapper;
    using Utilities;

    /// <summary>A workflow for Discount entities.</summary>
    /// <seealso cref="NameableWorkflowBase{IDiscountModel, IDiscountSearchModel, IDiscount, Discount}"/>
    /// <seealso cref="IDiscountWorkflow"/>
    public partial class DiscountWorkflow
        : NameableWorkflowBase<IDiscountModel, IDiscountSearchModel, IDiscount, Discount>
            , IDiscountWorkflow
    {
        #region Mappers
        /// <inheritdoc/>
        protected override Func<Discount?, string?, IDiscountModel?> MapFromConcreteFull
            => ModelMapperForDiscount.MapDiscountModelFromEntityFull;

        /// <inheritdoc/>
        protected override Func<IQueryable<Discount>, string?, IEnumerable<IDiscountModel>> SelectLiteAndMapToModel
            => ModelMapperForDiscount.SelectLiteDiscountAndMapToDiscountModel;

        /// <inheritdoc/>
        protected override Func<IQueryable<Discount>, string?, IEnumerable<IDiscountModel>> SelectListAndMapToModel
            => ModelMapperForDiscount.SelectListDiscountAndMapToDiscountModel;

        /// <inheritdoc/>
        protected override Func<IQueryable<Discount>, string?, IDiscountModel?> SelectFirstFullAndMapToModel
            => ModelMapperForDiscount.SelectFirstFullDiscountAndMapToDiscountModel;

        /// <inheritdoc/>
        protected override Func<IDiscount, IDiscountModel, DateTime, DateTime?, IDiscount> UpdateEntityFromModel
            => ModelMapperForDiscount.UpdateDiscountFromModel;
        #endregion

        /// <inheritdoc/>
        protected override async Task<IQueryable<Discount>> FilterQueryByModelExtensionAsync(
            IQueryable<Discount> query,
            IDiscountSearchModel search,
            IClarityEcommerceEntities context)
        {
            return (await base.FilterQueryByModelExtensionAsync(query, search, context).ConfigureAwait(false))
                .FilterDiscountsBySearchModel(search);
        }

        /// <inheritdoc/>
        protected override async Task RunDefaultAssociateWorkflowsAsync(
            IDiscount entity,
            IDiscountModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            await RunDefaultAssociateWorkflowsAsync(entity, model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        protected override async Task RunDefaultAssociateWorkflowsAsync(
            IDiscount entity,
            IDiscountModel model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            await Workflows.AssociateJsonAttributes.AssociateObjectsAsync(entity, model, context).ConfigureAwait(false);
            SetDefaultJsonAttributesIfNull(entity);
            if (model.Products != null) { await Workflows.DiscountWithProductsAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            if (model.Brands != null) { await Workflows.DiscountWithBrandsAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            // Skipped: Not supposed to map this property in via this manner: Franchises
            // Skipped: Not supposed to map this property in via this manner: Stores
            // Skipped: Not supposed to map this property in via this manner: Accounts
            // Skipped: Not supposed to map this property in via this manner: Users
            // Skipped: Not supposed to map this property in via this manner: Vendors
            // Skipped: Not supposed to map this property in via this manner: Manufacturers
            if (model.Codes != null) { await Workflows.DiscountWithCodesAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            if (model.Countries != null) { await Workflows.DiscountWithCountriesAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            if (model.UserRoles != null) { await Workflows.DiscountWithUserRolesAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            // Skipped: Not supposed to map this property in via this manner: Categories
            if (model.AccountTypes != null) { await Workflows.DiscountWithAccountTypesAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            if (model.ProductTypes != null) { await Workflows.DiscountWithProductTypesAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            if (model.ShipCarrierMethods != null) { await Workflows.DiscountWithShipCarrierMethodsAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
        }

        #region Relate Workflows
        /// <inheritdoc/>
        protected override async Task RunDefaultRelateWorkflowsAsync(
            IDiscount entity,
            IDiscountModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            await RunDefaultRelateWorkflowsAsync(entity, model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        // ReSharper disable AsyncConverter.AsyncAwaitMayBeElidedHighlighting, RedundantAwait
#pragma warning disable 1998
        protected override async Task RunDefaultRelateWorkflowsAsync(
#pragma warning restore 1998
            IDiscount entity,
            IDiscountModel model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            // None to process
        }
        // ReSharper restore AsyncConverter.AsyncAwaitMayBeElidedHighlighting, RedundantAwait
        #endregion // Relate Workflows
    }
}
