<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
List<string> processedNames = new List<string>() { "Status", "State", "Type", "RoleUser", "Report" };
List<string> processedNames2 = new List<string>() { "Status", "State", "Type", "RoleUser", "Report" };
#>// <autogenerated>
// <copyright file="WorkflowRegistry.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Workflow StructureMap 4 Registry to associate the interfaces with their concretes</summary>
// <remarks>This file was auto-generated by WorkflowRegistry.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable UnusedMember.Global
#pragma warning disable CS0618 // Obsolete
#if NET5_0_OR_GREATER
namespace Clarity.Ecommerce
{
    using System.Net;
    using Interfaces.Workflow;
    using Lamar;
    using Workflow;

    /// <summary>A workflow registry.</summary>
    /// <seealso cref="ServiceRegistry"/>
    public class WorkflowRegistry : ServiceRegistry
    {
        /// <summary>Initializes a new instance of the <see cref="WorkflowRegistry"/> class.</summary>
        public WorkflowRegistry()
        {
            Use<WorkflowsController>().Singleton().For<IWorkflowsController>();
            Use<ProductKitWorkflow>().Singleton().For<IProductKitWorkflow>();
            Use<AddressBookWorkflow>().Singleton().For<IAddressBookWorkflow>();
            Use<UploadWorkflow>().Singleton().For<IUploadWorkflow>();
            For<IWebClientFactory>().Use<SystemWebClientFactory>();
            #region Association Workflows for Json Attribute
            Use<AssociateJsonAttributesWorkflow>().Singleton().For<IAssociateJsonAttributesWorkflow>();
            #endregion
<#  foreach (var group in tableClasses) { #>
            #region <#= group.Key #>
<#      foreach (Type theType in group)
        {
            string name = theType.Name;
            var td = new TypeDeterminer(theType);
            if (td.IsExcludedFromT4 || processedNames2.Contains(name)) { continue; }
            processedNames2.Add(name);
            var propertiesToAssociate = theType.GetPublicProperties()
                .Where(x => x.PropertyType.IsGenericType && x.PropertyType.Name == "ICollection`1")
                .ToList(); #>
            #region <#= name #>
            Use<<#= name #>Workflow>().Singleton().For<I<#= name #>Workflow>();
<#          foreach (var property in propertiesToAssociate)
            {
                var collectionType = property.GetMethod.ReturnType.GenericTypeArguments[0];
                if (collectionType.Name == "UserClaim"
                    || collectionType.Name == "AccountUserRole"
                    || collectionType.Name == "UserRole"
                    || collectionType.Name == "RoleUser"
                    || collectionType.Name == "UserLogin"
                    || property.Name == "Children")
                { #>
            // Skipped: Not supposed to make it or fully deprecated: <#= property.Name #>
<#                  continue;
                }
                var dontMapIn = property.GetCustomAttributes<DontMapInWithAssociateWorkflowsAttribute>().Any() || property.GetCustomAttributes<DontMapInEverAttribute>().Any();
                if (dontMapIn)
                { #>
            // Skipped: Not supposed to map this property in via this manner: <#= property.Name #>
<#                  continue;
                } #>
            Use<<#= name #>With<#= property.Name #>AssociationWorkflow>().Singleton().For<I<#= name #>With<#= property.Name #>AssociationWorkflow>();
<#          } #>
            #endregion
<#      } #>
            #endregion
<#  } #>
        }
    }
}
#else
namespace Clarity.Ecommerce
{
    using System.Net;
    using Interfaces.Workflow;
    using StructureMap;
    using StructureMap.Pipeline;
    using Workflow;

    /// <summary>A workflow registry.</summary>
    /// <seealso cref="Registry"/>
    public class WorkflowRegistry : Registry
    {
        /// <summary>Initializes a new instance of the <see cref="WorkflowRegistry"/> class.</summary>
        public WorkflowRegistry()
        {
            For<IWorkflowsController>(new SingletonLifecycle()).Use<WorkflowsController>();
            For<IProductKitWorkflow>(new SingletonLifecycle()).Use<ProductKitWorkflow>();
            For<IAddressBookWorkflow>(new SingletonLifecycle()).Use<AddressBookWorkflow>();
            For<IUploadWorkflow>(new SingletonLifecycle()).Use<UploadWorkflow>();
            For<IWebClientFactory>().Use<SystemWebClientFactory>();
            #region Association Workflows for Json Attribute
            For<IAssociateJsonAttributesWorkflow>(new SingletonLifecycle()).Use<AssociateJsonAttributesWorkflow>();
            #endregion
<#  foreach (var group in tableClasses) { #>
            #region <#= group.Key #>
<#      foreach (Type theType in group)
        {
            string name = theType.Name;
            var td = new TypeDeterminer(theType);
            if (td.IsExcludedFromT4 || processedNames.Contains(name)) { continue; }
            processedNames.Add(name);
            var propertiesToAssociate = theType.GetPublicProperties()
                .Where(x => x.PropertyType.IsGenericType && x.PropertyType.Name == "ICollection`1")
                .ToList(); #>
            #region <#= name #>
            For<I<#= name #>Workflow>(new SingletonLifecycle()).Use<<#= name #>Workflow>();
<#          foreach (var property in propertiesToAssociate)
            {
                var collectionType = property.GetMethod.ReturnType.GenericTypeArguments[0];
                if (collectionType.Name == "UserClaim"
                    || collectionType.Name == "AccountUserRole"
                    || collectionType.Name == "UserRole"
                    || collectionType.Name == "RoleUser"
                    || collectionType.Name == "UserLogin"
                    || property.Name == "Children")
                { #>
            // Skipped: Not supposed to make it or fully deprecated: <#= property.Name #>
<#                  continue;
                }
                var dontMapIn = property.GetCustomAttributes<DontMapInWithAssociateWorkflowsAttribute>().Any() || property.GetCustomAttributes<DontMapInEverAttribute>().Any();
                if (dontMapIn)
                { #>
            // Skipped: Not supposed to map this property in via this manner: <#= property.Name #>
<#                  continue;
                } #>
            For<I<#= name #>With<#= property.Name #>AssociationWorkflow>(new SingletonLifecycle()).Use<<#= name #>With<#= property.Name #>AssociationWorkflow>();
<#          } #>
            #endregion
<#      } #>
            #endregion
<#  } #>
        }
    }
}
#endif
