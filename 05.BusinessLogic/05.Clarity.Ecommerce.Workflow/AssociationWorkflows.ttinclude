<#@ Assembly Name="System.Core"
#><#@ Assembly Name="System.Windows.Forms"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Diagnostics"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Text.RegularExpressions"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#+
void GenerateAssociateWorkflowsFile(string schema, Type theType, TypeDeterminer td, List<string> interfacesAdded)
{
    schema = schema.Replace("System", "Structure");
    var name = theType.Name;
    var propertiesToAssociate = theType.GetPublicProperties()
        .Where(x => x.PropertyType.IsGenericType && x.PropertyType.Name == "ICollection`1")
        .ToList();
    var count = 0;
    foreach (var property in propertiesToAssociate)
    {
        ++count;
        var collectionType = property.GetMethod.ReturnType.GenericTypeArguments[0];
        if (collectionType.Name == "UserClaim"
            || collectionType.Name == "UserLogin"
            || collectionType.Name == "AccountUserRole"
            || collectionType.Name == "UserRole"
            || collectionType.Name == "RoleUser"
            || property.Name == "Children")
        { #>
// Skipped: Not supposed to make it or fully deprecated: <#= property.Name #>
<#+         SaveOutput(schema + "\\" + theType.Name + "\\" + theType.Name + "With" + property.Name + "AssociationWorkflows", "generated.cstxt", true);
            continue;
        }
        var dontMapIn = property.GetCustomAttributes<DontMapInWithAssociateWorkflowsAttribute>().Any()
            || property.GetCustomAttributes<DontMapInEverAttribute>().Any();
        if (dontMapIn)
        { #>
// Skipped: Not supposed to map this property in via this manner: <#= property.Name #>
<#+         SaveOutput(schema + "\\" + theType.Name + "\\" + theType.Name + "With" + property.Name + "AssociationWorkflows", "generated.cstxt", true);
            continue;
        }
        var dontUpdateDuringMapIn = property.GetCustomAttributes<AllowLookupAssignInWithAssociateWorkflowsButDontAffectAttribute>().Any();
        var dontCreateDuringMapIn = dontUpdateDuringMapIn
            || property.GetCustomAttributes<AllowMapInWithAssociateWorkflowsButDontAutoGenerateAttribute>().Any();
        var td2 = new TypeDeterminer(collectionType);
        var td3 = td2.IsIAmARelationshipTable ? new TypeDeterminer(td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType : td2.RelationshipSecondaryType) : null;
        var collectionTypeModelName = HelpFunctions.SwapToModelType(collectionType.Name);
        var collectionTypeModelNameSuffix = collectionTypeModelName == "SalesItemBase" ? "<IApplied" + collectionType.Name + "DiscountModel>" : "";
        var collectionTypeModelNameFull = collectionTypeModelName + "Model" + collectionTypeModelNameSuffix;
        var masterModelName = HelpFunctions.SwapToModelType(name);
        var masterModelNameSuffix = masterModelName == "SalesItemBase" ? "<IApplied" + name + "DiscountModel>" : "";
        var masterModelNameFull = masterModelName + "Model" + masterModelNameSuffix;
        var defaultTypeArguments = "<I" + masterModelNameFull + ", I" + name + ", I" + collectionTypeModelNameFull + ", I" + collectionType.Name + ", " + collectionType.Name + ">";
#>// <autogenerated>
// <copyright file="<#= name #>With<#= property.Name #>AssociationWorkflow.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Association Workflow classes for each table</summary>
// <remarks>This file was auto-generated by AssociationWorkflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
// ReSharper disable ConvertIfStatementToNullCoalescingExpression, InvalidXmlDocComment
#pragma warning disable CS0618,CS1998
namespace Clarity.Ecommerce.Workflow
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Interfaces.Workflow;
    using Mapper;
    using Utilities;

    /// <summary>An <#= HelpFunctions.SplitCamelCase(name + property.Name) #> association workflow.</summary>
    /// <seealso cref="AssociateObjectsWorkflowBase{I<#= masterModelName + "Model"
        #>, I<#= name #>, I<#= collectionTypeModelName + "Model"
        #>, I<#= collectionType.Name #>, <#= collectionType.Name #>}"/>
    /// <seealso cref="I<#= name #>With<#= property.Name #>AssociationWorkflow"/>
<#+     if (td.IsDeprecated) { #>
    [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#+     } else if (td2.IsDeprecated) { #>
    [Obsolete("<#= td2.DeprecatedMessage #>", false)]
<#+     } #>
<#+     interfacesAdded.Add("I" + name + "With" + property.Name + "AssociationWorkflow"); #>
    public partial class <#= name #>With<#= property.Name #>AssociationWorkflow
        // ReSharper disable once RedundantExtendsListEntry
<#+     if (property.Name.Contains("Files") && !td.IsIAmAStoredFileRelationshipTable) { #>
        : AssociateStoredFilesWorkflowBase<#= defaultTypeArguments #>
<#+     } else if (property.Name.Contains("Images") && !td.IsIImageBase) { #>
        : AssociateImagesWorkflowBase<#= defaultTypeArguments #>
<#+     } else if (property.Name.Contains("Notes")) { #>
        : AssociateNotesWorkflowBase<#= defaultTypeArguments #>
<#+     } else { #>
        : AssociateObjectsWorkflowBase<#= defaultTypeArguments #>
<#+     } #>
        , I<#= name #>With<#= property.Name #>AssociationWorkflow
    {
        /// <inheritdoc/>
        protected override ICollection<<#= collectionType.Name #>>? GetObjectsCollection(I<#= name #> entity) { return entity.<#= property.Name #>; }

        /// <inheritdoc/>
        protected override List<I<#= collectionTypeModelNameFull #>>? GetModelObjectsList(I<#= masterModelNameFull #> model) { return model.<#= property.Name #>; }

        /// <inheritdoc/>
        protected override async Task AddObjectToObjectsListAsync(I<#= name #> entity, I<#= collectionType.Name #> newEntity)
        {
            if (newEntity == null) { return; }
            entity.<#= property.Name #>!.Add((<#= collectionType.Name #>)newEntity);
        }

        /// <inheritdoc/>
        protected override void InitializeObjectListIfNull(I<#= name #> entity)
        {
            if (entity.<#= property.Name #> != null) { return; }
            entity.<#= property.Name #> = new HashSet<<#= collectionType.Name #>>();
        }

        /// <inheritdoc/>
        protected override async Task DeactivateObjectAsync(I<#= collectionType.Name #> entity, DateTime timestamp)
        {
            // Hook-in to deactivate more custom property assignments
            await DeactivateObjectAdditionalPropertiesAsync(entity, timestamp).ConfigureAwait(false);
            // Deactivate this entity
            entity.Active = false;
            entity.UpdatedDate = timestamp;
        }
<#+     if (td2.IsIHaveATypeBase)
        {
            var collection = new Regex("(Cart|SampleRequest|PurchaseOrder|Sales(Invoice|Order|Quote|Return))ItemTarget")
                .Replace( collectionType.Name.Replace("EmailQueue", "Email"), "SalesItemTarget").Replace("GeneralAttribute", "Attribute"); #>

        private static int UpsertThisEntityTypeAndGetIDInner(
            string? name,
            string? key,
            ITypableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            var entity = string.IsNullOrWhiteSpace(key) ? null : context.<#= collection #>Types.FilterByActive(true).FilterByCustomKey(key, true).SingleOrDefault();
            if (entity == null) { entity = string.IsNullOrWhiteSpace(name) ? null : context.<#= collection #>Types.FilterByActive(true).FilterByName(name, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.CustomKey)) { entity = context.<#= collection #>Types.FilterByActive(true).FilterByName(model!.CustomKey, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.Name)) { entity = context.<#= collection #>Types.FilterByActive(true).FilterByName(model!.Name, true).SingleOrDefault(); }
            if (entity != null) { return entity.ID; } // Return existing
            // Using a separate context here so we don't save a partially modified Store
            var newEntity = RegistryLoaderWrapper.GetInstance<I<#= collection #>Type>(context.ContextProfileName);
            newEntity.Active = true;
            newEntity.CreatedDate = timestamp;
            if (model != null)
            {
                newEntity.CustomKey = model.CustomKey;
                newEntity.Name = model.Name;
                newEntity.DisplayName = model.DisplayName;
                newEntity.SortOrder = model.SortOrder;
            }
            else
            {
                newEntity.CustomKey = key;
                newEntity.Name = name;
            }
            context.<#= collection #>Types.Add((<#= collection #>Type)newEntity);
            if (!context.SaveUnitOfWork(true))
            {
                throw new InvalidOperationException("Saving the Type failed.");
            }
            return newEntity.ID;
        }

        private static int UpsertThisEntityTypeAndGetID(
            string? name,
            string? key,
            ITypableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            Contract.RequiresNotNull(name, key, model);
            return UpsertThisEntityTypeAndGetIDInner(name, key, model, timestamp, context);
        }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveATypeBase)
        { #>

        private int UpsertOtherEntityTypeAndGetIDInner(
            string? name,
            string? key,
            ITypableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            var entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Types.FilterByActive(true).FilterByCustomKey(key, true).SingleOrDefault();
            if (entity == null) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Types.FilterByActive(true).FilterByName(name, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.CustomKey)) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Types.FilterByActive(true).FilterByName(model!.CustomKey, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.Name)) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Types.FilterByActive(true).FilterByName(model!.Name, true).SingleOrDefault(); }
            if (entity != null) { return entity.ID; } // Return existing
            // Using a separate context here so we don't save a partially modified Store
            var newEntity = RegistryLoaderWrapper.GetInstance<I<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Type>(context.ContextProfileName);
            newEntity.Active = true;
            newEntity.CreatedDate = timestamp;
            if (model != null)
            {
                newEntity.CustomKey = model.CustomKey;
                newEntity.Name = model.Name;
                newEntity.DisplayName = model.DisplayName;
                newEntity.SortOrder = model.SortOrder;
            }
            else
            {
                newEntity.CustomKey = key;
                newEntity.Name = name;
            }
            context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Types.Add((<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Type)newEntity);
            if (!context.SaveUnitOfWork(true))
            {
                throw new InvalidOperationException("Saving the Type failed.");
            }
            return newEntity.ID;
        }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveATypeBase)
        { #>
        private int UpsertOtherEntityTypeAndGetID(string name, string key, ITypableBaseModel model, DateTime timestamp, IClarityEcommerceEntities context)
        {
            Contract.RequiresNotNull(name, key, model);
            return UpsertOtherEntityTypeAndGetIDInner(name, key, model, timestamp, context);
        }
<#+     } #>
<#+     if (td2.IsIHaveAStatusBase)
        {
            var collection = new Regex("(Cart|SampleRequest|PurchaseOrder|Sales(Invoice|Order|Quote|Return))ItemTarget")
                .Replace(collectionType.Name.Replace("EmailQueue", "Email"), "SalesItemTarget"); #>

        private static int UpsertThisEntityStatusAndGetIDInner(
            string? name,
            string? key,
            IStatusableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            var entity = context.<#= collection #>Statuses.FilterByActive(true).FilterByCustomKey(key, true).SingleOrDefault();
            if (entity == null) { entity = context.<#= collection #>Statuses.FilterByActive(true).FilterByName(name, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.CustomKey)) { entity = context.<#= collection #>Statuses.FilterByActive(true).FilterByName(model!.CustomKey, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.Name)) { entity = context.<#= collection #>Statuses.FilterByActive(true).FilterByName(model!.Name, true).SingleOrDefault(); }
            if (entity != null) { return entity.ID; } // Return existing
            // Using a separate context here so we don't save a partially modified Store
            var newEntity = RegistryLoaderWrapper.GetInstance<I<#= collection #>Status>(context.ContextProfileName);
            newEntity.Active = true;
            newEntity.CreatedDate = timestamp;
            if (model != null)
            {
                newEntity.CustomKey = model.CustomKey;
                newEntity.Name = model.Name;
                newEntity.DisplayName = model.DisplayName;
                newEntity.SortOrder = model.SortOrder;
            }
            else
            {
                newEntity.CustomKey = key;
                newEntity.Name = name;
            }
            context.<#= collection #>Statuses.Add((<#= collection #>Status)newEntity);
            if (!context.SaveUnitOfWork(true))
            {
                throw new InvalidOperationException("Saving the Type failed.");
            }
            return newEntity.ID;
        }

        private static int UpsertThisEntityStatusAndGetID(
            string? name,
            string? key,
            IStatusableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            Contract.RequiresNotNull(name, key, model);
            return UpsertThisEntityStatusAndGetIDInner(name, key, model, timestamp, context);
        }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveAStatusBase)
        { #>

        private int UpsertOtherEntityStatusAndGetIDInner(
            string? name,
            string? key,
            IStatusableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            var entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Statuses.FilterByActive(true).FilterByCustomKey(key, true).SingleOrDefault();
            if (entity == null) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Statuses.FilterByActive(true).FilterByName(name, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.CustomKey)) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Statuses.FilterByActive(true).FilterByName(model!.CustomKey, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.Name)) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Statuses.FilterByActive(true).FilterByName(model!.Name, true).SingleOrDefault(); }
            if (entity != null) { return entity.ID; } // Return existing
            // Using a separate context here so we don't save a partially modified Store
            var newEntity = RegistryLoaderWrapper.GetInstance<I<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Status>(context.ContextProfileName);
            newEntity.Active = true;
            newEntity.CreatedDate = timestamp;
            if (model != null)
            {
                newEntity.CustomKey = model.CustomKey;
                newEntity.Name = model.Name;
                newEntity.DisplayName = model.DisplayName;
                newEntity.SortOrder = model.SortOrder;
            }
            else
            {
                newEntity.CustomKey = key;
                newEntity.Name = name;
            }
            context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Statuses.Add((<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>Status)newEntity);
            if (!context.SaveUnitOfWork(true))
            {
                throw new InvalidOperationException("Saving the Type failed.");
            }
            return newEntity.ID;
        }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveAStatusBase)
        { #>
        private int UpsertOtherEntityStatusAndGetID(
            string? name,
            string? key,
            IStatusableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            Contract.RequiresNotNull(name, key, model);
            return UpsertOtherEntityStatusAndGetIDInner(name, key, model, timestamp, context);
        }
<#+     } #>
<#+     if (td2.IsIHaveAStateBase)
        { #>

        private static int UpsertThisEntityStateAndGetIDInner(
            string? name,
            string? key,
            IStateableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            var entity = context.<#= collectionType.Name #>States.FilterByActive(true).FilterByCustomKey(key, true).SingleOrDefault();
            if (entity == null) { entity = context.<#= collectionType.Name #>States.FilterByActive(true).FilterByName(name, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.CustomKey)) { entity = context.<#= collectionType.Name #>States.FilterByActive(true).FilterByName(model!.CustomKey, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.Name)) { entity = context.<#= collectionType.Name #>States.FilterByActive(true).FilterByName(model!.Name, true).SingleOrDefault(); }
            if (entity != null) { return entity.ID; } // Return existing
            // Using a separate context here so we don't save a partially modified Store
            var newEntity = RegistryLoaderWrapper.GetInstance<I<#= collectionType.Name #>State>(context.ContextProfileName);
            newEntity.Active = true;
            newEntity.CreatedDate = timestamp;
            if (model != null)
            {
                newEntity.CustomKey = model.CustomKey;
                newEntity.Name = model.Name;
                newEntity.DisplayName = model.DisplayName;
                newEntity.SortOrder = model.SortOrder;
            }
            else
            {
                newEntity.CustomKey = key;
                newEntity.Name = name;
            }
            context.<#= collectionType.Name #>States.Add((<#= collectionType.Name #>State)newEntity);
            if (!context.SaveUnitOfWork(true))
            {
                throw new InvalidOperationException("Saving the Type failed.");
            }
            return newEntity.ID;
        }

        private int UpsertThisEntityStateAndGetID(
            string? name,
            string? key,
            IStateableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            Contract.RequiresNotNull(name, key, model);
            return UpsertThisEntityStateAndGetIDInner(name, key, model, timestamp, context);
        }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveAStateBase)
        { #>

        private int UpsertOtherEntityStateAndGetIDInner(
            string? name,
            string? key,
            IStateableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            var entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>States.FilterByActive(true).FilterByCustomKey(key, true).SingleOrDefault();
            if (entity == null) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>States.FilterByActive(true).FilterByName(name, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.CustomKey)) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>States.FilterByActive(true).FilterByName(model!.CustomKey, true).SingleOrDefault(); }
            if (entity == null && !string.IsNullOrWhiteSpace(model?.Name)) { entity = context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>States.FilterByActive(true).FilterByName(model!.Name, true).SingleOrDefault(); }
            if (entity != null) { return entity.ID; } // Return existing
            // Using a separate context here so we don't save a partially modified Store
            var newEntity = RegistryLoaderWrapper.GetInstance<I<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>State>(context.ContextProfileName);
            newEntity.Active = true;
            newEntity.CreatedDate = timestamp;
            if (model != null)
            {
                newEntity.CustomKey = model.CustomKey;
                newEntity.Name = model.Name;
                newEntity.DisplayName = model.DisplayName;
                newEntity.SortOrder = model.SortOrder;
            }
            else
            {
                newEntity.CustomKey = key;
                newEntity.Name = name;
            }
            context.<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>States.Add((<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #>State)newEntity);
            if (!context.SaveUnitOfWork(true))
            {
                throw new InvalidOperationException("Saving the Type failed.");
            }
            return newEntity.ID;
        }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveAStateBase)
        { #>
        private int UpsertOtherEntityStateAndGetID(
            string? name,
            string? key,
            IStateableBaseModel? model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            Contract.RequiresNotNull(name, key, model);
            return UpsertOtherEntityStateAndGetIDInner(name, key, model, timestamp, context);
        }
<#+     } #>

        /// <inheritdoc/>
        protected override bool ValidateObjectModelIsGoodForDatabase(I<#= collectionTypeModelNameFull #> model)
        {
            return model.Active /* == true */
<#+     if (property.Name == "Notes")
        { #>
                // == Note Properties =====
                    // Check the note content (required)
                    && !string.IsNullOrWhiteSpace(model.Note1)
                    // Check the Type is valid by TypeID/TypeKey on this model or ID/CustomKey on the Type model (required)
                    && (Contract.CheckValidIDOrKey(model.TypeID, model.TypeKey)
                        || model.Type != null && Contract.CheckValidIDOrKey(model.Type.ID, model.Type.CustomKey))
                    // No need to check the master (any of them) because we're assigning the master via this collection
                    // No need to check for Created/Updated By User (optional)
<#+     } else { #>
                // No additional default properties to check
<#+     } #>
                // == Hook-in to make additional checks
                && ValidateObjectModelIsGoodForDatabaseAdditionalChecks(model);
        }

        /// <inheritdoc/>
        protected override async Task<bool> MatchObjectModelWithObjectEntityAsync(I<#= collectionTypeModelNameFull #> model, I<#= collectionType.Name #> entity, IClarityEcommerceEntities context)
        {
            return model.CustomKey == entity.CustomKey
                && model.Hash == entity.Hash
                // == Hook-in to make additional checks
                && await MatchObjectModelWithObjectEntityAdditionalChecksAsync(model, entity, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        protected override async Task<I<#= collectionType.Name #>> ModelToNewObjectAsync(
            I<#= collectionTypeModelNameFull #> model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            return await ModelToNewObjectAsync(model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        protected override async Task<I<#= collectionType.Name #>> ModelToNewObjectAsync(
            I<#= collectionTypeModelNameFull #> model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            // Validate
            Contract.RequiresNotNull(model);
<#+     if (td2.IsIHaveATypeBase)
        { #>
            var thisEntityTypeID = Contract.CheckValidID(model.TypeID)
                ? model.TypeID
                : model.Type != null && Contract.CheckValidID(model.Type.ID)
                    ? model.Type.ID
                    : UpsertThisEntityTypeAndGetID(
                        model.TypeName<#= property.Name == "Images" ? " ?? \"General\"" : string.Empty #>,
                        model.TypeKey<#= property.Name == "Images" ? " ?? \"General\"" : string.Empty #>,
                        model.Type,
                        timestamp,
                        context);
            if (thisEntityTypeID <= 0) { throw new ArgumentException("<#= collectionType.Name #> requires a valid Type."); }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveATypeBase && collectionTypeModelName != "Discount")
        { #>
            var otherEntityTypeID = Contract.CheckValidID(model.Slave.TypeID)
                ? model.Slave.TypeID
                : model.Slave.Type != null && Contract.CheckValidID(model.Slave.Type.ID)
                    ? model.Slave.Type.ID
                    : UpsertOtherEntityTypeAndGetID(model.Slave.TypeName, model.Slave.TypeKey, model.Slave.Type, timestamp, context);
            if (otherEntityTypeID <= 0) { throw new ArgumentException("<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #> requires a valid Type."); }
<#+     } #>
<#+     if (td2.IsIHaveAStatusBase)
        { #>
            var thisEntityStatusID = Contract.CheckValidID(model.StatusID)
                ? model.StatusID
                : model.Status != null && Contract.CheckValidID(model.Status.ID)
                    ? model.Status.ID
                    : UpsertThisEntityStatusAndGetID(model.StatusName, model.StatusKey, model.Status, timestamp, context);
            if (thisEntityStatusID <= 0) { throw new ArgumentException("<#= collectionType.Name #> requires a valid Status."); }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveAStatusBase)
        { #>
            var otherEntityStatusID = Contract.CheckValidID(model.Slave.StatusID)
                ? model.Slave.StatusID
                : model.Slave.Status != null && Contract.CheckValidID(model.Slave.Status.ID)
                    ? model.Slave.Status.ID
                    : UpsertOtherEntityStatusAndGetID(model.Slave.StatusName, model.Slave.StatusKey, model.Slave.Status, timestamp, context);
            if (otherEntityStatusID <= 0) { throw new ArgumentException("<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #> requires a valid Status."); }
<#+     } #>
<#+     if (td2.IsIHaveAStateBase)
        { #>
            var thisEntityStateID = Contract.CheckValidID(model.StateID)
                ? model.StateID
                : model.State != null && Contract.CheckValidID(model.State.ID)
                    ? model.State.ID
                    : UpsertThisEntityStateAndGetID(model.StateName, model.StateKey, model.State, timestamp, context);
            if (thisEntityStateID <= 0) { throw new ArgumentException("<#= collectionType.Name #> requires a valid State."); }
<#+     } #>
<#+     if (false && td3 != null && td3.IsIHaveAStateBase)
        { #>
            var otherEntityStateID = Contract.CheckValidID(model.Slave.StateID)
                ? model.Slave.StateID
                : model.Slave.State != null && Contract.CheckValidID(model.Slave.State.ID)
                    ? model.Slave.State.ID
                    : UpsertOtherEntityStateAndGetID(model.Slave.StateName, model.Slave.StateKey, model.Slave.State, timestamp, context);
            if (otherEntityStateID <= 0) { throw new ArgumentException("<#= td2.RelationshipSecondaryType == theType ? td2.RelationshipPrimaryType.Name : td2.RelationshipSecondaryType.Name #> requires a valid State."); }
<#+     } #>
<#+     if (property.Name == "Children")
        { #>
            ////Contract.RequiresValidIDOrKe y(model.Parent?.ID ?? model.ParentID, model.Parent?.CustomKey ?? model.ParentKey);
            ////// Resolve the other object if possible (throw if not)
            ////var otherEntity = (model.ID > 0
            ////    ? context.<#= HelpFunctions.PluralizeName(name) #>.FilterByID(model.ID).SingleOrDefault()
            ////    : null)
            ////    ?? (!string.IsNullOrWhiteSpace(model.CustomKey)
            ////        ? context.<#= HelpFunctions.PluralizeName(name) #>.FilterByCustomKey(model.CustomKey).SingleOrDefault()
            ////        : throw new InvalidOperationException("Must supply the ID or Key of an already existing child (cannot create children in this manner)"));
            ////Contract.RequiresNotNull(otherEntity);
            ////// Create a new entity and populate it with data
            ////var newEntity = model.Create<#= collectionType.Name #>Entity(timestamp, context.ContextProfileName);
            ////newEntity.UpdatedDate = null; // Clear the Updated Date
            ////// Hook-in to add more custom property assignments
            ////await ModelToNewObjectAdditionalPropertiesAsync(newEntity, model, timestamp, context);
            ////// Return the new entity, ready for adding to the DB
            ////return otherEntity;
<#+     }
        else if (collectionType.Name == "Store")
        { #>
            Contract.RequiresValidIDOrKey(model.<#= name #>?.ID ?? model.<#= name #>ID, model.<#= name #>?.CustomKey ?? model.<#= name #>Key);
            // Resolve the master object if possible (throw if not)
            var masterEntity = ((model.<#= name #>?.ID ?? model.<#= name #>ID) > 0
                ? context.<#= HelpFunctions.PluralizeName(name) #>.FilterByID(model.<#= name #>?.ID ?? model.<#= name #>ID).SingleOrDefault()
                : null)
                ?? (!string.IsNullOrWhiteSpace(model.<#= name #>?.CustomKey ?? model.<#= name #>Key)
                    ? context.<#= HelpFunctions.PluralizeName(name) #>.FilterByCustomKey(model.<#= name #>?.CustomKey ?? model.<#= name #>Key).SingleOrDefault()
                    : null);
            Contract.RequiresNotNull(masterEntity, "Must supply the ID or Key of an already existing <#= name #> (cannot create <#= HelpFunctions.PluralizeName(name) #> from Notes)");
            // Create a new entity and populate it with data
            var newEntity = model.Create<#= collectionType.Name #>Entity(timestamp, context.ContextProfileName);
            newEntity.UpdatedDate = null; // Clear the Updated Date
            newEntity.<#= name #>ID = model.<#= name #>?.ID ?? model.<#= name #>ID;
            // Hook-in to add more custom property assignments
            await ModelToNewObjectAdditionalPropertiesAsync(newEntity, model, timestamp, context).ConfigureAwait(false);
            // Return the new entity, ready for adding to the DB
            return newEntity;
<#+     }
        else if (property.Name == "Images")
        { #>
            // Create a new entity and populate it with data
            var newEntity = model.Create<#= collectionType.Name #>Entity(timestamp, context.ContextProfileName);
            newEntity.UpdatedDate = null; // Clear the Updated Date
            newEntity.TypeID = thisEntityTypeID;
            // Hook-in to add more custom property assignments
            await ModelToNewObjectAdditionalPropertiesAsync(newEntity, model, timestamp, context).ConfigureAwait(false);
            // Return the new entity, ready for adding to the DB
            return newEntity;
<#+     }
        else if (property.Name == "Contacts")
        { #>
            // Create a new entity and populate it with data
            var newEntity = model.Create<#= collectionType.Name #>Entity(timestamp, context.ContextProfileName);
            newEntity.UpdatedDate = null; // Clear the Updated Date
            // Hook-in to add more custom property assignments
            await ModelToNewObjectAdditionalPropertiesAsync(newEntity, model, timestamp, context).ConfigureAwait(false);
            // Return the new entity, ready for adding to the DB
            return newEntity;
<#+     }
        else
        { #>
            // Create a new entity and populate it with data
            var newEntity = model.Create<#= collectionType.Name #>Entity(timestamp, context.ContextProfileName);
            newEntity.UpdatedDate = null; // Clear the Updated Date
<#+         if (td2.IsIHaveATypeBase) { #>
            newEntity.TypeID = thisEntityTypeID;
<#+         } #>
<#+         if (false && td3 != null && td3.IsIHaveATypeBase && collectionTypeModelName != "Discount") { #>
            newEntity.Slave.TypeID = otherEntityTypeID;
<#+         } #>
<#+         if (td2.IsIHaveAStatusBase) { #>
            newEntity.StatusID = thisEntityStatusID;
<#+         } #>
<#+         if (false && td3 != null && td3.IsIHaveAStatusBase) { #>
            newEntity.Slave.StatusID = otherEntityStatusID;
<#+         } #>
<#+         if (td2.IsIHaveAStateBase) { #>
            newEntity.StateID = thisEntityStateID;
<#+         } #>
<#+         if (false && td3 != null && td3.IsIHaveAStateBase) { #>
            newEntity.Slave.StateID = otherEntityStateID;
<#+         } #>
            // Hook-in to add more custom property assignments
            await ModelToNewObjectAdditionalPropertiesAsync(newEntity, model, timestamp, context).ConfigureAwait(false);
            // Return the new entity, ready for adding to the DB
            return newEntity;
<#+     } #>
        }
    }
}
<#+
        SaveOutput(schema + "\\" + name + "\\" + name + "With" + property.Name + "AssociationWorkflow", "generated.cs", true);
    }
}#>
