<#@ template debug="true" language="C#" hostSpecific="true"
#><#@ output extension=".cs"
#><#@ assembly name="System"
#><#@ assembly name="System.Configuration"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="System.Core"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Configuration"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Text.RegularExpressions"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#@ include file="AssociationWorkflows.ttinclude"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var processedNames = new List<string> { "Status", "State", "Type", "RoleUser", "Report" };
var interfacesAdded = new List<string>();
foreach (IGrouping<string, Type> group in tableClasses)
{
    string schema = group.Key.Replace("System", "Structure");
    foreach (Type theType in group)
    {
        TypeDeterminer td = new TypeDeterminer(theType);
        if (td.IsExcludedFromT4 || processedNames.Contains(theType.Name)) { continue; }
        processedNames.Add(theType.Name);
        GenerateAssociateWorkflowsFile(schema, theType, td, interfacesAdded);
    }
}
DeleteOldOutputs();
#>// <autogenerated>
// <copyright file="AssociationWorkflows.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Master section of the Association Workflows classes</summary>
// <remarks>This file was auto-generated by AssociationWorkflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable 618
namespace Clarity.Ecommerce.Workflow
{
    using Interfaces.Workflow;

    public partial class WorkflowsController
    {
<# var count = 0;
foreach (var iface in interfacesAdded)
{ ++count; #>
<# if (count > 1) { #>

<# } #>
        /// <inheritdoc/>
        public <#= iface #> <#= iface.Substring(1, iface.Length - 1 - "Workflow".Length) #> => GetWorkflow<<#= iface #>>();
<#
} #>
    }
}
