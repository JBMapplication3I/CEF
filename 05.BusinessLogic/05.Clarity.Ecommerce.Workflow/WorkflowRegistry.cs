// <autogenerated>
// <copyright file="WorkflowRegistry.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Workflow StructureMap 4 Registry to associate the interfaces with their concretes</summary>
// <remarks>This file was auto-generated by WorkflowRegistry.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable UnusedMember.Global
#pragma warning disable CS0618 // Obsolete
#if NET5_0_OR_GREATER
namespace Clarity.Ecommerce
{
    using System.Net;
    using Interfaces.Workflow;
    using Lamar;
    using Workflow;

    /// <summary>A workflow registry.</summary>
    /// <seealso cref="ServiceRegistry"/>
    public class WorkflowRegistry : ServiceRegistry
    {
        /// <summary>Initializes a new instance of the <see cref="WorkflowRegistry"/> class.</summary>
        public WorkflowRegistry()
        {
            Use<WorkflowsController>().Singleton().For<IWorkflowsController>();
            Use<ProductKitWorkflow>().Singleton().For<IProductKitWorkflow>();
            Use<AddressBookWorkflow>().Singleton().For<IAddressBookWorkflow>();
            Use<UploadWorkflow>().Singleton().For<IUploadWorkflow>();
            For<IWebClientFactory>().Use<SystemWebClientFactory>();
            #region Association Workflows for Json Attribute
            Use<AssociateJsonAttributesWorkflow>().Singleton().For<IAssociateJsonAttributesWorkflow>();
            #endregion
            #region Accounts
            #region Account
            Use<AccountWorkflow>().Singleton().For<IAccountWorkflow>();
            Use<AccountWithImagesAssociationWorkflow>().Singleton().For<IAccountWithImagesAssociationWorkflow>();
            Use<AccountWithStoredFilesAssociationWorkflow>().Singleton().For<IAccountWithStoredFilesAssociationWorkflow>();
            Use<AccountWithBrandsAssociationWorkflow>().Singleton().For<IAccountWithBrandsAssociationWorkflow>();
            Use<AccountWithFranchisesAssociationWorkflow>().Singleton().For<IAccountWithFranchisesAssociationWorkflow>();
            Use<AccountWithStoresAssociationWorkflow>().Singleton().For<IAccountWithStoresAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Products
            Use<AccountWithVendorsAssociationWorkflow>().Singleton().For<IAccountWithVendorsAssociationWorkflow>();
            Use<AccountWithUsersAssociationWorkflow>().Singleton().For<IAccountWithUsersAssociationWorkflow>();
            Use<AccountWithNotesAssociationWorkflow>().Singleton().For<IAccountWithNotesAssociationWorkflow>();
            Use<AccountWithAccountContactsAssociationWorkflow>().Singleton().For<IAccountWithAccountContactsAssociationWorkflow>();
            Use<AccountWithAccountCurrenciesAssociationWorkflow>().Singleton().For<IAccountWithAccountCurrenciesAssociationWorkflow>();
            Use<AccountWithAccountPricePointsAssociationWorkflow>().Singleton().For<IAccountWithAccountPricePointsAssociationWorkflow>();
            Use<AccountWithAccountAssociationsAssociationWorkflow>().Singleton().For<IAccountWithAccountAssociationsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: AccountsAssociatedWith
            // Skipped: Not supposed to make it or fully deprecated: AccountUserRoles
            // Skipped: Not supposed to map this property in via this manner: Subscriptions
            // Skipped: Not supposed to map this property in via this manner: PurchaseOrders
            #endregion
            #region AccountAssociation
            Use<AccountAssociationWorkflow>().Singleton().For<IAccountAssociationWorkflow>();
            #endregion
            #region AccountAssociationType
            Use<AccountAssociationTypeWorkflow>().Singleton().For<IAccountAssociationTypeWorkflow>();
            #endregion
            #region AccountContact
            Use<AccountContactWorkflow>().Singleton().For<IAccountContactWorkflow>();
            #endregion
            #region AccountCurrency
            Use<AccountCurrencyWorkflow>().Singleton().For<IAccountCurrencyWorkflow>();
            #endregion
            #region AccountFile
            Use<AccountFileWorkflow>().Singleton().For<IAccountFileWorkflow>();
            #endregion
            #region AccountImage
            Use<AccountImageWorkflow>().Singleton().For<IAccountImageWorkflow>();
            #endregion
            #region AccountImageType
            Use<AccountImageTypeWorkflow>().Singleton().For<IAccountImageTypeWorkflow>();
            #endregion
            #region AccountPricePoint
            Use<AccountPricePointWorkflow>().Singleton().For<IAccountPricePointWorkflow>();
            #endregion
            #region AccountProduct
            Use<AccountProductWorkflow>().Singleton().For<IAccountProductWorkflow>();
            #endregion
            #region AccountProductType
            Use<AccountProductTypeWorkflow>().Singleton().For<IAccountProductTypeWorkflow>();
            #endregion
            #region AccountStatus
            Use<AccountStatusWorkflow>().Singleton().For<IAccountStatusWorkflow>();
            #endregion
            #region AccountType
            Use<AccountTypeWorkflow>().Singleton().For<IAccountTypeWorkflow>();
            #endregion
            #region AccountUsageBalance
            Use<AccountUsageBalanceWorkflow>().Singleton().For<IAccountUsageBalanceWorkflow>();
            #endregion
            #region Contractor
            Use<ContractorWorkflow>().Singleton().For<IContractorWorkflow>();
            Use<ContractorWithServiceAreasAssociationWorkflow>().Singleton().For<IContractorWithServiceAreasAssociationWorkflow>();
            #endregion
            #region ServiceArea
            Use<ServiceAreaWorkflow>().Singleton().For<IServiceAreaWorkflow>();
            #endregion
            #endregion
            #region Advertising
            #region Ad
            Use<AdWorkflow>().Singleton().For<IAdWorkflow>();
            Use<AdWithImagesAssociationWorkflow>().Singleton().For<IAdWithImagesAssociationWorkflow>();
            Use<AdWithBrandsAssociationWorkflow>().Singleton().For<IAdWithBrandsAssociationWorkflow>();
            Use<AdWithFranchisesAssociationWorkflow>().Singleton().For<IAdWithFranchisesAssociationWorkflow>();
            Use<AdWithStoresAssociationWorkflow>().Singleton().For<IAdWithStoresAssociationWorkflow>();
            Use<AdWithAccountsAssociationWorkflow>().Singleton().For<IAdWithAccountsAssociationWorkflow>();
            Use<AdWithAdZonesAssociationWorkflow>().Singleton().For<IAdWithAdZonesAssociationWorkflow>();
            Use<AdWithCampaignAdsAssociationWorkflow>().Singleton().For<IAdWithCampaignAdsAssociationWorkflow>();
            #endregion
            #region AdAccount
            Use<AdAccountWorkflow>().Singleton().For<IAdAccountWorkflow>();
            #endregion
            #region AdBrand
            Use<AdBrandWorkflow>().Singleton().For<IAdBrandWorkflow>();
            #endregion
            #region AdFranchise
            Use<AdFranchiseWorkflow>().Singleton().For<IAdFranchiseWorkflow>();
            #endregion
            #region AdImage
            Use<AdImageWorkflow>().Singleton().For<IAdImageWorkflow>();
            #endregion
            #region AdImageType
            Use<AdImageTypeWorkflow>().Singleton().For<IAdImageTypeWorkflow>();
            #endregion
            #region AdStatus
            Use<AdStatusWorkflow>().Singleton().For<IAdStatusWorkflow>();
            #endregion
            #region AdStore
            Use<AdStoreWorkflow>().Singleton().For<IAdStoreWorkflow>();
            #endregion
            #region AdType
            Use<AdTypeWorkflow>().Singleton().For<IAdTypeWorkflow>();
            #endregion
            #region AdZone
            Use<AdZoneWorkflow>().Singleton().For<IAdZoneWorkflow>();
            #endregion
            #region AdZoneAccess
            Use<AdZoneAccessWorkflow>().Singleton().For<IAdZoneAccessWorkflow>();
            Use<AdZoneAccessWithAdZonesAssociationWorkflow>().Singleton().For<IAdZoneAccessWithAdZonesAssociationWorkflow>();
            #endregion
            #region Zone
            Use<ZoneWorkflow>().Singleton().For<IZoneWorkflow>();
            Use<ZoneWithAdZonesAssociationWorkflow>().Singleton().For<IZoneWithAdZonesAssociationWorkflow>();
            #endregion
            #region ZoneStatus
            Use<ZoneStatusWorkflow>().Singleton().For<IZoneStatusWorkflow>();
            #endregion
            #region ZoneType
            Use<ZoneTypeWorkflow>().Singleton().For<IZoneTypeWorkflow>();
            #endregion
            #endregion
            #region Attributes
            #region AttributeGroup
            Use<AttributeGroupWorkflow>().Singleton().For<IAttributeGroupWorkflow>();
            #endregion
            #region AttributeTab
            Use<AttributeTabWorkflow>().Singleton().For<IAttributeTabWorkflow>();
            #endregion
            #region AttributeType
            Use<AttributeTypeWorkflow>().Singleton().For<IAttributeTypeWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: GeneralAttributes
            #endregion
            #region GeneralAttribute
            Use<GeneralAttributeWorkflow>().Singleton().For<IGeneralAttributeWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: GeneralAttributePredefinedOptions
            #endregion
            #region GeneralAttributePredefinedOption
            Use<GeneralAttributePredefinedOptionWorkflow>().Singleton().For<IGeneralAttributePredefinedOptionWorkflow>();
            #endregion
            #endregion
            #region Auctions
            #region Auction
            Use<AuctionWorkflow>().Singleton().For<IAuctionWorkflow>();
            Use<AuctionWithBrandsAssociationWorkflow>().Singleton().For<IAuctionWithBrandsAssociationWorkflow>();
            Use<AuctionWithCategoriesAssociationWorkflow>().Singleton().For<IAuctionWithCategoriesAssociationWorkflow>();
            Use<AuctionWithFranchisesAssociationWorkflow>().Singleton().For<IAuctionWithFranchisesAssociationWorkflow>();
            Use<AuctionWithStoresAssociationWorkflow>().Singleton().For<IAuctionWithStoresAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Lots
            #endregion
            #region AuctionCategory
            Use<AuctionCategoryWorkflow>().Singleton().For<IAuctionCategoryWorkflow>();
            #endregion
            #region AuctionStatus
            Use<AuctionStatusWorkflow>().Singleton().For<IAuctionStatusWorkflow>();
            #endregion
            #region AuctionType
            Use<AuctionTypeWorkflow>().Singleton().For<IAuctionTypeWorkflow>();
            #endregion
            #region Bid
            Use<BidWorkflow>().Singleton().For<IBidWorkflow>();
            #endregion
            #region BidStatus
            Use<BidStatusWorkflow>().Singleton().For<IBidStatusWorkflow>();
            #endregion
            #region BrandAuction
            Use<BrandAuctionWorkflow>().Singleton().For<IBrandAuctionWorkflow>();
            #endregion
            #region FranchiseAuction
            Use<FranchiseAuctionWorkflow>().Singleton().For<IFranchiseAuctionWorkflow>();
            #endregion
            #region Lot
            Use<LotWorkflow>().Singleton().For<ILotWorkflow>();
            Use<LotWithCategoriesAssociationWorkflow>().Singleton().For<ILotWithCategoriesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Bids
            #endregion
            #region LotCategory
            Use<LotCategoryWorkflow>().Singleton().For<ILotCategoryWorkflow>();
            #endregion
            #region LotGroup
            Use<LotGroupWorkflow>().Singleton().For<ILotGroupWorkflow>();
            #endregion
            #region LotStatus
            Use<LotStatusWorkflow>().Singleton().For<ILotStatusWorkflow>();
            #endregion
            #region LotType
            Use<LotTypeWorkflow>().Singleton().For<ILotTypeWorkflow>();
            #endregion
            #region StoreAuction
            Use<StoreAuctionWorkflow>().Singleton().For<IStoreAuctionWorkflow>();
            #endregion
            #endregion
            #region Badges
            #region Badge
            Use<BadgeWorkflow>().Singleton().For<IBadgeWorkflow>();
            Use<BadgeWithImagesAssociationWorkflow>().Singleton().For<IBadgeWithImagesAssociationWorkflow>();
            #endregion
            #region BadgeImage
            Use<BadgeImageWorkflow>().Singleton().For<IBadgeImageWorkflow>();
            #endregion
            #region BadgeImageType
            Use<BadgeImageTypeWorkflow>().Singleton().For<IBadgeImageTypeWorkflow>();
            #endregion
            #region BadgeType
            Use<BadgeTypeWorkflow>().Singleton().For<IBadgeTypeWorkflow>();
            #endregion
            #endregion
            #region Brands
            #region Brand
            Use<BrandWorkflow>().Singleton().For<IBrandWorkflow>();
            Use<BrandWithNotesAssociationWorkflow>().Singleton().For<IBrandWithNotesAssociationWorkflow>();
            Use<BrandWithImagesAssociationWorkflow>().Singleton().For<IBrandWithImagesAssociationWorkflow>();
            Use<BrandWithAccountsAssociationWorkflow>().Singleton().For<IBrandWithAccountsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Categories
            Use<BrandWithFranchisesAssociationWorkflow>().Singleton().For<IBrandWithFranchisesAssociationWorkflow>();
            Use<BrandWithProductsAssociationWorkflow>().Singleton().For<IBrandWithProductsAssociationWorkflow>();
            Use<BrandWithStoresAssociationWorkflow>().Singleton().For<IBrandWithStoresAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Users
            Use<BrandWithBrandCurrenciesAssociationWorkflow>().Singleton().For<IBrandWithBrandCurrenciesAssociationWorkflow>();
            Use<BrandWithBrandInventoryLocationsAssociationWorkflow>().Singleton().For<IBrandWithBrandInventoryLocationsAssociationWorkflow>();
            Use<BrandWithBrandLanguagesAssociationWorkflow>().Singleton().For<IBrandWithBrandLanguagesAssociationWorkflow>();
            Use<BrandWithBrandSiteDomainsAssociationWorkflow>().Singleton().For<IBrandWithBrandSiteDomainsAssociationWorkflow>();
            #endregion
            #region BrandAccount
            Use<BrandAccountWorkflow>().Singleton().For<IBrandAccountWorkflow>();
            #endregion
            #region BrandCategory
            Use<BrandCategoryWorkflow>().Singleton().For<IBrandCategoryWorkflow>();
            #endregion
            #region BrandCurrency
            Use<BrandCurrencyWorkflow>().Singleton().For<IBrandCurrencyWorkflow>();
            #endregion
            #region BrandFranchise
            Use<BrandFranchiseWorkflow>().Singleton().For<IBrandFranchiseWorkflow>();
            #endregion
            #region BrandImage
            Use<BrandImageWorkflow>().Singleton().For<IBrandImageWorkflow>();
            #endregion
            #region BrandImageType
            Use<BrandImageTypeWorkflow>().Singleton().For<IBrandImageTypeWorkflow>();
            #endregion
            #region BrandInventoryLocation
            Use<BrandInventoryLocationWorkflow>().Singleton().For<IBrandInventoryLocationWorkflow>();
            #endregion
            #region BrandInventoryLocationType
            Use<BrandInventoryLocationTypeWorkflow>().Singleton().For<IBrandInventoryLocationTypeWorkflow>();
            #endregion
            #region BrandLanguage
            Use<BrandLanguageWorkflow>().Singleton().For<IBrandLanguageWorkflow>();
            #endregion
            #region BrandManufacturer
            Use<BrandManufacturerWorkflow>().Singleton().For<IBrandManufacturerWorkflow>();
            #endregion
            #region BrandProduct
            Use<BrandProductWorkflow>().Singleton().For<IBrandProductWorkflow>();
            #endregion
            #region BrandSiteDomain
            Use<BrandSiteDomainWorkflow>().Singleton().For<IBrandSiteDomainWorkflow>();
            #endregion
            #region BrandStore
            Use<BrandStoreWorkflow>().Singleton().For<IBrandStoreWorkflow>();
            #endregion
            #region BrandUser
            Use<BrandUserWorkflow>().Singleton().For<IBrandUserWorkflow>();
            #endregion
            #region BrandVendor
            Use<BrandVendorWorkflow>().Singleton().For<IBrandVendorWorkflow>();
            #endregion
            #endregion
            #region CalendarEvents
            #region CalendarEvent
            Use<CalendarEventWorkflow>().Singleton().For<ICalendarEventWorkflow>();
            Use<CalendarEventWithImagesAssociationWorkflow>().Singleton().For<ICalendarEventWithImagesAssociationWorkflow>();
            Use<CalendarEventWithStoredFilesAssociationWorkflow>().Singleton().For<ICalendarEventWithStoredFilesAssociationWorkflow>();
            Use<CalendarEventWithProductsAssociationWorkflow>().Singleton().For<ICalendarEventWithProductsAssociationWorkflow>();
            Use<CalendarEventWithCalendarEventDetailsAssociationWorkflow>().Singleton().For<ICalendarEventWithCalendarEventDetailsAssociationWorkflow>();
            Use<CalendarEventWithUserEventAttendancesAssociationWorkflow>().Singleton().For<ICalendarEventWithUserEventAttendancesAssociationWorkflow>();
            #endregion
            #region CalendarEventDetail
            Use<CalendarEventDetailWorkflow>().Singleton().For<ICalendarEventDetailWorkflow>();
            #endregion
            #region CalendarEventFile
            Use<CalendarEventFileWorkflow>().Singleton().For<ICalendarEventFileWorkflow>();
            #endregion
            #region CalendarEventImage
            Use<CalendarEventImageWorkflow>().Singleton().For<ICalendarEventImageWorkflow>();
            #endregion
            #region CalendarEventImageType
            Use<CalendarEventImageTypeWorkflow>().Singleton().For<ICalendarEventImageTypeWorkflow>();
            #endregion
            #region CalendarEventProduct
            Use<CalendarEventProductWorkflow>().Singleton().For<ICalendarEventProductWorkflow>();
            #endregion
            #region CalendarEventStatus
            Use<CalendarEventStatusWorkflow>().Singleton().For<ICalendarEventStatusWorkflow>();
            #endregion
            #region CalendarEventType
            Use<CalendarEventTypeWorkflow>().Singleton().For<ICalendarEventTypeWorkflow>();
            #endregion
            #region UserEventAttendance
            Use<UserEventAttendanceWorkflow>().Singleton().For<IUserEventAttendanceWorkflow>();
            #endregion
            #region UserEventAttendanceType
            Use<UserEventAttendanceTypeWorkflow>().Singleton().For<IUserEventAttendanceTypeWorkflow>();
            #endregion
            #endregion
            #region Categories
            #region Category
            Use<CategoryWorkflow>().Singleton().For<ICategoryWorkflow>();
            // Skipped: Not supposed to make it or fully deprecated: Children
            Use<CategoryWithBrandsAssociationWorkflow>().Singleton().For<ICategoryWithBrandsAssociationWorkflow>();
            Use<CategoryWithStoresAssociationWorkflow>().Singleton().For<ICategoryWithStoresAssociationWorkflow>();
            Use<CategoryWithFranchisesAssociationWorkflow>().Singleton().For<ICategoryWithFranchisesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Products
            // Skipped: Not supposed to map this property in via this manner: Reviews
            Use<CategoryWithImagesAssociationWorkflow>().Singleton().For<ICategoryWithImagesAssociationWorkflow>();
            Use<CategoryWithStoredFilesAssociationWorkflow>().Singleton().For<ICategoryWithStoredFilesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: MinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: MinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: MinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: MinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumForFreeShippingQuantityAmountBufferCategories
            #endregion
            #region CategoryFile
            Use<CategoryFileWorkflow>().Singleton().For<ICategoryFileWorkflow>();
            #endregion
            #region CategoryImage
            Use<CategoryImageWorkflow>().Singleton().For<ICategoryImageWorkflow>();
            #endregion
            #region CategoryImageType
            Use<CategoryImageTypeWorkflow>().Singleton().For<ICategoryImageTypeWorkflow>();
            #endregion
            #region CategoryType
            Use<CategoryTypeWorkflow>().Singleton().For<ICategoryTypeWorkflow>();
            #endregion
            #endregion
            #region Contacts
            #region Contact
            Use<ContactWorkflow>().Singleton().For<IContactWorkflow>();
            Use<ContactWithImagesAssociationWorkflow>().Singleton().For<IContactWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Stores
            // Skipped: Not supposed to map this property in via this manner: Vendors
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesInvoices
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesInvoices
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesQuotes
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesQuotes
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesOrders
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesOrders
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesReturns
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesReturns
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsPurchaseOrders
            // Skipped: Not supposed to map this property in via this manner: BillingContactsPurchaseOrders
            // Skipped: Not supposed to map this property in via this manner: OriginContactsShipments
            // Skipped: Not supposed to map this property in via this manner: DestinationContactsShipments
            // Skipped: Not supposed to map this property in via this manner: Payments
            #endregion
            #region ContactImage
            Use<ContactImageWorkflow>().Singleton().For<IContactImageWorkflow>();
            #endregion
            #region ContactImageType
            Use<ContactImageTypeWorkflow>().Singleton().For<IContactImageTypeWorkflow>();
            #endregion
            #region ContactType
            Use<ContactTypeWorkflow>().Singleton().For<IContactTypeWorkflow>();
            #endregion
            #region ProfanityFilter
            Use<ProfanityFilterWorkflow>().Singleton().For<IProfanityFilterWorkflow>();
            #endregion
            #region ReferralCode
            Use<ReferralCodeWorkflow>().Singleton().For<IReferralCodeWorkflow>();
            #endregion
            #region ReferralCodeStatus
            Use<ReferralCodeStatusWorkflow>().Singleton().For<IReferralCodeStatusWorkflow>();
            #endregion
            #region ReferralCodeType
            Use<ReferralCodeTypeWorkflow>().Singleton().For<IReferralCodeTypeWorkflow>();
            #endregion
            #region User
            Use<UserWorkflow>().Singleton().For<IUserWorkflow>();
            Use<UserWithBrandsAssociationWorkflow>().Singleton().For<IUserWithBrandsAssociationWorkflow>();
            Use<UserWithFranchisesAssociationWorkflow>().Singleton().For<IUserWithFranchisesAssociationWorkflow>();
            Use<UserWithStoresAssociationWorkflow>().Singleton().For<IUserWithStoresAssociationWorkflow>();
            Use<UserWithImagesAssociationWorkflow>().Singleton().For<IUserWithImagesAssociationWorkflow>();
            Use<UserWithStoredFilesAssociationWorkflow>().Singleton().For<IUserWithStoredFilesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: FavoriteCategories
            // Skipped: Not supposed to map this property in via this manner: FavoriteVendors
            // Skipped: Not supposed to map this property in via this manner: FavoriteManufacturers
            // Skipped: Not supposed to map this property in via this manner: FavoriteStores
            // Skipped: Not supposed to map this property in via this manner: ReferralCodes
            // Skipped: Not supposed to map this property in via this manner: UserProductTypes
            // Skipped: Not supposed to map this property in via this manner: SalesInvoices
            // Skipped: Not supposed to map this property in via this manner: SalesQuotes
            // Skipped: Not supposed to map this property in via this manner: SalesOrders
            // Skipped: Not supposed to map this property in via this manner: Subscriptions
            // Skipped: Not supposed to map this property in via this manner: SentMessages
            // Skipped: Not supposed to map this property in via this manner: ReceivedMessages
            // Skipped: Not supposed to map this property in via this manner: ConversationUsers
            // Skipped: Not supposed to map this property in via this manner: DiscountCodes
            // Skipped: Not supposed to map this property in via this manner: Wallets
            // Skipped: Not supposed to map this property in via this manner: MessageAttachmentsCreated
            // Skipped: Not supposed to map this property in via this manner: MessageAttachmentsUpdated
            // Skipped: Not supposed to map this property in via this manner: NotesCreated
            // Skipped: Not supposed to map this property in via this manner: NotesUpdated
            // Skipped: Not supposed to map this property in via this manner: ReviewsSubmitted
            // Skipped: Not supposed to map this property in via this manner: ReviewsApproved
            // Skipped: Not supposed to map this property in via this manner: UserEventAttendances
            Use<UserWithNotesAssociationWorkflow>().Singleton().For<IUserWithNotesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            // Skipped: Not supposed to make it or fully deprecated: Roles
            // Skipped: Not supposed to make it or fully deprecated: Claims
            // Skipped: Not supposed to make it or fully deprecated: Logins
            #endregion
            #region UserFile
            Use<UserFileWorkflow>().Singleton().For<IUserFileWorkflow>();
            #endregion
            #region UserImage
            Use<UserImageWorkflow>().Singleton().For<IUserImageWorkflow>();
            #endregion
            #region UserImageType
            Use<UserImageTypeWorkflow>().Singleton().For<IUserImageTypeWorkflow>();
            #endregion
            #region UserOnlineStatus
            Use<UserOnlineStatusWorkflow>().Singleton().For<IUserOnlineStatusWorkflow>();
            #endregion
            #region UserProductType
            Use<UserProductTypeWorkflow>().Singleton().For<IUserProductTypeWorkflow>();
            #endregion
            #region UserStatus
            Use<UserStatusWorkflow>().Singleton().For<IUserStatusWorkflow>();
            #endregion
            #region UserType
            Use<UserTypeWorkflow>().Singleton().For<IUserTypeWorkflow>();
            #endregion
            #endregion
            #region Counters
            #region Counter
            Use<CounterWorkflow>().Singleton().For<ICounterWorkflow>();
            Use<CounterWithCounterLogsAssociationWorkflow>().Singleton().For<ICounterWithCounterLogsAssociationWorkflow>();
            #endregion
            #region CounterLog
            Use<CounterLogWorkflow>().Singleton().For<ICounterLogWorkflow>();
            #endregion
            #region CounterLogType
            Use<CounterLogTypeWorkflow>().Singleton().For<ICounterLogTypeWorkflow>();
            #endregion
            #region CounterType
            Use<CounterTypeWorkflow>().Singleton().For<ICounterTypeWorkflow>();
            #endregion
            #endregion
            #region Currencies
            #region Currency
            Use<CurrencyWorkflow>().Singleton().For<ICurrencyWorkflow>();
            Use<CurrencyWithImagesAssociationWorkflow>().Singleton().For<ICurrencyWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: HistoricalStartingCurrencies
            // Skipped: Not supposed to map this property in via this manner: HistoricalEndingCurrencies
            // Skipped: Not supposed to map this property in via this manner: ConversionStartingCurrencies
            // Skipped: Not supposed to map this property in via this manner: ConversionEndingCurrencies
            #endregion
            #region CurrencyConversion
            Use<CurrencyConversionWorkflow>().Singleton().For<ICurrencyConversionWorkflow>();
            #endregion
            #region CurrencyImage
            Use<CurrencyImageWorkflow>().Singleton().For<ICurrencyImageWorkflow>();
            #endregion
            #region CurrencyImageType
            Use<CurrencyImageTypeWorkflow>().Singleton().For<ICurrencyImageTypeWorkflow>();
            #endregion
            #region HistoricalCurrencyRate
            Use<HistoricalCurrencyRateWorkflow>().Singleton().For<IHistoricalCurrencyRateWorkflow>();
            #endregion
            #endregion
            #region Discounts
            #region AppliedCartDiscount
            Use<AppliedCartDiscountWorkflow>().Singleton().For<IAppliedCartDiscountWorkflow>();
            #endregion
            #region AppliedCartItemDiscount
            Use<AppliedCartItemDiscountWorkflow>().Singleton().For<IAppliedCartItemDiscountWorkflow>();
            #endregion
            #region Discount
            Use<DiscountWorkflow>().Singleton().For<IDiscountWorkflow>();
            Use<DiscountWithProductsAssociationWorkflow>().Singleton().For<IDiscountWithProductsAssociationWorkflow>();
            Use<DiscountWithBrandsAssociationWorkflow>().Singleton().For<IDiscountWithBrandsAssociationWorkflow>();
            Use<DiscountWithFranchisesAssociationWorkflow>().Singleton().For<IDiscountWithFranchisesAssociationWorkflow>();
            Use<DiscountWithStoresAssociationWorkflow>().Singleton().For<IDiscountWithStoresAssociationWorkflow>();
            Use<DiscountWithAccountsAssociationWorkflow>().Singleton().For<IDiscountWithAccountsAssociationWorkflow>();
            Use<DiscountWithUsersAssociationWorkflow>().Singleton().For<IDiscountWithUsersAssociationWorkflow>();
            Use<DiscountWithVendorsAssociationWorkflow>().Singleton().For<IDiscountWithVendorsAssociationWorkflow>();
            Use<DiscountWithManufacturersAssociationWorkflow>().Singleton().For<IDiscountWithManufacturersAssociationWorkflow>();
            Use<DiscountWithCodesAssociationWorkflow>().Singleton().For<IDiscountWithCodesAssociationWorkflow>();
            Use<DiscountWithCountriesAssociationWorkflow>().Singleton().For<IDiscountWithCountriesAssociationWorkflow>();
            Use<DiscountWithUserRolesAssociationWorkflow>().Singleton().For<IDiscountWithUserRolesAssociationWorkflow>();
            Use<DiscountWithCategoriesAssociationWorkflow>().Singleton().For<IDiscountWithCategoriesAssociationWorkflow>();
            Use<DiscountWithAccountTypesAssociationWorkflow>().Singleton().For<IDiscountWithAccountTypesAssociationWorkflow>();
            Use<DiscountWithProductTypesAssociationWorkflow>().Singleton().For<IDiscountWithProductTypesAssociationWorkflow>();
            Use<DiscountWithShipCarrierMethodsAssociationWorkflow>().Singleton().For<IDiscountWithShipCarrierMethodsAssociationWorkflow>();
            #endregion
            #region DiscountAccount
            Use<DiscountAccountWorkflow>().Singleton().For<IDiscountAccountWorkflow>();
            #endregion
            #region DiscountAccountType
            Use<DiscountAccountTypeWorkflow>().Singleton().For<IDiscountAccountTypeWorkflow>();
            #endregion
            #region DiscountBrand
            Use<DiscountBrandWorkflow>().Singleton().For<IDiscountBrandWorkflow>();
            #endregion
            #region DiscountCategory
            Use<DiscountCategoryWorkflow>().Singleton().For<IDiscountCategoryWorkflow>();
            #endregion
            #region DiscountCode
            Use<DiscountCodeWorkflow>().Singleton().For<IDiscountCodeWorkflow>();
            #endregion
            #region DiscountCountry
            Use<DiscountCountryWorkflow>().Singleton().For<IDiscountCountryWorkflow>();
            #endregion
            #region DiscountFranchise
            Use<DiscountFranchiseWorkflow>().Singleton().For<IDiscountFranchiseWorkflow>();
            #endregion
            #region DiscountManufacturer
            Use<DiscountManufacturerWorkflow>().Singleton().For<IDiscountManufacturerWorkflow>();
            #endregion
            #region DiscountProduct
            Use<DiscountProductWorkflow>().Singleton().For<IDiscountProductWorkflow>();
            #endregion
            #region DiscountProductType
            Use<DiscountProductTypeWorkflow>().Singleton().For<IDiscountProductTypeWorkflow>();
            #endregion
            #region DiscountShipCarrierMethod
            Use<DiscountShipCarrierMethodWorkflow>().Singleton().For<IDiscountShipCarrierMethodWorkflow>();
            #endregion
            #region DiscountStore
            Use<DiscountStoreWorkflow>().Singleton().For<IDiscountStoreWorkflow>();
            #endregion
            #region DiscountUser
            Use<DiscountUserWorkflow>().Singleton().For<IDiscountUserWorkflow>();
            #endregion
            #region DiscountUserRole
            Use<DiscountUserRoleWorkflow>().Singleton().For<IDiscountUserRoleWorkflow>();
            #endregion
            #region DiscountVendor
            Use<DiscountVendorWorkflow>().Singleton().For<IDiscountVendorWorkflow>();
            #endregion
            #region AppliedPurchaseOrderDiscount
            Use<AppliedPurchaseOrderDiscountWorkflow>().Singleton().For<IAppliedPurchaseOrderDiscountWorkflow>();
            #endregion
            #region AppliedPurchaseOrderItemDiscount
            Use<AppliedPurchaseOrderItemDiscountWorkflow>().Singleton().For<IAppliedPurchaseOrderItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesInvoiceDiscount
            Use<AppliedSalesInvoiceDiscountWorkflow>().Singleton().For<IAppliedSalesInvoiceDiscountWorkflow>();
            #endregion
            #region AppliedSalesInvoiceItemDiscount
            Use<AppliedSalesInvoiceItemDiscountWorkflow>().Singleton().For<IAppliedSalesInvoiceItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesOrderDiscount
            Use<AppliedSalesOrderDiscountWorkflow>().Singleton().For<IAppliedSalesOrderDiscountWorkflow>();
            #endregion
            #region AppliedSalesOrderItemDiscount
            Use<AppliedSalesOrderItemDiscountWorkflow>().Singleton().For<IAppliedSalesOrderItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesQuoteDiscount
            Use<AppliedSalesQuoteDiscountWorkflow>().Singleton().For<IAppliedSalesQuoteDiscountWorkflow>();
            #endregion
            #region AppliedSalesQuoteItemDiscount
            Use<AppliedSalesQuoteItemDiscountWorkflow>().Singleton().For<IAppliedSalesQuoteItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesReturnDiscount
            Use<AppliedSalesReturnDiscountWorkflow>().Singleton().For<IAppliedSalesReturnDiscountWorkflow>();
            #endregion
            #region AppliedSalesReturnItemDiscount
            Use<AppliedSalesReturnItemDiscountWorkflow>().Singleton().For<IAppliedSalesReturnItemDiscountWorkflow>();
            #endregion
            #region AppliedSampleRequestDiscount
            Use<AppliedSampleRequestDiscountWorkflow>().Singleton().For<IAppliedSampleRequestDiscountWorkflow>();
            #endregion
            #region AppliedSampleRequestItemDiscount
            Use<AppliedSampleRequestItemDiscountWorkflow>().Singleton().For<IAppliedSampleRequestItemDiscountWorkflow>();
            #endregion
            #endregion
            #region Favorites
            #region FavoriteCategory
            Use<FavoriteCategoryWorkflow>().Singleton().For<IFavoriteCategoryWorkflow>();
            #endregion
            #region FavoriteManufacturer
            Use<FavoriteManufacturerWorkflow>().Singleton().For<IFavoriteManufacturerWorkflow>();
            #endregion
            #region FavoriteShipCarrier
            Use<FavoriteShipCarrierWorkflow>().Singleton().For<IFavoriteShipCarrierWorkflow>();
            #endregion
            #region FavoriteStore
            Use<FavoriteStoreWorkflow>().Singleton().For<IFavoriteStoreWorkflow>();
            #endregion
            #region FavoriteVendor
            Use<FavoriteVendorWorkflow>().Singleton().For<IFavoriteVendorWorkflow>();
            #endregion
            #endregion
            #region Franchises
            #region Franchise
            Use<FranchiseWorkflow>().Singleton().For<IFranchiseWorkflow>();
            Use<FranchiseWithNotesAssociationWorkflow>().Singleton().For<IFranchiseWithNotesAssociationWorkflow>();
            Use<FranchiseWithImagesAssociationWorkflow>().Singleton().For<IFranchiseWithImagesAssociationWorkflow>();
            Use<FranchiseWithAccountsAssociationWorkflow>().Singleton().For<IFranchiseWithAccountsAssociationWorkflow>();
            Use<FranchiseWithBrandsAssociationWorkflow>().Singleton().For<IFranchiseWithBrandsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Categories
            Use<FranchiseWithManufacturersAssociationWorkflow>().Singleton().For<IFranchiseWithManufacturersAssociationWorkflow>();
            Use<FranchiseWithProductsAssociationWorkflow>().Singleton().For<IFranchiseWithProductsAssociationWorkflow>();
            Use<FranchiseWithStoresAssociationWorkflow>().Singleton().For<IFranchiseWithStoresAssociationWorkflow>();
            Use<FranchiseWithUsersAssociationWorkflow>().Singleton().For<IFranchiseWithUsersAssociationWorkflow>();
            Use<FranchiseWithVendorsAssociationWorkflow>().Singleton().For<IFranchiseWithVendorsAssociationWorkflow>();
            Use<FranchiseWithFranchiseCurrenciesAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseCurrenciesAssociationWorkflow>();
            Use<FranchiseWithFranchiseInventoryLocationsAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseInventoryLocationsAssociationWorkflow>();
            Use<FranchiseWithFranchiseLanguagesAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseLanguagesAssociationWorkflow>();
            Use<FranchiseWithFranchiseSiteDomainsAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseSiteDomainsAssociationWorkflow>();
            Use<FranchiseWithFranchiseCountriesAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseCountriesAssociationWorkflow>();
            Use<FranchiseWithFranchiseRegionsAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseRegionsAssociationWorkflow>();
            Use<FranchiseWithFranchiseDistrictsAssociationWorkflow>().Singleton().For<IFranchiseWithFranchiseDistrictsAssociationWorkflow>();
            #endregion
            #region FranchiseAccount
            Use<FranchiseAccountWorkflow>().Singleton().For<IFranchiseAccountWorkflow>();
            #endregion
            #region FranchiseCategory
            Use<FranchiseCategoryWorkflow>().Singleton().For<IFranchiseCategoryWorkflow>();
            #endregion
            #region FranchiseCountry
            Use<FranchiseCountryWorkflow>().Singleton().For<IFranchiseCountryWorkflow>();
            #endregion
            #region FranchiseCurrency
            Use<FranchiseCurrencyWorkflow>().Singleton().For<IFranchiseCurrencyWorkflow>();
            #endregion
            #region FranchiseDistrict
            Use<FranchiseDistrictWorkflow>().Singleton().For<IFranchiseDistrictWorkflow>();
            #endregion
            #region FranchiseImage
            Use<FranchiseImageWorkflow>().Singleton().For<IFranchiseImageWorkflow>();
            #endregion
            #region FranchiseImageType
            Use<FranchiseImageTypeWorkflow>().Singleton().For<IFranchiseImageTypeWorkflow>();
            #endregion
            #region FranchiseInventoryLocation
            Use<FranchiseInventoryLocationWorkflow>().Singleton().For<IFranchiseInventoryLocationWorkflow>();
            #endregion
            #region FranchiseInventoryLocationType
            Use<FranchiseInventoryLocationTypeWorkflow>().Singleton().For<IFranchiseInventoryLocationTypeWorkflow>();
            #endregion
            #region FranchiseLanguage
            Use<FranchiseLanguageWorkflow>().Singleton().For<IFranchiseLanguageWorkflow>();
            #endregion
            #region FranchiseManufacturer
            Use<FranchiseManufacturerWorkflow>().Singleton().For<IFranchiseManufacturerWorkflow>();
            #endregion
            #region FranchiseProduct
            Use<FranchiseProductWorkflow>().Singleton().For<IFranchiseProductWorkflow>();
            #endregion
            #region FranchiseRegion
            Use<FranchiseRegionWorkflow>().Singleton().For<IFranchiseRegionWorkflow>();
            #endregion
            #region FranchiseSiteDomain
            Use<FranchiseSiteDomainWorkflow>().Singleton().For<IFranchiseSiteDomainWorkflow>();
            #endregion
            #region FranchiseStore
            Use<FranchiseStoreWorkflow>().Singleton().For<IFranchiseStoreWorkflow>();
            #endregion
            #region FranchiseType
            Use<FranchiseTypeWorkflow>().Singleton().For<IFranchiseTypeWorkflow>();
            #endregion
            #region FranchiseUser
            Use<FranchiseUserWorkflow>().Singleton().For<IFranchiseUserWorkflow>();
            #endregion
            #region FranchiseVendor
            Use<FranchiseVendorWorkflow>().Singleton().For<IFranchiseVendorWorkflow>();
            #endregion
            #endregion
            #region Geography
            #region Address
            Use<AddressWorkflow>().Singleton().For<IAddressWorkflow>();
            #endregion
            #region Country
            Use<CountryWorkflow>().Singleton().For<ICountryWorkflow>();
            Use<CountryWithImagesAssociationWorkflow>().Singleton().For<ICountryWithImagesAssociationWorkflow>();
            Use<CountryWithLanguagesAssociationWorkflow>().Singleton().For<ICountryWithLanguagesAssociationWorkflow>();
            Use<CountryWithCurrenciesAssociationWorkflow>().Singleton().For<ICountryWithCurrenciesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Taxes
            // Skipped: Not supposed to map this property in via this manner: Regions
            // Skipped: Not supposed to map this property in via this manner: Districts
            #endregion
            #region CountryCurrency
            Use<CountryCurrencyWorkflow>().Singleton().For<ICountryCurrencyWorkflow>();
            #endregion
            #region CountryImage
            Use<CountryImageWorkflow>().Singleton().For<ICountryImageWorkflow>();
            #endregion
            #region CountryImageType
            Use<CountryImageTypeWorkflow>().Singleton().For<ICountryImageTypeWorkflow>();
            #endregion
            #region CountryLanguage
            Use<CountryLanguageWorkflow>().Singleton().For<ICountryLanguageWorkflow>();
            #endregion
            #region District
            Use<DistrictWorkflow>().Singleton().For<IDistrictWorkflow>();
            Use<DistrictWithImagesAssociationWorkflow>().Singleton().For<IDistrictWithImagesAssociationWorkflow>();
            Use<DistrictWithLanguagesAssociationWorkflow>().Singleton().For<IDistrictWithLanguagesAssociationWorkflow>();
            Use<DistrictWithCurrenciesAssociationWorkflow>().Singleton().For<IDistrictWithCurrenciesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Taxes
            #endregion
            #region DistrictCurrency
            Use<DistrictCurrencyWorkflow>().Singleton().For<IDistrictCurrencyWorkflow>();
            #endregion
            #region DistrictImage
            Use<DistrictImageWorkflow>().Singleton().For<IDistrictImageWorkflow>();
            #endregion
            #region DistrictImageType
            Use<DistrictImageTypeWorkflow>().Singleton().For<IDistrictImageTypeWorkflow>();
            #endregion
            #region DistrictLanguage
            Use<DistrictLanguageWorkflow>().Singleton().For<IDistrictLanguageWorkflow>();
            #endregion
            #region HistoricalAddressValidation
            Use<HistoricalAddressValidationWorkflow>().Singleton().For<IHistoricalAddressValidationWorkflow>();
            #endregion
            #region PhonePrefixLookup
            Use<PhonePrefixLookupWorkflow>().Singleton().For<IPhonePrefixLookupWorkflow>();
            #endregion
            #region Region
            Use<RegionWorkflow>().Singleton().For<IRegionWorkflow>();
            Use<RegionWithImagesAssociationWorkflow>().Singleton().For<IRegionWithImagesAssociationWorkflow>();
            Use<RegionWithLanguagesAssociationWorkflow>().Singleton().For<IRegionWithLanguagesAssociationWorkflow>();
            Use<RegionWithCurrenciesAssociationWorkflow>().Singleton().For<IRegionWithCurrenciesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Taxes
            // Skipped: Not supposed to map this property in via this manner: Districts
            #endregion
            #region RegionCurrency
            Use<RegionCurrencyWorkflow>().Singleton().For<IRegionCurrencyWorkflow>();
            #endregion
            #region RegionImage
            Use<RegionImageWorkflow>().Singleton().For<IRegionImageWorkflow>();
            #endregion
            #region RegionImageType
            Use<RegionImageTypeWorkflow>().Singleton().For<IRegionImageTypeWorkflow>();
            #endregion
            #region RegionLanguage
            Use<RegionLanguageWorkflow>().Singleton().For<IRegionLanguageWorkflow>();
            #endregion
            #region ZipCode
            Use<ZipCodeWorkflow>().Singleton().For<IZipCodeWorkflow>();
            #endregion
            #endregion
            #region Globalization
            #region Language
            Use<LanguageWorkflow>().Singleton().For<ILanguageWorkflow>();
            Use<LanguageWithImagesAssociationWorkflow>().Singleton().For<ILanguageWithImagesAssociationWorkflow>();
            #endregion
            #region LanguageImage
            Use<LanguageImageWorkflow>().Singleton().For<ILanguageImageWorkflow>();
            #endregion
            #region LanguageImageType
            Use<LanguageImageTypeWorkflow>().Singleton().For<ILanguageImageTypeWorkflow>();
            #endregion
            #region UiKey
            Use<UiKeyWorkflow>().Singleton().For<IUiKeyWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: UiTranslations
            #endregion
            #region UiTranslation
            Use<UiTranslationWorkflow>().Singleton().For<IUiTranslationWorkflow>();
            #endregion
            #endregion
            #region Groups
            #region Group
            Use<GroupWorkflow>().Singleton().For<IGroupWorkflow>();
            // Skipped: Not supposed to make it or fully deprecated: Children
            Use<GroupWithUsersAssociationWorkflow>().Singleton().For<IGroupWithUsersAssociationWorkflow>();
            #endregion
            #region GroupStatus
            Use<GroupStatusWorkflow>().Singleton().For<IGroupStatusWorkflow>();
            #endregion
            #region GroupType
            Use<GroupTypeWorkflow>().Singleton().For<IGroupTypeWorkflow>();
            #endregion
            #region GroupUser
            Use<GroupUserWorkflow>().Singleton().For<IGroupUserWorkflow>();
            #endregion
            #endregion
            #region Hangfire
            #region ScheduledJobConfiguration
            Use<ScheduledJobConfigurationWorkflow>().Singleton().For<IScheduledJobConfigurationWorkflow>();
            Use<ScheduledJobConfigurationWithScheduledJobConfigurationSettingsAssociationWorkflow>().Singleton().For<IScheduledJobConfigurationWithScheduledJobConfigurationSettingsAssociationWorkflow>();
            #endregion
            #region ScheduledJobConfigurationSetting
            Use<ScheduledJobConfigurationSettingWorkflow>().Singleton().For<IScheduledJobConfigurationSettingWorkflow>();
            #endregion
            #endregion
            #region Inventory
            #region InventoryLocation
            Use<InventoryLocationWorkflow>().Singleton().For<IInventoryLocationWorkflow>();
            Use<InventoryLocationWithBrandsAssociationWorkflow>().Singleton().For<IInventoryLocationWithBrandsAssociationWorkflow>();
            Use<InventoryLocationWithFranchisesAssociationWorkflow>().Singleton().For<IInventoryLocationWithFranchisesAssociationWorkflow>();
            Use<InventoryLocationWithStoresAssociationWorkflow>().Singleton().For<IInventoryLocationWithStoresAssociationWorkflow>();
            Use<InventoryLocationWithSectionsAssociationWorkflow>().Singleton().For<IInventoryLocationWithSectionsAssociationWorkflow>();
            Use<InventoryLocationWithRegionsAssociationWorkflow>().Singleton().For<IInventoryLocationWithRegionsAssociationWorkflow>();
            Use<InventoryLocationWithUsersAssociationWorkflow>().Singleton().For<IInventoryLocationWithUsersAssociationWorkflow>();
            #endregion
            #region InventoryLocationRegion
            Use<InventoryLocationRegionWorkflow>().Singleton().For<IInventoryLocationRegionWorkflow>();
            #endregion
            #region InventoryLocationSection
            Use<InventoryLocationSectionWorkflow>().Singleton().For<IInventoryLocationSectionWorkflow>();
            Use<InventoryLocationSectionWithProductInventoryLocationSectionsAssociationWorkflow>().Singleton().For<IInventoryLocationSectionWithProductInventoryLocationSectionsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Shipments
            #endregion
            #region InventoryLocationUser
            Use<InventoryLocationUserWorkflow>().Singleton().For<IInventoryLocationUserWorkflow>();
            #endregion
            #endregion
            #region Invoicing
            #region SalesInvoice
            Use<SalesInvoiceWorkflow>().Singleton().For<ISalesInvoiceWorkflow>();
            Use<SalesInvoiceWithNotesAssociationWorkflow>().Singleton().For<ISalesInvoiceWithNotesAssociationWorkflow>();
            Use<SalesInvoiceWithAssociatedSalesOrdersAssociationWorkflow>().Singleton().For<ISalesInvoiceWithAssociatedSalesOrdersAssociationWorkflow>();
            Use<SalesInvoiceWithSalesInvoicePaymentsAssociationWorkflow>().Singleton().For<ISalesInvoiceWithSalesInvoicePaymentsAssociationWorkflow>();
            Use<SalesInvoiceWithSalesItemsAssociationWorkflow>().Singleton().For<ISalesInvoiceWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<SalesInvoiceWithStoredFilesAssociationWorkflow>().Singleton().For<ISalesInvoiceWithStoredFilesAssociationWorkflow>();
            Use<SalesInvoiceWithContactsAssociationWorkflow>().Singleton().For<ISalesInvoiceWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<SalesInvoiceWithRateQuotesAssociationWorkflow>().Singleton().For<ISalesInvoiceWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesInvoiceContact
            Use<SalesInvoiceContactWorkflow>().Singleton().For<ISalesInvoiceContactWorkflow>();
            #endregion
            #region SalesInvoiceEvent
            Use<SalesInvoiceEventWorkflow>().Singleton().For<ISalesInvoiceEventWorkflow>();
            #endregion
            #region SalesInvoiceEventType
            Use<SalesInvoiceEventTypeWorkflow>().Singleton().For<ISalesInvoiceEventTypeWorkflow>();
            #endregion
            #region SalesInvoiceFile
            Use<SalesInvoiceFileWorkflow>().Singleton().For<ISalesInvoiceFileWorkflow>();
            #endregion
            #region SalesInvoiceItem
            Use<SalesInvoiceItemWorkflow>().Singleton().For<ISalesInvoiceItemWorkflow>();
            Use<SalesInvoiceItemWithDiscountsAssociationWorkflow>().Singleton().For<ISalesInvoiceItemWithDiscountsAssociationWorkflow>();
            Use<SalesInvoiceItemWithTargetsAssociationWorkflow>().Singleton().For<ISalesInvoiceItemWithTargetsAssociationWorkflow>();
            Use<SalesInvoiceItemWithNotesAssociationWorkflow>().Singleton().For<ISalesInvoiceItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesInvoiceItemTarget
            Use<SalesInvoiceItemTargetWorkflow>().Singleton().For<ISalesInvoiceItemTargetWorkflow>();
            #endregion
            #region SalesInvoiceState
            Use<SalesInvoiceStateWorkflow>().Singleton().For<ISalesInvoiceStateWorkflow>();
            #endregion
            #region SalesInvoiceStatus
            Use<SalesInvoiceStatusWorkflow>().Singleton().For<ISalesInvoiceStatusWorkflow>();
            #endregion
            #region SalesInvoiceType
            Use<SalesInvoiceTypeWorkflow>().Singleton().For<ISalesInvoiceTypeWorkflow>();
            #endregion
            #region SalesOrderSalesInvoice
            Use<SalesOrderSalesInvoiceWorkflow>().Singleton().For<ISalesOrderSalesInvoiceWorkflow>();
            #endregion
            #endregion
            #region Manufacturers
            #region Manufacturer
            Use<ManufacturerWorkflow>().Singleton().For<IManufacturerWorkflow>();
            Use<ManufacturerWithNotesAssociationWorkflow>().Singleton().For<IManufacturerWithNotesAssociationWorkflow>();
            Use<ManufacturerWithImagesAssociationWorkflow>().Singleton().For<IManufacturerWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            // Skipped: Not supposed to map this property in via this manner: Brands
            // Skipped: Not supposed to map this property in via this manner: Franchises
            Use<ManufacturerWithProductsAssociationWorkflow>().Singleton().For<IManufacturerWithProductsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Stores
            Use<ManufacturerWithVendorsAssociationWorkflow>().Singleton().For<IManufacturerWithVendorsAssociationWorkflow>();
            #endregion
            #region ManufacturerImage
            Use<ManufacturerImageWorkflow>().Singleton().For<IManufacturerImageWorkflow>();
            #endregion
            #region ManufacturerImageType
            Use<ManufacturerImageTypeWorkflow>().Singleton().For<IManufacturerImageTypeWorkflow>();
            #endregion
            #region ManufacturerProduct
            Use<ManufacturerProductWorkflow>().Singleton().For<IManufacturerProductWorkflow>();
            #endregion
            #region ManufacturerType
            Use<ManufacturerTypeWorkflow>().Singleton().For<IManufacturerTypeWorkflow>();
            #endregion
            #endregion
            #region Media
            #region StoredFile
            Use<StoredFileWorkflow>().Singleton().For<IStoredFileWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: AccountFiles
            // Skipped: Not supposed to map this property in via this manner: CategoryFiles
            #endregion
            #endregion
            #region Messaging
            #region Conversation
            Use<ConversationWorkflow>().Singleton().For<IConversationWorkflow>();
            Use<ConversationWithUsersAssociationWorkflow>().Singleton().For<IConversationWithUsersAssociationWorkflow>();
            Use<ConversationWithMessagesAssociationWorkflow>().Singleton().For<IConversationWithMessagesAssociationWorkflow>();
            #endregion
            #region ConversationUser
            Use<ConversationUserWorkflow>().Singleton().For<IConversationUserWorkflow>();
            #endregion
            #region EmailQueue
            Use<EmailQueueWorkflow>().Singleton().For<IEmailQueueWorkflow>();
            Use<EmailQueueWithEmailQueueAttachmentsAssociationWorkflow>().Singleton().For<IEmailQueueWithEmailQueueAttachmentsAssociationWorkflow>();
            #endregion
            #region EmailQueueAttachment
            Use<EmailQueueAttachmentWorkflow>().Singleton().For<IEmailQueueAttachmentWorkflow>();
            #endregion
            #region EmailStatus
            Use<EmailStatusWorkflow>().Singleton().For<IEmailStatusWorkflow>();
            #endregion
            #region EmailTemplate
            Use<EmailTemplateWorkflow>().Singleton().For<IEmailTemplateWorkflow>();
            #endregion
            #region EmailType
            Use<EmailTypeWorkflow>().Singleton().For<IEmailTypeWorkflow>();
            #endregion
            #region Message
            Use<MessageWorkflow>().Singleton().For<IMessageWorkflow>();
            Use<MessageWithMessageRecipientsAssociationWorkflow>().Singleton().For<IMessageWithMessageRecipientsAssociationWorkflow>();
            Use<MessageWithMessageAttachmentsAssociationWorkflow>().Singleton().For<IMessageWithMessageAttachmentsAssociationWorkflow>();
            #endregion
            #region MessageAttachment
            Use<MessageAttachmentWorkflow>().Singleton().For<IMessageAttachmentWorkflow>();
            #endregion
            #region MessageRecipient
            Use<MessageRecipientWorkflow>().Singleton().For<IMessageRecipientWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: EmailQueues
            #endregion
            #region ProductNotification
            Use<ProductNotificationWorkflow>().Singleton().For<IProductNotificationWorkflow>();
            #endregion
            #endregion
            #region Ordering
            #region SalesOrder
            Use<SalesOrderWorkflow>().Singleton().For<ISalesOrderWorkflow>();
            Use<SalesOrderWithNotesAssociationWorkflow>().Singleton().For<ISalesOrderWithNotesAssociationWorkflow>();
            Use<SalesOrderWithSalesOrderPaymentsAssociationWorkflow>().Singleton().For<ISalesOrderWithSalesOrderPaymentsAssociationWorkflow>();
            Use<SalesOrderWithAssociatedSalesQuotesAssociationWorkflow>().Singleton().For<ISalesOrderWithAssociatedSalesQuotesAssociationWorkflow>();
            Use<SalesOrderWithAssociatedSalesReturnsAssociationWorkflow>().Singleton().For<ISalesOrderWithAssociatedSalesReturnsAssociationWorkflow>();
            Use<SalesOrderWithAssociatedSalesInvoicesAssociationWorkflow>().Singleton().For<ISalesOrderWithAssociatedSalesInvoicesAssociationWorkflow>();
            Use<SalesOrderWithAssociatedPurchaseOrdersAssociationWorkflow>().Singleton().For<ISalesOrderWithAssociatedPurchaseOrdersAssociationWorkflow>();
            Use<SalesOrderWithSalesItemsAssociationWorkflow>().Singleton().For<ISalesOrderWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<SalesOrderWithStoredFilesAssociationWorkflow>().Singleton().For<ISalesOrderWithStoredFilesAssociationWorkflow>();
            Use<SalesOrderWithContactsAssociationWorkflow>().Singleton().For<ISalesOrderWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<SalesOrderWithRateQuotesAssociationWorkflow>().Singleton().For<ISalesOrderWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesOrderContact
            Use<SalesOrderContactWorkflow>().Singleton().For<ISalesOrderContactWorkflow>();
            #endregion
            #region SalesOrderEvent
            Use<SalesOrderEventWorkflow>().Singleton().For<ISalesOrderEventWorkflow>();
            #endregion
            #region SalesOrderEventType
            Use<SalesOrderEventTypeWorkflow>().Singleton().For<ISalesOrderEventTypeWorkflow>();
            #endregion
            #region SalesOrderFile
            Use<SalesOrderFileWorkflow>().Singleton().For<ISalesOrderFileWorkflow>();
            #endregion
            #region SalesOrderItem
            Use<SalesOrderItemWorkflow>().Singleton().For<ISalesOrderItemWorkflow>();
            Use<SalesOrderItemWithDiscountsAssociationWorkflow>().Singleton().For<ISalesOrderItemWithDiscountsAssociationWorkflow>();
            Use<SalesOrderItemWithTargetsAssociationWorkflow>().Singleton().For<ISalesOrderItemWithTargetsAssociationWorkflow>();
            Use<SalesOrderItemWithNotesAssociationWorkflow>().Singleton().For<ISalesOrderItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesOrderItemTarget
            Use<SalesOrderItemTargetWorkflow>().Singleton().For<ISalesOrderItemTargetWorkflow>();
            #endregion
            #region SalesOrderState
            Use<SalesOrderStateWorkflow>().Singleton().For<ISalesOrderStateWorkflow>();
            #endregion
            #region SalesOrderStatus
            Use<SalesOrderStatusWorkflow>().Singleton().For<ISalesOrderStatusWorkflow>();
            #endregion
            #region SalesOrderType
            Use<SalesOrderTypeWorkflow>().Singleton().For<ISalesOrderTypeWorkflow>();
            #endregion
            #endregion
            #region Payments
            #region Membership
            Use<MembershipWorkflow>().Singleton().For<IMembershipWorkflow>();
            Use<MembershipWithMembershipLevelsAssociationWorkflow>().Singleton().For<IMembershipWithMembershipLevelsAssociationWorkflow>();
            Use<MembershipWithMembershipRepeatTypesAssociationWorkflow>().Singleton().For<IMembershipWithMembershipRepeatTypesAssociationWorkflow>();
            #endregion
            #region MembershipAdZoneAccess
            Use<MembershipAdZoneAccessWorkflow>().Singleton().For<IMembershipAdZoneAccessWorkflow>();
            Use<MembershipAdZoneAccessWithMembershipAdZoneAccessByLevelsAssociationWorkflow>().Singleton().For<IMembershipAdZoneAccessWithMembershipAdZoneAccessByLevelsAssociationWorkflow>();
            #endregion
            #region MembershipAdZoneAccessByLevel
            Use<MembershipAdZoneAccessByLevelWorkflow>().Singleton().For<IMembershipAdZoneAccessByLevelWorkflow>();
            #endregion
            #region MembershipLevel
            Use<MembershipLevelWorkflow>().Singleton().For<IMembershipLevelWorkflow>();
            Use<MembershipLevelWithMembershipAdZoneAccessByLevelsAssociationWorkflow>().Singleton().For<IMembershipLevelWithMembershipAdZoneAccessByLevelsAssociationWorkflow>();
            #endregion
            #region MembershipRepeatType
            Use<MembershipRepeatTypeWorkflow>().Singleton().For<IMembershipRepeatTypeWorkflow>();
            #endregion
            #region Payment
            Use<PaymentWorkflow>().Singleton().For<IPaymentWorkflow>();
            #endregion
            #region PaymentMethod
            Use<PaymentMethodWorkflow>().Singleton().For<IPaymentMethodWorkflow>();
            #endregion
            #region PaymentStatus
            Use<PaymentStatusWorkflow>().Singleton().For<IPaymentStatusWorkflow>();
            #endregion
            #region PaymentType
            Use<PaymentTypeWorkflow>().Singleton().For<IPaymentTypeWorkflow>();
            #endregion
            #region RepeatType
            Use<RepeatTypeWorkflow>().Singleton().For<IRepeatTypeWorkflow>();
            Use<RepeatTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>().Singleton().For<IRepeatTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>();
            #endregion
            #region SalesInvoicePayment
            Use<SalesInvoicePaymentWorkflow>().Singleton().For<ISalesInvoicePaymentWorkflow>();
            #endregion
            #region SalesOrderPayment
            Use<SalesOrderPaymentWorkflow>().Singleton().For<ISalesOrderPaymentWorkflow>();
            #endregion
            #region SalesReturnPayment
            Use<SalesReturnPaymentWorkflow>().Singleton().For<ISalesReturnPaymentWorkflow>();
            #endregion
            #region Subscription
            Use<SubscriptionWorkflow>().Singleton().For<ISubscriptionWorkflow>();
            Use<SubscriptionWithSubscriptionHistoriesAssociationWorkflow>().Singleton().For<ISubscriptionWithSubscriptionHistoriesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: StoreSubscriptions
            #endregion
            #region SubscriptionHistory
            Use<SubscriptionHistoryWorkflow>().Singleton().For<ISubscriptionHistoryWorkflow>();
            #endregion
            #region SubscriptionStatus
            Use<SubscriptionStatusWorkflow>().Singleton().For<ISubscriptionStatusWorkflow>();
            #endregion
            #region SubscriptionType
            Use<SubscriptionTypeWorkflow>().Singleton().For<ISubscriptionTypeWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: ProductSubscriptionTypes
            Use<SubscriptionTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>().Singleton().For<ISubscriptionTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>();
            #endregion
            #region SubscriptionTypeRepeatType
            Use<SubscriptionTypeRepeatTypeWorkflow>().Singleton().For<ISubscriptionTypeRepeatTypeWorkflow>();
            #endregion
            #region Wallet
            Use<WalletWorkflow>().Singleton().For<IWalletWorkflow>();
            #endregion
            #endregion
            #region Pricing
            #region PricePoint
            Use<PricePointWorkflow>().Singleton().For<IPricePointWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: StoreAccounts
            #endregion
            #region PriceRounding
            Use<PriceRoundingWorkflow>().Singleton().For<IPriceRoundingWorkflow>();
            #endregion
            #region PriceRule
            Use<PriceRuleWorkflow>().Singleton().For<IPriceRuleWorkflow>();
            Use<PriceRuleWithProductsAssociationWorkflow>().Singleton().For<IPriceRuleWithProductsAssociationWorkflow>();
            Use<PriceRuleWithBrandsAssociationWorkflow>().Singleton().For<IPriceRuleWithBrandsAssociationWorkflow>();
            Use<PriceRuleWithFranchisesAssociationWorkflow>().Singleton().For<IPriceRuleWithFranchisesAssociationWorkflow>();
            Use<PriceRuleWithStoresAssociationWorkflow>().Singleton().For<IPriceRuleWithStoresAssociationWorkflow>();
            Use<PriceRuleWithAccountsAssociationWorkflow>().Singleton().For<IPriceRuleWithAccountsAssociationWorkflow>();
            Use<PriceRuleWithVendorsAssociationWorkflow>().Singleton().For<IPriceRuleWithVendorsAssociationWorkflow>();
            Use<PriceRuleWithManufacturersAssociationWorkflow>().Singleton().For<IPriceRuleWithManufacturersAssociationWorkflow>();
            Use<PriceRuleWithPriceRuleCountriesAssociationWorkflow>().Singleton().For<IPriceRuleWithPriceRuleCountriesAssociationWorkflow>();
            Use<PriceRuleWithPriceRuleUserRolesAssociationWorkflow>().Singleton().For<IPriceRuleWithPriceRuleUserRolesAssociationWorkflow>();
            Use<PriceRuleWithPriceRuleCategoriesAssociationWorkflow>().Singleton().For<IPriceRuleWithPriceRuleCategoriesAssociationWorkflow>();
            Use<PriceRuleWithPriceRuleAccountTypesAssociationWorkflow>().Singleton().For<IPriceRuleWithPriceRuleAccountTypesAssociationWorkflow>();
            Use<PriceRuleWithPriceRuleProductTypesAssociationWorkflow>().Singleton().For<IPriceRuleWithPriceRuleProductTypesAssociationWorkflow>();
            #endregion
            #region PriceRuleAccount
            Use<PriceRuleAccountWorkflow>().Singleton().For<IPriceRuleAccountWorkflow>();
            #endregion
            #region PriceRuleAccountType
            Use<PriceRuleAccountTypeWorkflow>().Singleton().For<IPriceRuleAccountTypeWorkflow>();
            #endregion
            #region PriceRuleBrand
            Use<PriceRuleBrandWorkflow>().Singleton().For<IPriceRuleBrandWorkflow>();
            #endregion
            #region PriceRuleCategory
            Use<PriceRuleCategoryWorkflow>().Singleton().For<IPriceRuleCategoryWorkflow>();
            #endregion
            #region PriceRuleCountry
            Use<PriceRuleCountryWorkflow>().Singleton().For<IPriceRuleCountryWorkflow>();
            #endregion
            #region PriceRuleFranchise
            Use<PriceRuleFranchiseWorkflow>().Singleton().For<IPriceRuleFranchiseWorkflow>();
            #endregion
            #region PriceRuleManufacturer
            Use<PriceRuleManufacturerWorkflow>().Singleton().For<IPriceRuleManufacturerWorkflow>();
            #endregion
            #region PriceRuleProduct
            Use<PriceRuleProductWorkflow>().Singleton().For<IPriceRuleProductWorkflow>();
            #endregion
            #region PriceRuleProductType
            Use<PriceRuleProductTypeWorkflow>().Singleton().For<IPriceRuleProductTypeWorkflow>();
            #endregion
            #region PriceRuleStore
            Use<PriceRuleStoreWorkflow>().Singleton().For<IPriceRuleStoreWorkflow>();
            #endregion
            #region PriceRuleUserRole
            Use<PriceRuleUserRoleWorkflow>().Singleton().For<IPriceRuleUserRoleWorkflow>();
            #endregion
            #region PriceRuleVendor
            Use<PriceRuleVendorWorkflow>().Singleton().For<IPriceRuleVendorWorkflow>();
            #endregion
            #endregion
            #region Products
            #region FutureImport
            Use<FutureImportWorkflow>().Singleton().For<IFutureImportWorkflow>();
            #endregion
            #region FutureImportStatus
            Use<FutureImportStatusWorkflow>().Singleton().For<IFutureImportStatusWorkflow>();
            #endregion
            #region Product
            Use<ProductWorkflow>().Singleton().For<IProductWorkflow>();
            Use<ProductWithImagesAssociationWorkflow>().Singleton().For<IProductWithImagesAssociationWorkflow>();
            Use<ProductWithStoredFilesAssociationWorkflow>().Singleton().For<IProductWithStoredFilesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Accounts
            Use<ProductWithBrandsAssociationWorkflow>().Singleton().For<IProductWithBrandsAssociationWorkflow>();
            Use<ProductWithCategoriesAssociationWorkflow>().Singleton().For<IProductWithCategoriesAssociationWorkflow>();
            Use<ProductWithFranchisesAssociationWorkflow>().Singleton().For<IProductWithFranchisesAssociationWorkflow>();
            Use<ProductWithManufacturersAssociationWorkflow>().Singleton().For<IProductWithManufacturersAssociationWorkflow>();
            Use<ProductWithStoresAssociationWorkflow>().Singleton().For<IProductWithStoresAssociationWorkflow>();
            Use<ProductWithVendorsAssociationWorkflow>().Singleton().For<IProductWithVendorsAssociationWorkflow>();
            Use<ProductWithProductAssociationsAssociationWorkflow>().Singleton().For<IProductWithProductAssociationsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: ProductsAssociatedWith
            Use<ProductWithProductMembershipLevelsAssociationWorkflow>().Singleton().For<IProductWithProductMembershipLevelsAssociationWorkflow>();
            Use<ProductWithProductDownloadsAssociationWorkflow>().Singleton().For<IProductWithProductDownloadsAssociationWorkflow>();
            Use<ProductWithProductShipCarrierMethodsAssociationWorkflow>().Singleton().For<IProductWithProductShipCarrierMethodsAssociationWorkflow>();
            Use<ProductWithProductSubscriptionTypesAssociationWorkflow>().Singleton().For<IProductWithProductSubscriptionTypesAssociationWorkflow>();
            Use<ProductWithProductRestrictionsAssociationWorkflow>().Singleton().For<IProductWithProductRestrictionsAssociationWorkflow>();
            Use<ProductWithProductNotificationsAssociationWorkflow>().Singleton().For<IProductWithProductNotificationsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            // Skipped: Not supposed to map this property in via this manner: ProductInventoryLocationSections
            // Skipped: Not supposed to map this property in via this manner: ProductPricePoints
            // Skipped: Not supposed to map this property in via this manner: CartItems
            // Skipped: Not supposed to map this property in via this manner: SalesOrderItems
            // Skipped: Not supposed to map this property in via this manner: SalesReturnItems
            // Skipped: Not supposed to map this property in via this manner: DiscountProducts
            #endregion
            #region ProductAssociation
            Use<ProductAssociationWorkflow>().Singleton().For<IProductAssociationWorkflow>();
            #endregion
            #region ProductAssociationType
            Use<ProductAssociationTypeWorkflow>().Singleton().For<IProductAssociationTypeWorkflow>();
            #endregion
            #region ProductCategory
            Use<ProductCategoryWorkflow>().Singleton().For<IProductCategoryWorkflow>();
            #endregion
            #region ProductDownload
            Use<ProductDownloadWorkflow>().Singleton().For<IProductDownloadWorkflow>();
            #endregion
            #region ProductDownloadType
            Use<ProductDownloadTypeWorkflow>().Singleton().For<IProductDownloadTypeWorkflow>();
            #endregion
            #region ProductFile
            Use<ProductFileWorkflow>().Singleton().For<IProductFileWorkflow>();
            #endregion
            #region ProductImage
            Use<ProductImageWorkflow>().Singleton().For<IProductImageWorkflow>();
            #endregion
            #region ProductImageType
            Use<ProductImageTypeWorkflow>().Singleton().For<IProductImageTypeWorkflow>();
            #endregion
            #region ProductInventoryLocationSection
            Use<ProductInventoryLocationSectionWorkflow>().Singleton().For<IProductInventoryLocationSectionWorkflow>();
            #endregion
            #region ProductMembershipLevel
            Use<ProductMembershipLevelWorkflow>().Singleton().For<IProductMembershipLevelWorkflow>();
            Use<ProductMembershipLevelWithSubscriptionsAssociationWorkflow>().Singleton().For<IProductMembershipLevelWithSubscriptionsAssociationWorkflow>();
            #endregion
            #region ProductPricePoint
            Use<ProductPricePointWorkflow>().Singleton().For<IProductPricePointWorkflow>();
            #endregion
            #region ProductRestriction
            Use<ProductRestrictionWorkflow>().Singleton().For<IProductRestrictionWorkflow>();
            #endregion
            #region ProductShipCarrierMethod
            Use<ProductShipCarrierMethodWorkflow>().Singleton().For<IProductShipCarrierMethodWorkflow>();
            #endregion
            #region ProductStatus
            Use<ProductStatusWorkflow>().Singleton().For<IProductStatusWorkflow>();
            #endregion
            #region ProductSubscriptionType
            Use<ProductSubscriptionTypeWorkflow>().Singleton().For<IProductSubscriptionTypeWorkflow>();
            #endregion
            #region ProductType
            Use<ProductTypeWorkflow>().Singleton().For<IProductTypeWorkflow>();
            #endregion
            #endregion
            #region Purchasing
            #region PurchaseOrder
            Use<PurchaseOrderWorkflow>().Singleton().For<IPurchaseOrderWorkflow>();
            Use<PurchaseOrderWithNotesAssociationWorkflow>().Singleton().For<IPurchaseOrderWithNotesAssociationWorkflow>();
            Use<PurchaseOrderWithAssociatedSalesOrdersAssociationWorkflow>().Singleton().For<IPurchaseOrderWithAssociatedSalesOrdersAssociationWorkflow>();
            Use<PurchaseOrderWithSalesItemsAssociationWorkflow>().Singleton().For<IPurchaseOrderWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<PurchaseOrderWithStoredFilesAssociationWorkflow>().Singleton().For<IPurchaseOrderWithStoredFilesAssociationWorkflow>();
            Use<PurchaseOrderWithContactsAssociationWorkflow>().Singleton().For<IPurchaseOrderWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<PurchaseOrderWithRateQuotesAssociationWorkflow>().Singleton().For<IPurchaseOrderWithRateQuotesAssociationWorkflow>();
            #endregion
            #region PurchaseOrderContact
            Use<PurchaseOrderContactWorkflow>().Singleton().For<IPurchaseOrderContactWorkflow>();
            #endregion
            #region PurchaseOrderEvent
            Use<PurchaseOrderEventWorkflow>().Singleton().For<IPurchaseOrderEventWorkflow>();
            #endregion
            #region PurchaseOrderEventType
            Use<PurchaseOrderEventTypeWorkflow>().Singleton().For<IPurchaseOrderEventTypeWorkflow>();
            #endregion
            #region PurchaseOrderFile
            Use<PurchaseOrderFileWorkflow>().Singleton().For<IPurchaseOrderFileWorkflow>();
            #endregion
            #region PurchaseOrderItem
            Use<PurchaseOrderItemWorkflow>().Singleton().For<IPurchaseOrderItemWorkflow>();
            Use<PurchaseOrderItemWithDiscountsAssociationWorkflow>().Singleton().For<IPurchaseOrderItemWithDiscountsAssociationWorkflow>();
            Use<PurchaseOrderItemWithTargetsAssociationWorkflow>().Singleton().For<IPurchaseOrderItemWithTargetsAssociationWorkflow>();
            Use<PurchaseOrderItemWithNotesAssociationWorkflow>().Singleton().For<IPurchaseOrderItemWithNotesAssociationWorkflow>();
            #endregion
            #region PurchaseOrderItemTarget
            Use<PurchaseOrderItemTargetWorkflow>().Singleton().For<IPurchaseOrderItemTargetWorkflow>();
            #endregion
            #region PurchaseOrderState
            Use<PurchaseOrderStateWorkflow>().Singleton().For<IPurchaseOrderStateWorkflow>();
            #endregion
            #region PurchaseOrderStatus
            Use<PurchaseOrderStatusWorkflow>().Singleton().For<IPurchaseOrderStatusWorkflow>();
            #endregion
            #region PurchaseOrderType
            Use<PurchaseOrderTypeWorkflow>().Singleton().For<IPurchaseOrderTypeWorkflow>();
            #endregion
            #region SalesOrderPurchaseOrder
            Use<SalesOrderPurchaseOrderWorkflow>().Singleton().For<ISalesOrderPurchaseOrderWorkflow>();
            #endregion
            #endregion
            #region Questionnaire
            #region Answer
            Use<AnswerWorkflow>().Singleton().For<IAnswerWorkflow>();
            #endregion
            #region Question
            Use<QuestionWorkflow>().Singleton().For<IQuestionWorkflow>();
            Use<QuestionWithOptionsAssociationWorkflow>().Singleton().For<IQuestionWithOptionsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: FollowUpQuestionOptions
            // Skipped: Not supposed to map this property in via this manner: ParentQuestions
            // Skipped: Not supposed to map this property in via this manner: Answers
            #endregion
            #region QuestionOption
            Use<QuestionOptionWorkflow>().Singleton().For<IQuestionOptionWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Answers
            #endregion
            #region QuestionType
            Use<QuestionTypeWorkflow>().Singleton().For<IQuestionTypeWorkflow>();
            #endregion
            #endregion
            #region Quoting
            #region SalesQuote
            Use<SalesQuoteWorkflow>().Singleton().For<ISalesQuoteWorkflow>();
            Use<SalesQuoteWithNotesAssociationWorkflow>().Singleton().For<ISalesQuoteWithNotesAssociationWorkflow>();
            Use<SalesQuoteWithAssociatedSalesOrdersAssociationWorkflow>().Singleton().For<ISalesQuoteWithAssociatedSalesOrdersAssociationWorkflow>();
            Use<SalesQuoteWithSalesQuoteCategoriesAssociationWorkflow>().Singleton().For<ISalesQuoteWithSalesQuoteCategoriesAssociationWorkflow>();
            Use<SalesQuoteWithSalesItemsAssociationWorkflow>().Singleton().For<ISalesQuoteWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<SalesQuoteWithStoredFilesAssociationWorkflow>().Singleton().For<ISalesQuoteWithStoredFilesAssociationWorkflow>();
            Use<SalesQuoteWithContactsAssociationWorkflow>().Singleton().For<ISalesQuoteWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<SalesQuoteWithRateQuotesAssociationWorkflow>().Singleton().For<ISalesQuoteWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesQuoteCategory
            Use<SalesQuoteCategoryWorkflow>().Singleton().For<ISalesQuoteCategoryWorkflow>();
            #endregion
            #region SalesQuoteContact
            Use<SalesQuoteContactWorkflow>().Singleton().For<ISalesQuoteContactWorkflow>();
            #endregion
            #region SalesQuoteEvent
            Use<SalesQuoteEventWorkflow>().Singleton().For<ISalesQuoteEventWorkflow>();
            #endregion
            #region SalesQuoteEventType
            Use<SalesQuoteEventTypeWorkflow>().Singleton().For<ISalesQuoteEventTypeWorkflow>();
            #endregion
            #region SalesQuoteFile
            Use<SalesQuoteFileWorkflow>().Singleton().For<ISalesQuoteFileWorkflow>();
            #endregion
            #region SalesQuoteItem
            Use<SalesQuoteItemWorkflow>().Singleton().For<ISalesQuoteItemWorkflow>();
            Use<SalesQuoteItemWithDiscountsAssociationWorkflow>().Singleton().For<ISalesQuoteItemWithDiscountsAssociationWorkflow>();
            Use<SalesQuoteItemWithTargetsAssociationWorkflow>().Singleton().For<ISalesQuoteItemWithTargetsAssociationWorkflow>();
            Use<SalesQuoteItemWithNotesAssociationWorkflow>().Singleton().For<ISalesQuoteItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesQuoteItemTarget
            Use<SalesQuoteItemTargetWorkflow>().Singleton().For<ISalesQuoteItemTargetWorkflow>();
            #endregion
            #region SalesQuoteSalesOrder
            Use<SalesQuoteSalesOrderWorkflow>().Singleton().For<ISalesQuoteSalesOrderWorkflow>();
            #endregion
            #region SalesQuoteState
            Use<SalesQuoteStateWorkflow>().Singleton().For<ISalesQuoteStateWorkflow>();
            #endregion
            #region SalesQuoteStatus
            Use<SalesQuoteStatusWorkflow>().Singleton().For<ISalesQuoteStatusWorkflow>();
            #endregion
            #region SalesQuoteType
            Use<SalesQuoteTypeWorkflow>().Singleton().For<ISalesQuoteTypeWorkflow>();
            #endregion
            #endregion
            #region Reporting
            #region ReportType
            Use<ReportTypeWorkflow>().Singleton().For<IReportTypeWorkflow>();
            #endregion
            #endregion
            #region Returning
            #region SalesReturn
            Use<SalesReturnWorkflow>().Singleton().For<ISalesReturnWorkflow>();
            Use<SalesReturnWithNotesAssociationWorkflow>().Singleton().For<ISalesReturnWithNotesAssociationWorkflow>();
            Use<SalesReturnWithSalesReturnPaymentsAssociationWorkflow>().Singleton().For<ISalesReturnWithSalesReturnPaymentsAssociationWorkflow>();
            Use<SalesReturnWithAssociatedSalesOrdersAssociationWorkflow>().Singleton().For<ISalesReturnWithAssociatedSalesOrdersAssociationWorkflow>();
            Use<SalesReturnWithSalesItemsAssociationWorkflow>().Singleton().For<ISalesReturnWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<SalesReturnWithStoredFilesAssociationWorkflow>().Singleton().For<ISalesReturnWithStoredFilesAssociationWorkflow>();
            Use<SalesReturnWithContactsAssociationWorkflow>().Singleton().For<ISalesReturnWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<SalesReturnWithRateQuotesAssociationWorkflow>().Singleton().For<ISalesReturnWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesReturnContact
            Use<SalesReturnContactWorkflow>().Singleton().For<ISalesReturnContactWorkflow>();
            #endregion
            #region SalesReturnEvent
            Use<SalesReturnEventWorkflow>().Singleton().For<ISalesReturnEventWorkflow>();
            #endregion
            #region SalesReturnEventType
            Use<SalesReturnEventTypeWorkflow>().Singleton().For<ISalesReturnEventTypeWorkflow>();
            #endregion
            #region SalesReturnFile
            Use<SalesReturnFileWorkflow>().Singleton().For<ISalesReturnFileWorkflow>();
            #endregion
            #region SalesReturnItem
            Use<SalesReturnItemWorkflow>().Singleton().For<ISalesReturnItemWorkflow>();
            Use<SalesReturnItemWithDiscountsAssociationWorkflow>().Singleton().For<ISalesReturnItemWithDiscountsAssociationWorkflow>();
            Use<SalesReturnItemWithTargetsAssociationWorkflow>().Singleton().For<ISalesReturnItemWithTargetsAssociationWorkflow>();
            Use<SalesReturnItemWithNotesAssociationWorkflow>().Singleton().For<ISalesReturnItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesReturnItemTarget
            Use<SalesReturnItemTargetWorkflow>().Singleton().For<ISalesReturnItemTargetWorkflow>();
            #endregion
            #region SalesReturnReason
            Use<SalesReturnReasonWorkflow>().Singleton().For<ISalesReturnReasonWorkflow>();
            #endregion
            #region SalesReturnSalesOrder
            Use<SalesReturnSalesOrderWorkflow>().Singleton().For<ISalesReturnSalesOrderWorkflow>();
            #endregion
            #region SalesReturnState
            Use<SalesReturnStateWorkflow>().Singleton().For<ISalesReturnStateWorkflow>();
            #endregion
            #region SalesReturnStatus
            Use<SalesReturnStatusWorkflow>().Singleton().For<ISalesReturnStatusWorkflow>();
            #endregion
            #region SalesReturnType
            Use<SalesReturnTypeWorkflow>().Singleton().For<ISalesReturnTypeWorkflow>();
            #endregion
            #endregion
            #region Reviews
            #region Review
            Use<ReviewWorkflow>().Singleton().For<IReviewWorkflow>();
            #endregion
            #region ReviewType
            Use<ReviewTypeWorkflow>().Singleton().For<IReviewTypeWorkflow>();
            #endregion
            #endregion
            #region Sales
            #region SalesGroup
            Use<SalesGroupWorkflow>().Singleton().For<ISalesGroupWorkflow>();
            Use<SalesGroupWithNotesAssociationWorkflow>().Singleton().For<ISalesGroupWithNotesAssociationWorkflow>();
            Use<SalesGroupWithSalesQuoteRequestMastersAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesQuoteRequestMastersAssociationWorkflow>();
            Use<SalesGroupWithSalesQuoteRequestSubsAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesQuoteRequestSubsAssociationWorkflow>();
            Use<SalesGroupWithSalesQuoteResponseMastersAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesQuoteResponseMastersAssociationWorkflow>();
            Use<SalesGroupWithSalesQuoteResponseSubsAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesQuoteResponseSubsAssociationWorkflow>();
            Use<SalesGroupWithSubSalesOrdersAssociationWorkflow>().Singleton().For<ISalesGroupWithSubSalesOrdersAssociationWorkflow>();
            Use<SalesGroupWithSalesOrderMastersAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesOrderMastersAssociationWorkflow>();
            Use<SalesGroupWithPurchaseOrdersAssociationWorkflow>().Singleton().For<ISalesGroupWithPurchaseOrdersAssociationWorkflow>();
            Use<SalesGroupWithSalesInvoicesAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesInvoicesAssociationWorkflow>();
            Use<SalesGroupWithSalesReturnsAssociationWorkflow>().Singleton().For<ISalesGroupWithSalesReturnsAssociationWorkflow>();
            Use<SalesGroupWithSampleRequestsAssociationWorkflow>().Singleton().For<ISalesGroupWithSampleRequestsAssociationWorkflow>();
            #endregion
            #region SalesItemTargetType
            Use<SalesItemTargetTypeWorkflow>().Singleton().For<ISalesItemTargetTypeWorkflow>();
            #endregion
            #endregion
            #region Sampling
            #region SampleRequest
            Use<SampleRequestWorkflow>().Singleton().For<ISampleRequestWorkflow>();
            Use<SampleRequestWithNotesAssociationWorkflow>().Singleton().For<ISampleRequestWithNotesAssociationWorkflow>();
            Use<SampleRequestWithSalesItemsAssociationWorkflow>().Singleton().For<ISampleRequestWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<SampleRequestWithStoredFilesAssociationWorkflow>().Singleton().For<ISampleRequestWithStoredFilesAssociationWorkflow>();
            Use<SampleRequestWithContactsAssociationWorkflow>().Singleton().For<ISampleRequestWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<SampleRequestWithRateQuotesAssociationWorkflow>().Singleton().For<ISampleRequestWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SampleRequestContact
            Use<SampleRequestContactWorkflow>().Singleton().For<ISampleRequestContactWorkflow>();
            #endregion
            #region SampleRequestEvent
            Use<SampleRequestEventWorkflow>().Singleton().For<ISampleRequestEventWorkflow>();
            #endregion
            #region SampleRequestEventType
            Use<SampleRequestEventTypeWorkflow>().Singleton().For<ISampleRequestEventTypeWorkflow>();
            #endregion
            #region SampleRequestFile
            Use<SampleRequestFileWorkflow>().Singleton().For<ISampleRequestFileWorkflow>();
            #endregion
            #region SampleRequestItem
            Use<SampleRequestItemWorkflow>().Singleton().For<ISampleRequestItemWorkflow>();
            Use<SampleRequestItemWithDiscountsAssociationWorkflow>().Singleton().For<ISampleRequestItemWithDiscountsAssociationWorkflow>();
            Use<SampleRequestItemWithTargetsAssociationWorkflow>().Singleton().For<ISampleRequestItemWithTargetsAssociationWorkflow>();
            Use<SampleRequestItemWithNotesAssociationWorkflow>().Singleton().For<ISampleRequestItemWithNotesAssociationWorkflow>();
            #endregion
            #region SampleRequestItemTarget
            Use<SampleRequestItemTargetWorkflow>().Singleton().For<ISampleRequestItemTargetWorkflow>();
            #endregion
            #region SampleRequestState
            Use<SampleRequestStateWorkflow>().Singleton().For<ISampleRequestStateWorkflow>();
            #endregion
            #region SampleRequestStatus
            Use<SampleRequestStatusWorkflow>().Singleton().For<ISampleRequestStatusWorkflow>();
            #endregion
            #region SampleRequestType
            Use<SampleRequestTypeWorkflow>().Singleton().For<ISampleRequestTypeWorkflow>();
            #endregion
            #endregion
            #region Scheduling
            #region Appointment
            Use<AppointmentWorkflow>().Singleton().For<IAppointmentWorkflow>();
            Use<AppointmentWithCalendarsAssociationWorkflow>().Singleton().For<IAppointmentWithCalendarsAssociationWorkflow>();
            #endregion
            #region AppointmentStatus
            Use<AppointmentStatusWorkflow>().Singleton().For<IAppointmentStatusWorkflow>();
            #endregion
            #region AppointmentType
            Use<AppointmentTypeWorkflow>().Singleton().For<IAppointmentTypeWorkflow>();
            #endregion
            #region Calendar
            Use<CalendarWorkflow>().Singleton().For<ICalendarWorkflow>();
            Use<CalendarWithAppointmentsAssociationWorkflow>().Singleton().For<ICalendarWithAppointmentsAssociationWorkflow>();
            #endregion
            #region CalendarAppointment
            Use<CalendarAppointmentWorkflow>().Singleton().For<ICalendarAppointmentWorkflow>();
            #endregion
            #endregion
            #region Scouting
            #region Scout
            Use<ScoutWorkflow>().Singleton().For<IScoutWorkflow>();
            Use<ScoutWithCategoriesAssociationWorkflow>().Singleton().For<IScoutWithCategoriesAssociationWorkflow>();
            #endregion
            #region ScoutCategory
            Use<ScoutCategoryWorkflow>().Singleton().For<IScoutCategoryWorkflow>();
            #endregion
            #region ScoutCategoryType
            Use<ScoutCategoryTypeWorkflow>().Singleton().For<IScoutCategoryTypeWorkflow>();
            #endregion
            #endregion
            #region Shipping
            #region Package
            Use<PackageWorkflow>().Singleton().For<IPackageWorkflow>();
            #endregion
            #region PackageType
            Use<PackageTypeWorkflow>().Singleton().For<IPackageTypeWorkflow>();
            #endregion
            #region RateQuote
            Use<RateQuoteWorkflow>().Singleton().For<IRateQuoteWorkflow>();
            #endregion
            #region ShipCarrier
            Use<ShipCarrierWorkflow>().Singleton().For<IShipCarrierWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: PurchaseOrders
            Use<ShipCarrierWithShipCarrierMethodsAssociationWorkflow>().Singleton().For<IShipCarrierWithShipCarrierMethodsAssociationWorkflow>();
            Use<ShipCarrierWithShipmentsAssociationWorkflow>().Singleton().For<IShipCarrierWithShipmentsAssociationWorkflow>();
            #endregion
            #region ShipCarrierMethod
            Use<ShipCarrierMethodWorkflow>().Singleton().For<IShipCarrierMethodWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: ProductShipCarrierMethods
            #endregion
            #region Shipment
            Use<ShipmentWorkflow>().Singleton().For<IShipmentWorkflow>();
            Use<ShipmentWithShipmentEventsAssociationWorkflow>().Singleton().For<IShipmentWithShipmentEventsAssociationWorkflow>();
            #endregion
            #region ShipmentEvent
            Use<ShipmentEventWorkflow>().Singleton().For<IShipmentEventWorkflow>();
            #endregion
            #region ShipmentStatus
            Use<ShipmentStatusWorkflow>().Singleton().For<IShipmentStatusWorkflow>();
            #endregion
            #region ShipmentType
            Use<ShipmentTypeWorkflow>().Singleton().For<IShipmentTypeWorkflow>();
            #endregion
            #endregion
            #region Shopping
            #region Cart
            Use<CartWorkflow>().Singleton().For<ICartWorkflow>();
            Use<CartWithNotesAssociationWorkflow>().Singleton().For<ICartWithNotesAssociationWorkflow>();
            Use<CartWithSalesItemsAssociationWorkflow>().Singleton().For<ICartWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            Use<CartWithStoredFilesAssociationWorkflow>().Singleton().For<ICartWithStoredFilesAssociationWorkflow>();
            Use<CartWithContactsAssociationWorkflow>().Singleton().For<ICartWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            Use<CartWithRateQuotesAssociationWorkflow>().Singleton().For<ICartWithRateQuotesAssociationWorkflow>();
            #endregion
            #region CartContact
            Use<CartContactWorkflow>().Singleton().For<ICartContactWorkflow>();
            #endregion
            #region CartEvent
            Use<CartEventWorkflow>().Singleton().For<ICartEventWorkflow>();
            #endregion
            #region CartEventType
            Use<CartEventTypeWorkflow>().Singleton().For<ICartEventTypeWorkflow>();
            #endregion
            #region CartFile
            Use<CartFileWorkflow>().Singleton().For<ICartFileWorkflow>();
            #endregion
            #region CartItem
            Use<CartItemWorkflow>().Singleton().For<ICartItemWorkflow>();
            Use<CartItemWithDiscountsAssociationWorkflow>().Singleton().For<ICartItemWithDiscountsAssociationWorkflow>();
            Use<CartItemWithTargetsAssociationWorkflow>().Singleton().For<ICartItemWithTargetsAssociationWorkflow>();
            Use<CartItemWithNotesAssociationWorkflow>().Singleton().For<ICartItemWithNotesAssociationWorkflow>();
            #endregion
            #region CartItemTarget
            Use<CartItemTargetWorkflow>().Singleton().For<ICartItemTargetWorkflow>();
            #endregion
            #region CartState
            Use<CartStateWorkflow>().Singleton().For<ICartStateWorkflow>();
            #endregion
            #region CartStatus
            Use<CartStatusWorkflow>().Singleton().For<ICartStatusWorkflow>();
            #endregion
            #region CartType
            Use<CartTypeWorkflow>().Singleton().For<ICartTypeWorkflow>();
            #endregion
            #endregion
            #region Stores
            #region SiteDomain
            Use<SiteDomainWorkflow>().Singleton().For<ISiteDomainWorkflow>();
            Use<SiteDomainWithBrandsAssociationWorkflow>().Singleton().For<ISiteDomainWithBrandsAssociationWorkflow>();
            Use<SiteDomainWithFranchisesAssociationWorkflow>().Singleton().For<ISiteDomainWithFranchisesAssociationWorkflow>();
            Use<SiteDomainWithSiteDomainSocialProvidersAssociationWorkflow>().Singleton().For<ISiteDomainWithSiteDomainSocialProvidersAssociationWorkflow>();
            #endregion
            #region SiteDomainSocialProvider
            Use<SiteDomainSocialProviderWorkflow>().Singleton().For<ISiteDomainSocialProviderWorkflow>();
            #endregion
            #region SocialProvider
            Use<SocialProviderWorkflow>().Singleton().For<ISocialProviderWorkflow>();
            Use<SocialProviderWithSiteDomainSocialProvidersAssociationWorkflow>().Singleton().For<ISocialProviderWithSiteDomainSocialProvidersAssociationWorkflow>();
            #endregion
            #region Store
            Use<StoreWorkflow>().Singleton().For<IStoreWorkflow>();
            Use<StoreWithNotesAssociationWorkflow>().Singleton().For<IStoreWithNotesAssociationWorkflow>();
            Use<StoreWithImagesAssociationWorkflow>().Singleton().For<IStoreWithImagesAssociationWorkflow>();
            Use<StoreWithReviewsAssociationWorkflow>().Singleton().For<IStoreWithReviewsAssociationWorkflow>();
            Use<StoreWithProductsAssociationWorkflow>().Singleton().For<IStoreWithProductsAssociationWorkflow>();
            Use<StoreWithAccountsAssociationWorkflow>().Singleton().For<IStoreWithAccountsAssociationWorkflow>();
            Use<StoreWithUsersAssociationWorkflow>().Singleton().For<IStoreWithUsersAssociationWorkflow>();
            Use<StoreWithVendorsAssociationWorkflow>().Singleton().For<IStoreWithVendorsAssociationWorkflow>();
            Use<StoreWithCategoriesAssociationWorkflow>().Singleton().For<IStoreWithCategoriesAssociationWorkflow>();
            Use<StoreWithBrandsAssociationWorkflow>().Singleton().For<IStoreWithBrandsAssociationWorkflow>();
            Use<StoreWithFranchisesAssociationWorkflow>().Singleton().For<IStoreWithFranchisesAssociationWorkflow>();
            Use<StoreWithManufacturersAssociationWorkflow>().Singleton().For<IStoreWithManufacturersAssociationWorkflow>();
            Use<StoreWithStoreBadgesAssociationWorkflow>().Singleton().For<IStoreWithStoreBadgesAssociationWorkflow>();
            Use<StoreWithStoreContactsAssociationWorkflow>().Singleton().For<IStoreWithStoreContactsAssociationWorkflow>();
            Use<StoreWithStoreInventoryLocationsAssociationWorkflow>().Singleton().For<IStoreWithStoreInventoryLocationsAssociationWorkflow>();
            Use<StoreWithStoreSubscriptionsAssociationWorkflow>().Singleton().For<IStoreWithStoreSubscriptionsAssociationWorkflow>();
            Use<StoreWithStoreCountriesAssociationWorkflow>().Singleton().For<IStoreWithStoreCountriesAssociationWorkflow>();
            Use<StoreWithStoreRegionsAssociationWorkflow>().Singleton().For<IStoreWithStoreRegionsAssociationWorkflow>();
            Use<StoreWithStoreDistrictsAssociationWorkflow>().Singleton().For<IStoreWithStoreDistrictsAssociationWorkflow>();
            #endregion
            #region StoreAccount
            Use<StoreAccountWorkflow>().Singleton().For<IStoreAccountWorkflow>();
            #endregion
            #region StoreBadge
            Use<StoreBadgeWorkflow>().Singleton().For<IStoreBadgeWorkflow>();
            #endregion
            #region StoreCategory
            Use<StoreCategoryWorkflow>().Singleton().For<IStoreCategoryWorkflow>();
            #endregion
            #region StoreContact
            Use<StoreContactWorkflow>().Singleton().For<IStoreContactWorkflow>();
            #endregion
            #region StoreCountry
            Use<StoreCountryWorkflow>().Singleton().For<IStoreCountryWorkflow>();
            #endregion
            #region StoreDistrict
            Use<StoreDistrictWorkflow>().Singleton().For<IStoreDistrictWorkflow>();
            #endregion
            #region StoreImage
            Use<StoreImageWorkflow>().Singleton().For<IStoreImageWorkflow>();
            #endregion
            #region StoreImageType
            Use<StoreImageTypeWorkflow>().Singleton().For<IStoreImageTypeWorkflow>();
            #endregion
            #region StoreInventoryLocation
            Use<StoreInventoryLocationWorkflow>().Singleton().For<IStoreInventoryLocationWorkflow>();
            #endregion
            #region StoreInventoryLocationType
            Use<StoreInventoryLocationTypeWorkflow>().Singleton().For<IStoreInventoryLocationTypeWorkflow>();
            #endregion
            #region StoreManufacturer
            Use<StoreManufacturerWorkflow>().Singleton().For<IStoreManufacturerWorkflow>();
            #endregion
            #region StoreProduct
            Use<StoreProductWorkflow>().Singleton().For<IStoreProductWorkflow>();
            #endregion
            #region StoreRegion
            Use<StoreRegionWorkflow>().Singleton().For<IStoreRegionWorkflow>();
            #endregion
            #region StoreSubscription
            Use<StoreSubscriptionWorkflow>().Singleton().For<IStoreSubscriptionWorkflow>();
            #endregion
            #region StoreType
            Use<StoreTypeWorkflow>().Singleton().For<IStoreTypeWorkflow>();
            #endregion
            #region StoreUser
            Use<StoreUserWorkflow>().Singleton().For<IStoreUserWorkflow>();
            #endregion
            #region StoreVendor
            Use<StoreVendorWorkflow>().Singleton().For<IStoreVendorWorkflow>();
            #endregion
            #endregion
            #region System
            #region ImportExportMapping
            Use<ImportExportMappingWorkflow>().Singleton().For<IImportExportMappingWorkflow>();
            #endregion
            #region Note
            Use<NoteWorkflow>().Singleton().For<INoteWorkflow>();
            #endregion
            #region NoteType
            Use<NoteTypeWorkflow>().Singleton().For<INoteTypeWorkflow>();
            #endregion
            #region RecordVersion
            Use<RecordVersionWorkflow>().Singleton().For<IRecordVersionWorkflow>();
            #endregion
            #region RecordVersionType
            Use<RecordVersionTypeWorkflow>().Singleton().For<IRecordVersionTypeWorkflow>();
            #endregion
            #region Setting
            Use<SettingWorkflow>().Singleton().For<ISettingWorkflow>();
            #endregion
            #region SettingGroup
            Use<SettingGroupWorkflow>().Singleton().For<ISettingGroupWorkflow>();
            #endregion
            #region SettingType
            Use<SettingTypeWorkflow>().Singleton().For<ISettingTypeWorkflow>();
            #endregion
            #region EventLog
            Use<EventLogWorkflow>().Singleton().For<IEventLogWorkflow>();
            #endregion
            #endregion
            #region Tax
            #region HistoricalTaxRate
            Use<HistoricalTaxRateWorkflow>().Singleton().For<IHistoricalTaxRateWorkflow>();
            #endregion
            #region TaxCountry
            Use<TaxCountryWorkflow>().Singleton().For<ITaxCountryWorkflow>();
            #endregion
            #region TaxDistrict
            Use<TaxDistrictWorkflow>().Singleton().For<ITaxDistrictWorkflow>();
            #endregion
            #region TaxRegion
            Use<TaxRegionWorkflow>().Singleton().For<ITaxRegionWorkflow>();
            #endregion
            #endregion
            #region Tracking
            #region Campaign
            Use<CampaignWorkflow>().Singleton().For<ICampaignWorkflow>();
            Use<CampaignWithCampaignAdsAssociationWorkflow>().Singleton().For<ICampaignWithCampaignAdsAssociationWorkflow>();
            #endregion
            #region CampaignAd
            Use<CampaignAdWorkflow>().Singleton().For<ICampaignAdWorkflow>();
            #endregion
            #region CampaignStatus
            Use<CampaignStatusWorkflow>().Singleton().For<ICampaignStatusWorkflow>();
            #endregion
            #region CampaignType
            Use<CampaignTypeWorkflow>().Singleton().For<ICampaignTypeWorkflow>();
            #endregion
            #region Event
            Use<EventWorkflow>().Singleton().For<IEventWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: PageViewEvents
            #endregion
            #region EventStatus
            Use<EventStatusWorkflow>().Singleton().For<IEventStatusWorkflow>();
            #endregion
            #region EventType
            Use<EventTypeWorkflow>().Singleton().For<IEventTypeWorkflow>();
            #endregion
            #region IPOrganization
            Use<IPOrganizationWorkflow>().Singleton().For<IIPOrganizationWorkflow>();
            #endregion
            #region IPOrganizationStatus
            Use<IPOrganizationStatusWorkflow>().Singleton().For<IIPOrganizationStatusWorkflow>();
            #endregion
            #region PageView
            Use<PageViewWorkflow>().Singleton().For<IPageViewWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: PageViewEvents
            #endregion
            #region PageViewEvent
            Use<PageViewEventWorkflow>().Singleton().For<IPageViewEventWorkflow>();
            #endregion
            #region PageViewStatus
            Use<PageViewStatusWorkflow>().Singleton().For<IPageViewStatusWorkflow>();
            #endregion
            #region PageViewType
            Use<PageViewTypeWorkflow>().Singleton().For<IPageViewTypeWorkflow>();
            #endregion
            #region Visit
            Use<VisitWorkflow>().Singleton().For<IVisitWorkflow>();
            Use<VisitWithEventsAssociationWorkflow>().Singleton().For<IVisitWithEventsAssociationWorkflow>();
            #endregion
            #region Visitor
            Use<VisitorWorkflow>().Singleton().For<IVisitorWorkflow>();
            Use<VisitorWithVisitsAssociationWorkflow>().Singleton().For<IVisitorWithVisitsAssociationWorkflow>();
            #endregion
            #region VisitStatus
            Use<VisitStatusWorkflow>().Singleton().For<IVisitStatusWorkflow>();
            #endregion
            #endregion
            #region Vendors
            #region Vendor
            Use<VendorWorkflow>().Singleton().For<IVendorWorkflow>();
            Use<VendorWithNotesAssociationWorkflow>().Singleton().For<IVendorWithNotesAssociationWorkflow>();
            Use<VendorWithImagesAssociationWorkflow>().Singleton().For<IVendorWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            Use<VendorWithAccountsAssociationWorkflow>().Singleton().For<IVendorWithAccountsAssociationWorkflow>();
            Use<VendorWithBrandsAssociationWorkflow>().Singleton().For<IVendorWithBrandsAssociationWorkflow>();
            Use<VendorWithFranchisesAssociationWorkflow>().Singleton().For<IVendorWithFranchisesAssociationWorkflow>();
            Use<VendorWithManufacturersAssociationWorkflow>().Singleton().For<IVendorWithManufacturersAssociationWorkflow>();
            Use<VendorWithProductsAssociationWorkflow>().Singleton().For<IVendorWithProductsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Stores
            Use<VendorWithShipmentsAssociationWorkflow>().Singleton().For<IVendorWithShipmentsAssociationWorkflow>();
            Use<VendorWithPurchaseOrdersAssociationWorkflow>().Singleton().For<IVendorWithPurchaseOrdersAssociationWorkflow>();
            #endregion
            #region VendorAccount
            Use<VendorAccountWorkflow>().Singleton().For<IVendorAccountWorkflow>();
            #endregion
            #region VendorImage
            Use<VendorImageWorkflow>().Singleton().For<IVendorImageWorkflow>();
            #endregion
            #region VendorImageType
            Use<VendorImageTypeWorkflow>().Singleton().For<IVendorImageTypeWorkflow>();
            #endregion
            #region VendorManufacturer
            Use<VendorManufacturerWorkflow>().Singleton().For<IVendorManufacturerWorkflow>();
            #endregion
            #region VendorProduct
            Use<VendorProductWorkflow>().Singleton().For<IVendorProductWorkflow>();
            #endregion
            #region VendorType
            Use<VendorTypeWorkflow>().Singleton().For<IVendorTypeWorkflow>();
            #endregion
            #endregion
        }
    }
}
#else
namespace Clarity.Ecommerce
{
    using System.Net;
    using Interfaces.Workflow;
    using StructureMap;
    using StructureMap.Pipeline;
    using Workflow;

    /// <summary>A workflow registry.</summary>
    /// <seealso cref="Registry"/>
    public class WorkflowRegistry : Registry
    {
        /// <summary>Initializes a new instance of the <see cref="WorkflowRegistry"/> class.</summary>
        public WorkflowRegistry()
        {
            For<IWorkflowsController>(new SingletonLifecycle()).Use<WorkflowsController>();
            For<IProductKitWorkflow>(new SingletonLifecycle()).Use<ProductKitWorkflow>();
            For<IAddressBookWorkflow>(new SingletonLifecycle()).Use<AddressBookWorkflow>();
            For<IUploadWorkflow>(new SingletonLifecycle()).Use<UploadWorkflow>();
            For<IWebClientFactory>().Use<SystemWebClientFactory>();
            #region Association Workflows for Json Attribute
            For<IAssociateJsonAttributesWorkflow>(new SingletonLifecycle()).Use<AssociateJsonAttributesWorkflow>();
            #endregion
            #region Accounts
            #region Account
            For<IAccountWorkflow>(new SingletonLifecycle()).Use<AccountWorkflow>();
            For<IAccountWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithImagesAssociationWorkflow>();
            For<IAccountWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithStoredFilesAssociationWorkflow>();
            For<IAccountWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithBrandsAssociationWorkflow>();
            For<IAccountWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithFranchisesAssociationWorkflow>();
            For<IAccountWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithStoresAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Products
            For<IAccountWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithVendorsAssociationWorkflow>();
            For<IAccountWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithUsersAssociationWorkflow>();
            For<IAccountWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithNotesAssociationWorkflow>();
            For<IAccountWithAccountContactsAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithAccountContactsAssociationWorkflow>();
            For<IAccountWithAccountCurrenciesAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithAccountCurrenciesAssociationWorkflow>();
            For<IAccountWithAccountPricePointsAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithAccountPricePointsAssociationWorkflow>();
            For<IAccountWithAccountAssociationsAssociationWorkflow>(new SingletonLifecycle()).Use<AccountWithAccountAssociationsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: AccountsAssociatedWith
            // Skipped: Not supposed to make it or fully deprecated: AccountUserRoles
            // Skipped: Not supposed to map this property in via this manner: Subscriptions
            // Skipped: Not supposed to map this property in via this manner: PurchaseOrders
            #endregion
            #region AccountAssociation
            For<IAccountAssociationWorkflow>(new SingletonLifecycle()).Use<AccountAssociationWorkflow>();
            #endregion
            #region AccountAssociationType
            For<IAccountAssociationTypeWorkflow>(new SingletonLifecycle()).Use<AccountAssociationTypeWorkflow>();
            #endregion
            #region AccountContact
            For<IAccountContactWorkflow>(new SingletonLifecycle()).Use<AccountContactWorkflow>();
            #endregion
            #region AccountCurrency
            For<IAccountCurrencyWorkflow>(new SingletonLifecycle()).Use<AccountCurrencyWorkflow>();
            #endregion
            #region AccountFile
            For<IAccountFileWorkflow>(new SingletonLifecycle()).Use<AccountFileWorkflow>();
            #endregion
            #region AccountImage
            For<IAccountImageWorkflow>(new SingletonLifecycle()).Use<AccountImageWorkflow>();
            #endregion
            #region AccountImageType
            For<IAccountImageTypeWorkflow>(new SingletonLifecycle()).Use<AccountImageTypeWorkflow>();
            #endregion
            #region AccountPricePoint
            For<IAccountPricePointWorkflow>(new SingletonLifecycle()).Use<AccountPricePointWorkflow>();
            #endregion
            #region AccountProduct
            For<IAccountProductWorkflow>(new SingletonLifecycle()).Use<AccountProductWorkflow>();
            #endregion
            #region AccountProductType
            For<IAccountProductTypeWorkflow>(new SingletonLifecycle()).Use<AccountProductTypeWorkflow>();
            #endregion
            #region AccountStatus
            For<IAccountStatusWorkflow>(new SingletonLifecycle()).Use<AccountStatusWorkflow>();
            #endregion
            #region AccountType
            For<IAccountTypeWorkflow>(new SingletonLifecycle()).Use<AccountTypeWorkflow>();
            #endregion
            #region AccountUsageBalance
            For<IAccountUsageBalanceWorkflow>(new SingletonLifecycle()).Use<AccountUsageBalanceWorkflow>();
            #endregion
            #region Contractor
            For<IContractorWorkflow>(new SingletonLifecycle()).Use<ContractorWorkflow>();
            For<IContractorWithServiceAreasAssociationWorkflow>(new SingletonLifecycle()).Use<ContractorWithServiceAreasAssociationWorkflow>();
            #endregion
            #region ServiceArea
            For<IServiceAreaWorkflow>(new SingletonLifecycle()).Use<ServiceAreaWorkflow>();
            #endregion
            #endregion
            #region Advertising
            #region Ad
            For<IAdWorkflow>(new SingletonLifecycle()).Use<AdWorkflow>();
            For<IAdWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithImagesAssociationWorkflow>();
            For<IAdWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithBrandsAssociationWorkflow>();
            For<IAdWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithFranchisesAssociationWorkflow>();
            For<IAdWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithStoresAssociationWorkflow>();
            For<IAdWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithAccountsAssociationWorkflow>();
            For<IAdWithAdZonesAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithAdZonesAssociationWorkflow>();
            For<IAdWithCampaignAdsAssociationWorkflow>(new SingletonLifecycle()).Use<AdWithCampaignAdsAssociationWorkflow>();
            #endregion
            #region AdAccount
            For<IAdAccountWorkflow>(new SingletonLifecycle()).Use<AdAccountWorkflow>();
            #endregion
            #region AdBrand
            For<IAdBrandWorkflow>(new SingletonLifecycle()).Use<AdBrandWorkflow>();
            #endregion
            #region AdFranchise
            For<IAdFranchiseWorkflow>(new SingletonLifecycle()).Use<AdFranchiseWorkflow>();
            #endregion
            #region AdImage
            For<IAdImageWorkflow>(new SingletonLifecycle()).Use<AdImageWorkflow>();
            #endregion
            #region AdImageType
            For<IAdImageTypeWorkflow>(new SingletonLifecycle()).Use<AdImageTypeWorkflow>();
            #endregion
            #region AdStatus
            For<IAdStatusWorkflow>(new SingletonLifecycle()).Use<AdStatusWorkflow>();
            #endregion
            #region AdStore
            For<IAdStoreWorkflow>(new SingletonLifecycle()).Use<AdStoreWorkflow>();
            #endregion
            #region AdType
            For<IAdTypeWorkflow>(new SingletonLifecycle()).Use<AdTypeWorkflow>();
            #endregion
            #region AdZone
            For<IAdZoneWorkflow>(new SingletonLifecycle()).Use<AdZoneWorkflow>();
            #endregion
            #region AdZoneAccess
            For<IAdZoneAccessWorkflow>(new SingletonLifecycle()).Use<AdZoneAccessWorkflow>();
            For<IAdZoneAccessWithAdZonesAssociationWorkflow>(new SingletonLifecycle()).Use<AdZoneAccessWithAdZonesAssociationWorkflow>();
            #endregion
            #region Zone
            For<IZoneWorkflow>(new SingletonLifecycle()).Use<ZoneWorkflow>();
            For<IZoneWithAdZonesAssociationWorkflow>(new SingletonLifecycle()).Use<ZoneWithAdZonesAssociationWorkflow>();
            #endregion
            #region ZoneStatus
            For<IZoneStatusWorkflow>(new SingletonLifecycle()).Use<ZoneStatusWorkflow>();
            #endregion
            #region ZoneType
            For<IZoneTypeWorkflow>(new SingletonLifecycle()).Use<ZoneTypeWorkflow>();
            #endregion
            #endregion
            #region Attributes
            #region AttributeGroup
            For<IAttributeGroupWorkflow>(new SingletonLifecycle()).Use<AttributeGroupWorkflow>();
            #endregion
            #region AttributeTab
            For<IAttributeTabWorkflow>(new SingletonLifecycle()).Use<AttributeTabWorkflow>();
            #endregion
            #region AttributeType
            For<IAttributeTypeWorkflow>(new SingletonLifecycle()).Use<AttributeTypeWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: GeneralAttributes
            #endregion
            #region GeneralAttribute
            For<IGeneralAttributeWorkflow>(new SingletonLifecycle()).Use<GeneralAttributeWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: GeneralAttributePredefinedOptions
            #endregion
            #region GeneralAttributePredefinedOption
            For<IGeneralAttributePredefinedOptionWorkflow>(new SingletonLifecycle()).Use<GeneralAttributePredefinedOptionWorkflow>();
            #endregion
            #endregion
            #region Auctions
            #region Auction
            For<IAuctionWorkflow>(new SingletonLifecycle()).Use<AuctionWorkflow>();
            For<IAuctionWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<AuctionWithBrandsAssociationWorkflow>();
            For<IAuctionWithCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<AuctionWithCategoriesAssociationWorkflow>();
            For<IAuctionWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<AuctionWithFranchisesAssociationWorkflow>();
            For<IAuctionWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<AuctionWithStoresAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Lots
            #endregion
            #region AuctionCategory
            For<IAuctionCategoryWorkflow>(new SingletonLifecycle()).Use<AuctionCategoryWorkflow>();
            #endregion
            #region AuctionStatus
            For<IAuctionStatusWorkflow>(new SingletonLifecycle()).Use<AuctionStatusWorkflow>();
            #endregion
            #region AuctionType
            For<IAuctionTypeWorkflow>(new SingletonLifecycle()).Use<AuctionTypeWorkflow>();
            #endregion
            #region Bid
            For<IBidWorkflow>(new SingletonLifecycle()).Use<BidWorkflow>();
            #endregion
            #region BidStatus
            For<IBidStatusWorkflow>(new SingletonLifecycle()).Use<BidStatusWorkflow>();
            #endregion
            #region BrandAuction
            For<IBrandAuctionWorkflow>(new SingletonLifecycle()).Use<BrandAuctionWorkflow>();
            #endregion
            #region FranchiseAuction
            For<IFranchiseAuctionWorkflow>(new SingletonLifecycle()).Use<FranchiseAuctionWorkflow>();
            #endregion
            #region Lot
            For<ILotWorkflow>(new SingletonLifecycle()).Use<LotWorkflow>();
            For<ILotWithCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<LotWithCategoriesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Bids
            #endregion
            #region LotCategory
            For<ILotCategoryWorkflow>(new SingletonLifecycle()).Use<LotCategoryWorkflow>();
            #endregion
            #region LotGroup
            For<ILotGroupWorkflow>(new SingletonLifecycle()).Use<LotGroupWorkflow>();
            #endregion
            #region LotStatus
            For<ILotStatusWorkflow>(new SingletonLifecycle()).Use<LotStatusWorkflow>();
            #endregion
            #region LotType
            For<ILotTypeWorkflow>(new SingletonLifecycle()).Use<LotTypeWorkflow>();
            #endregion
            #region StoreAuction
            For<IStoreAuctionWorkflow>(new SingletonLifecycle()).Use<StoreAuctionWorkflow>();
            #endregion
            #endregion
            #region Badges
            #region Badge
            For<IBadgeWorkflow>(new SingletonLifecycle()).Use<BadgeWorkflow>();
            For<IBadgeWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<BadgeWithImagesAssociationWorkflow>();
            #endregion
            #region BadgeImage
            For<IBadgeImageWorkflow>(new SingletonLifecycle()).Use<BadgeImageWorkflow>();
            #endregion
            #region BadgeImageType
            For<IBadgeImageTypeWorkflow>(new SingletonLifecycle()).Use<BadgeImageTypeWorkflow>();
            #endregion
            #region BadgeType
            For<IBadgeTypeWorkflow>(new SingletonLifecycle()).Use<BadgeTypeWorkflow>();
            #endregion
            #endregion
            #region Brands
            #region Brand
            For<IBrandWorkflow>(new SingletonLifecycle()).Use<BrandWorkflow>();
            For<IBrandWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithNotesAssociationWorkflow>();
            For<IBrandWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithImagesAssociationWorkflow>();
            For<IBrandWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithAccountsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Categories
            For<IBrandWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithFranchisesAssociationWorkflow>();
            For<IBrandWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithProductsAssociationWorkflow>();
            For<IBrandWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithStoresAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Users
            For<IBrandWithBrandCurrenciesAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithBrandCurrenciesAssociationWorkflow>();
            For<IBrandWithBrandInventoryLocationsAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithBrandInventoryLocationsAssociationWorkflow>();
            For<IBrandWithBrandLanguagesAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithBrandLanguagesAssociationWorkflow>();
            For<IBrandWithBrandSiteDomainsAssociationWorkflow>(new SingletonLifecycle()).Use<BrandWithBrandSiteDomainsAssociationWorkflow>();
            #endregion
            #region BrandAccount
            For<IBrandAccountWorkflow>(new SingletonLifecycle()).Use<BrandAccountWorkflow>();
            #endregion
            #region BrandCategory
            For<IBrandCategoryWorkflow>(new SingletonLifecycle()).Use<BrandCategoryWorkflow>();
            #endregion
            #region BrandCurrency
            For<IBrandCurrencyWorkflow>(new SingletonLifecycle()).Use<BrandCurrencyWorkflow>();
            #endregion
            #region BrandFranchise
            For<IBrandFranchiseWorkflow>(new SingletonLifecycle()).Use<BrandFranchiseWorkflow>();
            #endregion
            #region BrandImage
            For<IBrandImageWorkflow>(new SingletonLifecycle()).Use<BrandImageWorkflow>();
            #endregion
            #region BrandImageType
            For<IBrandImageTypeWorkflow>(new SingletonLifecycle()).Use<BrandImageTypeWorkflow>();
            #endregion
            #region BrandInventoryLocation
            For<IBrandInventoryLocationWorkflow>(new SingletonLifecycle()).Use<BrandInventoryLocationWorkflow>();
            #endregion
            #region BrandInventoryLocationType
            For<IBrandInventoryLocationTypeWorkflow>(new SingletonLifecycle()).Use<BrandInventoryLocationTypeWorkflow>();
            #endregion
            #region BrandLanguage
            For<IBrandLanguageWorkflow>(new SingletonLifecycle()).Use<BrandLanguageWorkflow>();
            #endregion
            #region BrandManufacturer
            For<IBrandManufacturerWorkflow>(new SingletonLifecycle()).Use<BrandManufacturerWorkflow>();
            #endregion
            #region BrandProduct
            For<IBrandProductWorkflow>(new SingletonLifecycle()).Use<BrandProductWorkflow>();
            #endregion
            #region BrandSiteDomain
            For<IBrandSiteDomainWorkflow>(new SingletonLifecycle()).Use<BrandSiteDomainWorkflow>();
            #endregion
            #region BrandStore
            For<IBrandStoreWorkflow>(new SingletonLifecycle()).Use<BrandStoreWorkflow>();
            #endregion
            #region BrandUser
            For<IBrandUserWorkflow>(new SingletonLifecycle()).Use<BrandUserWorkflow>();
            #endregion
            #region BrandVendor
            For<IBrandVendorWorkflow>(new SingletonLifecycle()).Use<BrandVendorWorkflow>();
            #endregion
            #endregion
            #region CalendarEvents
            #region CalendarEvent
            For<ICalendarEventWorkflow>(new SingletonLifecycle()).Use<CalendarEventWorkflow>();
            For<ICalendarEventWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<CalendarEventWithImagesAssociationWorkflow>();
            For<ICalendarEventWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<CalendarEventWithStoredFilesAssociationWorkflow>();
            For<ICalendarEventWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<CalendarEventWithProductsAssociationWorkflow>();
            For<ICalendarEventWithCalendarEventDetailsAssociationWorkflow>(new SingletonLifecycle()).Use<CalendarEventWithCalendarEventDetailsAssociationWorkflow>();
            For<ICalendarEventWithUserEventAttendancesAssociationWorkflow>(new SingletonLifecycle()).Use<CalendarEventWithUserEventAttendancesAssociationWorkflow>();
            #endregion
            #region CalendarEventDetail
            For<ICalendarEventDetailWorkflow>(new SingletonLifecycle()).Use<CalendarEventDetailWorkflow>();
            #endregion
            #region CalendarEventFile
            For<ICalendarEventFileWorkflow>(new SingletonLifecycle()).Use<CalendarEventFileWorkflow>();
            #endregion
            #region CalendarEventImage
            For<ICalendarEventImageWorkflow>(new SingletonLifecycle()).Use<CalendarEventImageWorkflow>();
            #endregion
            #region CalendarEventImageType
            For<ICalendarEventImageTypeWorkflow>(new SingletonLifecycle()).Use<CalendarEventImageTypeWorkflow>();
            #endregion
            #region CalendarEventProduct
            For<ICalendarEventProductWorkflow>(new SingletonLifecycle()).Use<CalendarEventProductWorkflow>();
            #endregion
            #region CalendarEventStatus
            For<ICalendarEventStatusWorkflow>(new SingletonLifecycle()).Use<CalendarEventStatusWorkflow>();
            #endregion
            #region CalendarEventType
            For<ICalendarEventTypeWorkflow>(new SingletonLifecycle()).Use<CalendarEventTypeWorkflow>();
            #endregion
            #region UserEventAttendance
            For<IUserEventAttendanceWorkflow>(new SingletonLifecycle()).Use<UserEventAttendanceWorkflow>();
            #endregion
            #region UserEventAttendanceType
            For<IUserEventAttendanceTypeWorkflow>(new SingletonLifecycle()).Use<UserEventAttendanceTypeWorkflow>();
            #endregion
            #endregion
            #region Categories
            #region Category
            For<ICategoryWorkflow>(new SingletonLifecycle()).Use<CategoryWorkflow>();
            // Skipped: Not supposed to make it or fully deprecated: Children
            For<ICategoryWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<CategoryWithBrandsAssociationWorkflow>();
            For<ICategoryWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<CategoryWithStoresAssociationWorkflow>();
            For<ICategoryWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<CategoryWithFranchisesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Products
            // Skipped: Not supposed to map this property in via this manner: Reviews
            For<ICategoryWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<CategoryWithImagesAssociationWorkflow>();
            For<ICategoryWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<CategoryWithStoredFilesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: MinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: MinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumOrderDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumOrderQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: MinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: MinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: ManufacturerMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: BrandMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: FranchiseMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: StoreMinimumForFreeShippingQuantityAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumForFreeShippingDollarAmountBufferCategories
            // Skipped: Not supposed to map this property in via this manner: VendorMinimumForFreeShippingQuantityAmountBufferCategories
            #endregion
            #region CategoryFile
            For<ICategoryFileWorkflow>(new SingletonLifecycle()).Use<CategoryFileWorkflow>();
            #endregion
            #region CategoryImage
            For<ICategoryImageWorkflow>(new SingletonLifecycle()).Use<CategoryImageWorkflow>();
            #endregion
            #region CategoryImageType
            For<ICategoryImageTypeWorkflow>(new SingletonLifecycle()).Use<CategoryImageTypeWorkflow>();
            #endregion
            #region CategoryType
            For<ICategoryTypeWorkflow>(new SingletonLifecycle()).Use<CategoryTypeWorkflow>();
            #endregion
            #endregion
            #region Contacts
            #region Contact
            For<IContactWorkflow>(new SingletonLifecycle()).Use<ContactWorkflow>();
            For<IContactWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<ContactWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Stores
            // Skipped: Not supposed to map this property in via this manner: Vendors
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesInvoices
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesInvoices
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesQuotes
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesQuotes
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesOrders
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesOrders
            // Skipped: Not supposed to map this property in via this manner: BillingContactsSalesReturns
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsSalesReturns
            // Skipped: Not supposed to map this property in via this manner: ShippingContactsPurchaseOrders
            // Skipped: Not supposed to map this property in via this manner: BillingContactsPurchaseOrders
            // Skipped: Not supposed to map this property in via this manner: OriginContactsShipments
            // Skipped: Not supposed to map this property in via this manner: DestinationContactsShipments
            // Skipped: Not supposed to map this property in via this manner: Payments
            #endregion
            #region ContactImage
            For<IContactImageWorkflow>(new SingletonLifecycle()).Use<ContactImageWorkflow>();
            #endregion
            #region ContactImageType
            For<IContactImageTypeWorkflow>(new SingletonLifecycle()).Use<ContactImageTypeWorkflow>();
            #endregion
            #region ContactType
            For<IContactTypeWorkflow>(new SingletonLifecycle()).Use<ContactTypeWorkflow>();
            #endregion
            #region ProfanityFilter
            For<IProfanityFilterWorkflow>(new SingletonLifecycle()).Use<ProfanityFilterWorkflow>();
            #endregion
            #region ReferralCode
            For<IReferralCodeWorkflow>(new SingletonLifecycle()).Use<ReferralCodeWorkflow>();
            #endregion
            #region ReferralCodeStatus
            For<IReferralCodeStatusWorkflow>(new SingletonLifecycle()).Use<ReferralCodeStatusWorkflow>();
            #endregion
            #region ReferralCodeType
            For<IReferralCodeTypeWorkflow>(new SingletonLifecycle()).Use<ReferralCodeTypeWorkflow>();
            #endregion
            #region User
            For<IUserWorkflow>(new SingletonLifecycle()).Use<UserWorkflow>();
            For<IUserWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<UserWithBrandsAssociationWorkflow>();
            For<IUserWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<UserWithFranchisesAssociationWorkflow>();
            For<IUserWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<UserWithStoresAssociationWorkflow>();
            For<IUserWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<UserWithImagesAssociationWorkflow>();
            For<IUserWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<UserWithStoredFilesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: FavoriteCategories
            // Skipped: Not supposed to map this property in via this manner: FavoriteVendors
            // Skipped: Not supposed to map this property in via this manner: FavoriteManufacturers
            // Skipped: Not supposed to map this property in via this manner: FavoriteStores
            // Skipped: Not supposed to map this property in via this manner: ReferralCodes
            // Skipped: Not supposed to map this property in via this manner: UserProductTypes
            // Skipped: Not supposed to map this property in via this manner: SalesInvoices
            // Skipped: Not supposed to map this property in via this manner: SalesQuotes
            // Skipped: Not supposed to map this property in via this manner: SalesOrders
            // Skipped: Not supposed to map this property in via this manner: Subscriptions
            // Skipped: Not supposed to map this property in via this manner: SentMessages
            // Skipped: Not supposed to map this property in via this manner: ReceivedMessages
            // Skipped: Not supposed to map this property in via this manner: ConversationUsers
            // Skipped: Not supposed to map this property in via this manner: DiscountCodes
            // Skipped: Not supposed to map this property in via this manner: Wallets
            // Skipped: Not supposed to map this property in via this manner: MessageAttachmentsCreated
            // Skipped: Not supposed to map this property in via this manner: MessageAttachmentsUpdated
            // Skipped: Not supposed to map this property in via this manner: NotesCreated
            // Skipped: Not supposed to map this property in via this manner: NotesUpdated
            // Skipped: Not supposed to map this property in via this manner: ReviewsSubmitted
            // Skipped: Not supposed to map this property in via this manner: ReviewsApproved
            // Skipped: Not supposed to map this property in via this manner: UserEventAttendances
            For<IUserWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<UserWithNotesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            // Skipped: Not supposed to make it or fully deprecated: Roles
            // Skipped: Not supposed to make it or fully deprecated: Claims
            // Skipped: Not supposed to make it or fully deprecated: Logins
            #endregion
            #region UserFile
            For<IUserFileWorkflow>(new SingletonLifecycle()).Use<UserFileWorkflow>();
            #endregion
            #region UserImage
            For<IUserImageWorkflow>(new SingletonLifecycle()).Use<UserImageWorkflow>();
            #endregion
            #region UserImageType
            For<IUserImageTypeWorkflow>(new SingletonLifecycle()).Use<UserImageTypeWorkflow>();
            #endregion
            #region UserOnlineStatus
            For<IUserOnlineStatusWorkflow>(new SingletonLifecycle()).Use<UserOnlineStatusWorkflow>();
            #endregion
            #region UserProductType
            For<IUserProductTypeWorkflow>(new SingletonLifecycle()).Use<UserProductTypeWorkflow>();
            #endregion
            #region UserStatus
            For<IUserStatusWorkflow>(new SingletonLifecycle()).Use<UserStatusWorkflow>();
            #endregion
            #region UserType
            For<IUserTypeWorkflow>(new SingletonLifecycle()).Use<UserTypeWorkflow>();
            #endregion
            #endregion
            #region Counters
            #region Counter
            For<ICounterWorkflow>(new SingletonLifecycle()).Use<CounterWorkflow>();
            For<ICounterWithCounterLogsAssociationWorkflow>(new SingletonLifecycle()).Use<CounterWithCounterLogsAssociationWorkflow>();
            #endregion
            #region CounterLog
            For<ICounterLogWorkflow>(new SingletonLifecycle()).Use<CounterLogWorkflow>();
            #endregion
            #region CounterLogType
            For<ICounterLogTypeWorkflow>(new SingletonLifecycle()).Use<CounterLogTypeWorkflow>();
            #endregion
            #region CounterType
            For<ICounterTypeWorkflow>(new SingletonLifecycle()).Use<CounterTypeWorkflow>();
            #endregion
            #endregion
            #region Currencies
            #region Currency
            For<ICurrencyWorkflow>(new SingletonLifecycle()).Use<CurrencyWorkflow>();
            For<ICurrencyWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<CurrencyWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: HistoricalStartingCurrencies
            // Skipped: Not supposed to map this property in via this manner: HistoricalEndingCurrencies
            // Skipped: Not supposed to map this property in via this manner: ConversionStartingCurrencies
            // Skipped: Not supposed to map this property in via this manner: ConversionEndingCurrencies
            #endregion
            #region CurrencyConversion
            For<ICurrencyConversionWorkflow>(new SingletonLifecycle()).Use<CurrencyConversionWorkflow>();
            #endregion
            #region CurrencyImage
            For<ICurrencyImageWorkflow>(new SingletonLifecycle()).Use<CurrencyImageWorkflow>();
            #endregion
            #region CurrencyImageType
            For<ICurrencyImageTypeWorkflow>(new SingletonLifecycle()).Use<CurrencyImageTypeWorkflow>();
            #endregion
            #region HistoricalCurrencyRate
            For<IHistoricalCurrencyRateWorkflow>(new SingletonLifecycle()).Use<HistoricalCurrencyRateWorkflow>();
            #endregion
            #endregion
            #region Discounts
            #region AppliedCartDiscount
            For<IAppliedCartDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedCartDiscountWorkflow>();
            #endregion
            #region AppliedCartItemDiscount
            For<IAppliedCartItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedCartItemDiscountWorkflow>();
            #endregion
            #region Discount
            For<IDiscountWorkflow>(new SingletonLifecycle()).Use<DiscountWorkflow>();
            For<IDiscountWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithProductsAssociationWorkflow>();
            For<IDiscountWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithBrandsAssociationWorkflow>();
            For<IDiscountWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithFranchisesAssociationWorkflow>();
            For<IDiscountWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithStoresAssociationWorkflow>();
            For<IDiscountWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithAccountsAssociationWorkflow>();
            For<IDiscountWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithUsersAssociationWorkflow>();
            For<IDiscountWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithVendorsAssociationWorkflow>();
            For<IDiscountWithManufacturersAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithManufacturersAssociationWorkflow>();
            For<IDiscountWithCodesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithCodesAssociationWorkflow>();
            For<IDiscountWithCountriesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithCountriesAssociationWorkflow>();
            For<IDiscountWithUserRolesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithUserRolesAssociationWorkflow>();
            For<IDiscountWithCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithCategoriesAssociationWorkflow>();
            For<IDiscountWithAccountTypesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithAccountTypesAssociationWorkflow>();
            For<IDiscountWithProductTypesAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithProductTypesAssociationWorkflow>();
            For<IDiscountWithShipCarrierMethodsAssociationWorkflow>(new SingletonLifecycle()).Use<DiscountWithShipCarrierMethodsAssociationWorkflow>();
            #endregion
            #region DiscountAccount
            For<IDiscountAccountWorkflow>(new SingletonLifecycle()).Use<DiscountAccountWorkflow>();
            #endregion
            #region DiscountAccountType
            For<IDiscountAccountTypeWorkflow>(new SingletonLifecycle()).Use<DiscountAccountTypeWorkflow>();
            #endregion
            #region DiscountBrand
            For<IDiscountBrandWorkflow>(new SingletonLifecycle()).Use<DiscountBrandWorkflow>();
            #endregion
            #region DiscountCategory
            For<IDiscountCategoryWorkflow>(new SingletonLifecycle()).Use<DiscountCategoryWorkflow>();
            #endregion
            #region DiscountCode
            For<IDiscountCodeWorkflow>(new SingletonLifecycle()).Use<DiscountCodeWorkflow>();
            #endregion
            #region DiscountCountry
            For<IDiscountCountryWorkflow>(new SingletonLifecycle()).Use<DiscountCountryWorkflow>();
            #endregion
            #region DiscountFranchise
            For<IDiscountFranchiseWorkflow>(new SingletonLifecycle()).Use<DiscountFranchiseWorkflow>();
            #endregion
            #region DiscountManufacturer
            For<IDiscountManufacturerWorkflow>(new SingletonLifecycle()).Use<DiscountManufacturerWorkflow>();
            #endregion
            #region DiscountProduct
            For<IDiscountProductWorkflow>(new SingletonLifecycle()).Use<DiscountProductWorkflow>();
            #endregion
            #region DiscountProductType
            For<IDiscountProductTypeWorkflow>(new SingletonLifecycle()).Use<DiscountProductTypeWorkflow>();
            #endregion
            #region DiscountShipCarrierMethod
            For<IDiscountShipCarrierMethodWorkflow>(new SingletonLifecycle()).Use<DiscountShipCarrierMethodWorkflow>();
            #endregion
            #region DiscountStore
            For<IDiscountStoreWorkflow>(new SingletonLifecycle()).Use<DiscountStoreWorkflow>();
            #endregion
            #region DiscountUser
            For<IDiscountUserWorkflow>(new SingletonLifecycle()).Use<DiscountUserWorkflow>();
            #endregion
            #region DiscountUserRole
            For<IDiscountUserRoleWorkflow>(new SingletonLifecycle()).Use<DiscountUserRoleWorkflow>();
            #endregion
            #region DiscountVendor
            For<IDiscountVendorWorkflow>(new SingletonLifecycle()).Use<DiscountVendorWorkflow>();
            #endregion
            #region AppliedPurchaseOrderDiscount
            For<IAppliedPurchaseOrderDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedPurchaseOrderDiscountWorkflow>();
            #endregion
            #region AppliedPurchaseOrderItemDiscount
            For<IAppliedPurchaseOrderItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedPurchaseOrderItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesInvoiceDiscount
            For<IAppliedSalesInvoiceDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesInvoiceDiscountWorkflow>();
            #endregion
            #region AppliedSalesInvoiceItemDiscount
            For<IAppliedSalesInvoiceItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesInvoiceItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesOrderDiscount
            For<IAppliedSalesOrderDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesOrderDiscountWorkflow>();
            #endregion
            #region AppliedSalesOrderItemDiscount
            For<IAppliedSalesOrderItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesOrderItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesQuoteDiscount
            For<IAppliedSalesQuoteDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesQuoteDiscountWorkflow>();
            #endregion
            #region AppliedSalesQuoteItemDiscount
            For<IAppliedSalesQuoteItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesQuoteItemDiscountWorkflow>();
            #endregion
            #region AppliedSalesReturnDiscount
            For<IAppliedSalesReturnDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesReturnDiscountWorkflow>();
            #endregion
            #region AppliedSalesReturnItemDiscount
            For<IAppliedSalesReturnItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSalesReturnItemDiscountWorkflow>();
            #endregion
            #region AppliedSampleRequestDiscount
            For<IAppliedSampleRequestDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSampleRequestDiscountWorkflow>();
            #endregion
            #region AppliedSampleRequestItemDiscount
            For<IAppliedSampleRequestItemDiscountWorkflow>(new SingletonLifecycle()).Use<AppliedSampleRequestItemDiscountWorkflow>();
            #endregion
            #endregion
            #region Favorites
            #region FavoriteCategory
            For<IFavoriteCategoryWorkflow>(new SingletonLifecycle()).Use<FavoriteCategoryWorkflow>();
            #endregion
            #region FavoriteManufacturer
            For<IFavoriteManufacturerWorkflow>(new SingletonLifecycle()).Use<FavoriteManufacturerWorkflow>();
            #endregion
            #region FavoriteShipCarrier
            For<IFavoriteShipCarrierWorkflow>(new SingletonLifecycle()).Use<FavoriteShipCarrierWorkflow>();
            #endregion
            #region FavoriteStore
            For<IFavoriteStoreWorkflow>(new SingletonLifecycle()).Use<FavoriteStoreWorkflow>();
            #endregion
            #region FavoriteVendor
            For<IFavoriteVendorWorkflow>(new SingletonLifecycle()).Use<FavoriteVendorWorkflow>();
            #endregion
            #endregion
            #region Franchises
            #region Franchise
            For<IFranchiseWorkflow>(new SingletonLifecycle()).Use<FranchiseWorkflow>();
            For<IFranchiseWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithNotesAssociationWorkflow>();
            For<IFranchiseWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithImagesAssociationWorkflow>();
            For<IFranchiseWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithAccountsAssociationWorkflow>();
            For<IFranchiseWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithBrandsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Categories
            For<IFranchiseWithManufacturersAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithManufacturersAssociationWorkflow>();
            For<IFranchiseWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithProductsAssociationWorkflow>();
            For<IFranchiseWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithStoresAssociationWorkflow>();
            For<IFranchiseWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithUsersAssociationWorkflow>();
            For<IFranchiseWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithVendorsAssociationWorkflow>();
            For<IFranchiseWithFranchiseCurrenciesAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseCurrenciesAssociationWorkflow>();
            For<IFranchiseWithFranchiseInventoryLocationsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseInventoryLocationsAssociationWorkflow>();
            For<IFranchiseWithFranchiseLanguagesAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseLanguagesAssociationWorkflow>();
            For<IFranchiseWithFranchiseSiteDomainsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseSiteDomainsAssociationWorkflow>();
            For<IFranchiseWithFranchiseCountriesAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseCountriesAssociationWorkflow>();
            For<IFranchiseWithFranchiseRegionsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseRegionsAssociationWorkflow>();
            For<IFranchiseWithFranchiseDistrictsAssociationWorkflow>(new SingletonLifecycle()).Use<FranchiseWithFranchiseDistrictsAssociationWorkflow>();
            #endregion
            #region FranchiseAccount
            For<IFranchiseAccountWorkflow>(new SingletonLifecycle()).Use<FranchiseAccountWorkflow>();
            #endregion
            #region FranchiseCategory
            For<IFranchiseCategoryWorkflow>(new SingletonLifecycle()).Use<FranchiseCategoryWorkflow>();
            #endregion
            #region FranchiseCountry
            For<IFranchiseCountryWorkflow>(new SingletonLifecycle()).Use<FranchiseCountryWorkflow>();
            #endregion
            #region FranchiseCurrency
            For<IFranchiseCurrencyWorkflow>(new SingletonLifecycle()).Use<FranchiseCurrencyWorkflow>();
            #endregion
            #region FranchiseDistrict
            For<IFranchiseDistrictWorkflow>(new SingletonLifecycle()).Use<FranchiseDistrictWorkflow>();
            #endregion
            #region FranchiseImage
            For<IFranchiseImageWorkflow>(new SingletonLifecycle()).Use<FranchiseImageWorkflow>();
            #endregion
            #region FranchiseImageType
            For<IFranchiseImageTypeWorkflow>(new SingletonLifecycle()).Use<FranchiseImageTypeWorkflow>();
            #endregion
            #region FranchiseInventoryLocation
            For<IFranchiseInventoryLocationWorkflow>(new SingletonLifecycle()).Use<FranchiseInventoryLocationWorkflow>();
            #endregion
            #region FranchiseInventoryLocationType
            For<IFranchiseInventoryLocationTypeWorkflow>(new SingletonLifecycle()).Use<FranchiseInventoryLocationTypeWorkflow>();
            #endregion
            #region FranchiseLanguage
            For<IFranchiseLanguageWorkflow>(new SingletonLifecycle()).Use<FranchiseLanguageWorkflow>();
            #endregion
            #region FranchiseManufacturer
            For<IFranchiseManufacturerWorkflow>(new SingletonLifecycle()).Use<FranchiseManufacturerWorkflow>();
            #endregion
            #region FranchiseProduct
            For<IFranchiseProductWorkflow>(new SingletonLifecycle()).Use<FranchiseProductWorkflow>();
            #endregion
            #region FranchiseRegion
            For<IFranchiseRegionWorkflow>(new SingletonLifecycle()).Use<FranchiseRegionWorkflow>();
            #endregion
            #region FranchiseSiteDomain
            For<IFranchiseSiteDomainWorkflow>(new SingletonLifecycle()).Use<FranchiseSiteDomainWorkflow>();
            #endregion
            #region FranchiseStore
            For<IFranchiseStoreWorkflow>(new SingletonLifecycle()).Use<FranchiseStoreWorkflow>();
            #endregion
            #region FranchiseType
            For<IFranchiseTypeWorkflow>(new SingletonLifecycle()).Use<FranchiseTypeWorkflow>();
            #endregion
            #region FranchiseUser
            For<IFranchiseUserWorkflow>(new SingletonLifecycle()).Use<FranchiseUserWorkflow>();
            #endregion
            #region FranchiseVendor
            For<IFranchiseVendorWorkflow>(new SingletonLifecycle()).Use<FranchiseVendorWorkflow>();
            #endregion
            #endregion
            #region Geography
            #region Address
            For<IAddressWorkflow>(new SingletonLifecycle()).Use<AddressWorkflow>();
            #endregion
            #region Country
            For<ICountryWorkflow>(new SingletonLifecycle()).Use<CountryWorkflow>();
            For<ICountryWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<CountryWithImagesAssociationWorkflow>();
            For<ICountryWithLanguagesAssociationWorkflow>(new SingletonLifecycle()).Use<CountryWithLanguagesAssociationWorkflow>();
            For<ICountryWithCurrenciesAssociationWorkflow>(new SingletonLifecycle()).Use<CountryWithCurrenciesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Taxes
            // Skipped: Not supposed to map this property in via this manner: Regions
            // Skipped: Not supposed to map this property in via this manner: Districts
            #endregion
            #region CountryCurrency
            For<ICountryCurrencyWorkflow>(new SingletonLifecycle()).Use<CountryCurrencyWorkflow>();
            #endregion
            #region CountryImage
            For<ICountryImageWorkflow>(new SingletonLifecycle()).Use<CountryImageWorkflow>();
            #endregion
            #region CountryImageType
            For<ICountryImageTypeWorkflow>(new SingletonLifecycle()).Use<CountryImageTypeWorkflow>();
            #endregion
            #region CountryLanguage
            For<ICountryLanguageWorkflow>(new SingletonLifecycle()).Use<CountryLanguageWorkflow>();
            #endregion
            #region District
            For<IDistrictWorkflow>(new SingletonLifecycle()).Use<DistrictWorkflow>();
            For<IDistrictWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<DistrictWithImagesAssociationWorkflow>();
            For<IDistrictWithLanguagesAssociationWorkflow>(new SingletonLifecycle()).Use<DistrictWithLanguagesAssociationWorkflow>();
            For<IDistrictWithCurrenciesAssociationWorkflow>(new SingletonLifecycle()).Use<DistrictWithCurrenciesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Taxes
            #endregion
            #region DistrictCurrency
            For<IDistrictCurrencyWorkflow>(new SingletonLifecycle()).Use<DistrictCurrencyWorkflow>();
            #endregion
            #region DistrictImage
            For<IDistrictImageWorkflow>(new SingletonLifecycle()).Use<DistrictImageWorkflow>();
            #endregion
            #region DistrictImageType
            For<IDistrictImageTypeWorkflow>(new SingletonLifecycle()).Use<DistrictImageTypeWorkflow>();
            #endregion
            #region DistrictLanguage
            For<IDistrictLanguageWorkflow>(new SingletonLifecycle()).Use<DistrictLanguageWorkflow>();
            #endregion
            #region HistoricalAddressValidation
            For<IHistoricalAddressValidationWorkflow>(new SingletonLifecycle()).Use<HistoricalAddressValidationWorkflow>();
            #endregion
            #region PhonePrefixLookup
            For<IPhonePrefixLookupWorkflow>(new SingletonLifecycle()).Use<PhonePrefixLookupWorkflow>();
            #endregion
            #region Region
            For<IRegionWorkflow>(new SingletonLifecycle()).Use<RegionWorkflow>();
            For<IRegionWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<RegionWithImagesAssociationWorkflow>();
            For<IRegionWithLanguagesAssociationWorkflow>(new SingletonLifecycle()).Use<RegionWithLanguagesAssociationWorkflow>();
            For<IRegionWithCurrenciesAssociationWorkflow>(new SingletonLifecycle()).Use<RegionWithCurrenciesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Taxes
            // Skipped: Not supposed to map this property in via this manner: Districts
            #endregion
            #region RegionCurrency
            For<IRegionCurrencyWorkflow>(new SingletonLifecycle()).Use<RegionCurrencyWorkflow>();
            #endregion
            #region RegionImage
            For<IRegionImageWorkflow>(new SingletonLifecycle()).Use<RegionImageWorkflow>();
            #endregion
            #region RegionImageType
            For<IRegionImageTypeWorkflow>(new SingletonLifecycle()).Use<RegionImageTypeWorkflow>();
            #endregion
            #region RegionLanguage
            For<IRegionLanguageWorkflow>(new SingletonLifecycle()).Use<RegionLanguageWorkflow>();
            #endregion
            #region ZipCode
            For<IZipCodeWorkflow>(new SingletonLifecycle()).Use<ZipCodeWorkflow>();
            #endregion
            #endregion
            #region Globalization
            #region Language
            For<ILanguageWorkflow>(new SingletonLifecycle()).Use<LanguageWorkflow>();
            For<ILanguageWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<LanguageWithImagesAssociationWorkflow>();
            #endregion
            #region LanguageImage
            For<ILanguageImageWorkflow>(new SingletonLifecycle()).Use<LanguageImageWorkflow>();
            #endregion
            #region LanguageImageType
            For<ILanguageImageTypeWorkflow>(new SingletonLifecycle()).Use<LanguageImageTypeWorkflow>();
            #endregion
            #region UiKey
            For<IUiKeyWorkflow>(new SingletonLifecycle()).Use<UiKeyWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: UiTranslations
            #endregion
            #region UiTranslation
            For<IUiTranslationWorkflow>(new SingletonLifecycle()).Use<UiTranslationWorkflow>();
            #endregion
            #endregion
            #region Groups
            #region Group
            For<IGroupWorkflow>(new SingletonLifecycle()).Use<GroupWorkflow>();
            // Skipped: Not supposed to make it or fully deprecated: Children
            For<IGroupWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<GroupWithUsersAssociationWorkflow>();
            #endregion
            #region GroupStatus
            For<IGroupStatusWorkflow>(new SingletonLifecycle()).Use<GroupStatusWorkflow>();
            #endregion
            #region GroupType
            For<IGroupTypeWorkflow>(new SingletonLifecycle()).Use<GroupTypeWorkflow>();
            #endregion
            #region GroupUser
            For<IGroupUserWorkflow>(new SingletonLifecycle()).Use<GroupUserWorkflow>();
            #endregion
            #endregion
            #region Hangfire
            #region ScheduledJobConfiguration
            For<IScheduledJobConfigurationWorkflow>(new SingletonLifecycle()).Use<ScheduledJobConfigurationWorkflow>();
            For<IScheduledJobConfigurationWithScheduledJobConfigurationSettingsAssociationWorkflow>(new SingletonLifecycle()).Use<ScheduledJobConfigurationWithScheduledJobConfigurationSettingsAssociationWorkflow>();
            #endregion
            #region ScheduledJobConfigurationSetting
            For<IScheduledJobConfigurationSettingWorkflow>(new SingletonLifecycle()).Use<ScheduledJobConfigurationSettingWorkflow>();
            #endregion
            #endregion
            #region Inventory
            #region InventoryLocation
            For<IInventoryLocationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWorkflow>();
            For<IInventoryLocationWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWithBrandsAssociationWorkflow>();
            For<IInventoryLocationWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWithFranchisesAssociationWorkflow>();
            For<IInventoryLocationWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWithStoresAssociationWorkflow>();
            For<IInventoryLocationWithSectionsAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWithSectionsAssociationWorkflow>();
            For<IInventoryLocationWithRegionsAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWithRegionsAssociationWorkflow>();
            For<IInventoryLocationWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationWithUsersAssociationWorkflow>();
            #endregion
            #region InventoryLocationRegion
            For<IInventoryLocationRegionWorkflow>(new SingletonLifecycle()).Use<InventoryLocationRegionWorkflow>();
            #endregion
            #region InventoryLocationSection
            For<IInventoryLocationSectionWorkflow>(new SingletonLifecycle()).Use<InventoryLocationSectionWorkflow>();
            For<IInventoryLocationSectionWithProductInventoryLocationSectionsAssociationWorkflow>(new SingletonLifecycle()).Use<InventoryLocationSectionWithProductInventoryLocationSectionsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Shipments
            #endregion
            #region InventoryLocationUser
            For<IInventoryLocationUserWorkflow>(new SingletonLifecycle()).Use<InventoryLocationUserWorkflow>();
            #endregion
            #endregion
            #region Invoicing
            #region SalesInvoice
            For<ISalesInvoiceWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWorkflow>();
            For<ISalesInvoiceWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithNotesAssociationWorkflow>();
            For<ISalesInvoiceWithAssociatedSalesOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithAssociatedSalesOrdersAssociationWorkflow>();
            For<ISalesInvoiceWithSalesInvoicePaymentsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithSalesInvoicePaymentsAssociationWorkflow>();
            For<ISalesInvoiceWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<ISalesInvoiceWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithStoredFilesAssociationWorkflow>();
            For<ISalesInvoiceWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<ISalesInvoiceWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesInvoiceContact
            For<ISalesInvoiceContactWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceContactWorkflow>();
            #endregion
            #region SalesInvoiceEvent
            For<ISalesInvoiceEventWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceEventWorkflow>();
            #endregion
            #region SalesInvoiceEventType
            For<ISalesInvoiceEventTypeWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceEventTypeWorkflow>();
            #endregion
            #region SalesInvoiceFile
            For<ISalesInvoiceFileWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceFileWorkflow>();
            #endregion
            #region SalesInvoiceItem
            For<ISalesInvoiceItemWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceItemWorkflow>();
            For<ISalesInvoiceItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceItemWithDiscountsAssociationWorkflow>();
            For<ISalesInvoiceItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceItemWithTargetsAssociationWorkflow>();
            For<ISalesInvoiceItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesInvoiceItemTarget
            For<ISalesInvoiceItemTargetWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceItemTargetWorkflow>();
            #endregion
            #region SalesInvoiceState
            For<ISalesInvoiceStateWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceStateWorkflow>();
            #endregion
            #region SalesInvoiceStatus
            For<ISalesInvoiceStatusWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceStatusWorkflow>();
            #endregion
            #region SalesInvoiceType
            For<ISalesInvoiceTypeWorkflow>(new SingletonLifecycle()).Use<SalesInvoiceTypeWorkflow>();
            #endregion
            #region SalesOrderSalesInvoice
            For<ISalesOrderSalesInvoiceWorkflow>(new SingletonLifecycle()).Use<SalesOrderSalesInvoiceWorkflow>();
            #endregion
            #endregion
            #region Manufacturers
            #region Manufacturer
            For<IManufacturerWorkflow>(new SingletonLifecycle()).Use<ManufacturerWorkflow>();
            For<IManufacturerWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<ManufacturerWithNotesAssociationWorkflow>();
            For<IManufacturerWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<ManufacturerWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            // Skipped: Not supposed to map this property in via this manner: Brands
            // Skipped: Not supposed to map this property in via this manner: Franchises
            For<IManufacturerWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<ManufacturerWithProductsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Stores
            For<IManufacturerWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<ManufacturerWithVendorsAssociationWorkflow>();
            #endregion
            #region ManufacturerImage
            For<IManufacturerImageWorkflow>(new SingletonLifecycle()).Use<ManufacturerImageWorkflow>();
            #endregion
            #region ManufacturerImageType
            For<IManufacturerImageTypeWorkflow>(new SingletonLifecycle()).Use<ManufacturerImageTypeWorkflow>();
            #endregion
            #region ManufacturerProduct
            For<IManufacturerProductWorkflow>(new SingletonLifecycle()).Use<ManufacturerProductWorkflow>();
            #endregion
            #region ManufacturerType
            For<IManufacturerTypeWorkflow>(new SingletonLifecycle()).Use<ManufacturerTypeWorkflow>();
            #endregion
            #endregion
            #region Media
            #region StoredFile
            For<IStoredFileWorkflow>(new SingletonLifecycle()).Use<StoredFileWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: AccountFiles
            // Skipped: Not supposed to map this property in via this manner: CategoryFiles
            #endregion
            #endregion
            #region Messaging
            #region Conversation
            For<IConversationWorkflow>(new SingletonLifecycle()).Use<ConversationWorkflow>();
            For<IConversationWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<ConversationWithUsersAssociationWorkflow>();
            For<IConversationWithMessagesAssociationWorkflow>(new SingletonLifecycle()).Use<ConversationWithMessagesAssociationWorkflow>();
            #endregion
            #region ConversationUser
            For<IConversationUserWorkflow>(new SingletonLifecycle()).Use<ConversationUserWorkflow>();
            #endregion
            #region EmailQueue
            For<IEmailQueueWorkflow>(new SingletonLifecycle()).Use<EmailQueueWorkflow>();
            For<IEmailQueueWithEmailQueueAttachmentsAssociationWorkflow>(new SingletonLifecycle()).Use<EmailQueueWithEmailQueueAttachmentsAssociationWorkflow>();
            #endregion
            #region EmailQueueAttachment
            For<IEmailQueueAttachmentWorkflow>(new SingletonLifecycle()).Use<EmailQueueAttachmentWorkflow>();
            #endregion
            #region EmailStatus
            For<IEmailStatusWorkflow>(new SingletonLifecycle()).Use<EmailStatusWorkflow>();
            #endregion
            #region EmailTemplate
            For<IEmailTemplateWorkflow>(new SingletonLifecycle()).Use<EmailTemplateWorkflow>();
            #endregion
            #region EmailType
            For<IEmailTypeWorkflow>(new SingletonLifecycle()).Use<EmailTypeWorkflow>();
            #endregion
            #region Message
            For<IMessageWorkflow>(new SingletonLifecycle()).Use<MessageWorkflow>();
            For<IMessageWithMessageRecipientsAssociationWorkflow>(new SingletonLifecycle()).Use<MessageWithMessageRecipientsAssociationWorkflow>();
            For<IMessageWithMessageAttachmentsAssociationWorkflow>(new SingletonLifecycle()).Use<MessageWithMessageAttachmentsAssociationWorkflow>();
            #endregion
            #region MessageAttachment
            For<IMessageAttachmentWorkflow>(new SingletonLifecycle()).Use<MessageAttachmentWorkflow>();
            #endregion
            #region MessageRecipient
            For<IMessageRecipientWorkflow>(new SingletonLifecycle()).Use<MessageRecipientWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: EmailQueues
            #endregion
            #region ProductNotification
            For<IProductNotificationWorkflow>(new SingletonLifecycle()).Use<ProductNotificationWorkflow>();
            #endregion
            #endregion
            #region Ordering
            #region SalesOrder
            For<ISalesOrderWorkflow>(new SingletonLifecycle()).Use<SalesOrderWorkflow>();
            For<ISalesOrderWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithNotesAssociationWorkflow>();
            For<ISalesOrderWithSalesOrderPaymentsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithSalesOrderPaymentsAssociationWorkflow>();
            For<ISalesOrderWithAssociatedSalesQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithAssociatedSalesQuotesAssociationWorkflow>();
            For<ISalesOrderWithAssociatedSalesReturnsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithAssociatedSalesReturnsAssociationWorkflow>();
            For<ISalesOrderWithAssociatedSalesInvoicesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithAssociatedSalesInvoicesAssociationWorkflow>();
            For<ISalesOrderWithAssociatedPurchaseOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithAssociatedPurchaseOrdersAssociationWorkflow>();
            For<ISalesOrderWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<ISalesOrderWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithStoredFilesAssociationWorkflow>();
            For<ISalesOrderWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<ISalesOrderWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesOrderContact
            For<ISalesOrderContactWorkflow>(new SingletonLifecycle()).Use<SalesOrderContactWorkflow>();
            #endregion
            #region SalesOrderEvent
            For<ISalesOrderEventWorkflow>(new SingletonLifecycle()).Use<SalesOrderEventWorkflow>();
            #endregion
            #region SalesOrderEventType
            For<ISalesOrderEventTypeWorkflow>(new SingletonLifecycle()).Use<SalesOrderEventTypeWorkflow>();
            #endregion
            #region SalesOrderFile
            For<ISalesOrderFileWorkflow>(new SingletonLifecycle()).Use<SalesOrderFileWorkflow>();
            #endregion
            #region SalesOrderItem
            For<ISalesOrderItemWorkflow>(new SingletonLifecycle()).Use<SalesOrderItemWorkflow>();
            For<ISalesOrderItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderItemWithDiscountsAssociationWorkflow>();
            For<ISalesOrderItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderItemWithTargetsAssociationWorkflow>();
            For<ISalesOrderItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesOrderItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesOrderItemTarget
            For<ISalesOrderItemTargetWorkflow>(new SingletonLifecycle()).Use<SalesOrderItemTargetWorkflow>();
            #endregion
            #region SalesOrderState
            For<ISalesOrderStateWorkflow>(new SingletonLifecycle()).Use<SalesOrderStateWorkflow>();
            #endregion
            #region SalesOrderStatus
            For<ISalesOrderStatusWorkflow>(new SingletonLifecycle()).Use<SalesOrderStatusWorkflow>();
            #endregion
            #region SalesOrderType
            For<ISalesOrderTypeWorkflow>(new SingletonLifecycle()).Use<SalesOrderTypeWorkflow>();
            #endregion
            #endregion
            #region Payments
            #region Membership
            For<IMembershipWorkflow>(new SingletonLifecycle()).Use<MembershipWorkflow>();
            For<IMembershipWithMembershipLevelsAssociationWorkflow>(new SingletonLifecycle()).Use<MembershipWithMembershipLevelsAssociationWorkflow>();
            For<IMembershipWithMembershipRepeatTypesAssociationWorkflow>(new SingletonLifecycle()).Use<MembershipWithMembershipRepeatTypesAssociationWorkflow>();
            #endregion
            #region MembershipAdZoneAccess
            For<IMembershipAdZoneAccessWorkflow>(new SingletonLifecycle()).Use<MembershipAdZoneAccessWorkflow>();
            For<IMembershipAdZoneAccessWithMembershipAdZoneAccessByLevelsAssociationWorkflow>(new SingletonLifecycle()).Use<MembershipAdZoneAccessWithMembershipAdZoneAccessByLevelsAssociationWorkflow>();
            #endregion
            #region MembershipAdZoneAccessByLevel
            For<IMembershipAdZoneAccessByLevelWorkflow>(new SingletonLifecycle()).Use<MembershipAdZoneAccessByLevelWorkflow>();
            #endregion
            #region MembershipLevel
            For<IMembershipLevelWorkflow>(new SingletonLifecycle()).Use<MembershipLevelWorkflow>();
            For<IMembershipLevelWithMembershipAdZoneAccessByLevelsAssociationWorkflow>(new SingletonLifecycle()).Use<MembershipLevelWithMembershipAdZoneAccessByLevelsAssociationWorkflow>();
            #endregion
            #region MembershipRepeatType
            For<IMembershipRepeatTypeWorkflow>(new SingletonLifecycle()).Use<MembershipRepeatTypeWorkflow>();
            #endregion
            #region Payment
            For<IPaymentWorkflow>(new SingletonLifecycle()).Use<PaymentWorkflow>();
            #endregion
            #region PaymentMethod
            For<IPaymentMethodWorkflow>(new SingletonLifecycle()).Use<PaymentMethodWorkflow>();
            #endregion
            #region PaymentStatus
            For<IPaymentStatusWorkflow>(new SingletonLifecycle()).Use<PaymentStatusWorkflow>();
            #endregion
            #region PaymentType
            For<IPaymentTypeWorkflow>(new SingletonLifecycle()).Use<PaymentTypeWorkflow>();
            #endregion
            #region RepeatType
            For<IRepeatTypeWorkflow>(new SingletonLifecycle()).Use<RepeatTypeWorkflow>();
            For<IRepeatTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>(new SingletonLifecycle()).Use<RepeatTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>();
            #endregion
            #region SalesInvoicePayment
            For<ISalesInvoicePaymentWorkflow>(new SingletonLifecycle()).Use<SalesInvoicePaymentWorkflow>();
            #endregion
            #region SalesOrderPayment
            For<ISalesOrderPaymentWorkflow>(new SingletonLifecycle()).Use<SalesOrderPaymentWorkflow>();
            #endregion
            #region SalesReturnPayment
            For<ISalesReturnPaymentWorkflow>(new SingletonLifecycle()).Use<SalesReturnPaymentWorkflow>();
            #endregion
            #region Subscription
            For<ISubscriptionWorkflow>(new SingletonLifecycle()).Use<SubscriptionWorkflow>();
            For<ISubscriptionWithSubscriptionHistoriesAssociationWorkflow>(new SingletonLifecycle()).Use<SubscriptionWithSubscriptionHistoriesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: StoreSubscriptions
            #endregion
            #region SubscriptionHistory
            For<ISubscriptionHistoryWorkflow>(new SingletonLifecycle()).Use<SubscriptionHistoryWorkflow>();
            #endregion
            #region SubscriptionStatus
            For<ISubscriptionStatusWorkflow>(new SingletonLifecycle()).Use<SubscriptionStatusWorkflow>();
            #endregion
            #region SubscriptionType
            For<ISubscriptionTypeWorkflow>(new SingletonLifecycle()).Use<SubscriptionTypeWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: ProductSubscriptionTypes
            For<ISubscriptionTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>(new SingletonLifecycle()).Use<SubscriptionTypeWithSubscriptionTypeRepeatTypesAssociationWorkflow>();
            #endregion
            #region SubscriptionTypeRepeatType
            For<ISubscriptionTypeRepeatTypeWorkflow>(new SingletonLifecycle()).Use<SubscriptionTypeRepeatTypeWorkflow>();
            #endregion
            #region Wallet
            For<IWalletWorkflow>(new SingletonLifecycle()).Use<WalletWorkflow>();
            #endregion
            #endregion
            #region Pricing
            #region PricePoint
            For<IPricePointWorkflow>(new SingletonLifecycle()).Use<PricePointWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: StoreAccounts
            #endregion
            #region PriceRounding
            For<IPriceRoundingWorkflow>(new SingletonLifecycle()).Use<PriceRoundingWorkflow>();
            #endregion
            #region PriceRule
            For<IPriceRuleWorkflow>(new SingletonLifecycle()).Use<PriceRuleWorkflow>();
            For<IPriceRuleWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithProductsAssociationWorkflow>();
            For<IPriceRuleWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithBrandsAssociationWorkflow>();
            For<IPriceRuleWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithFranchisesAssociationWorkflow>();
            For<IPriceRuleWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithStoresAssociationWorkflow>();
            For<IPriceRuleWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithAccountsAssociationWorkflow>();
            For<IPriceRuleWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithVendorsAssociationWorkflow>();
            For<IPriceRuleWithManufacturersAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithManufacturersAssociationWorkflow>();
            For<IPriceRuleWithPriceRuleCountriesAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithPriceRuleCountriesAssociationWorkflow>();
            For<IPriceRuleWithPriceRuleUserRolesAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithPriceRuleUserRolesAssociationWorkflow>();
            For<IPriceRuleWithPriceRuleCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithPriceRuleCategoriesAssociationWorkflow>();
            For<IPriceRuleWithPriceRuleAccountTypesAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithPriceRuleAccountTypesAssociationWorkflow>();
            For<IPriceRuleWithPriceRuleProductTypesAssociationWorkflow>(new SingletonLifecycle()).Use<PriceRuleWithPriceRuleProductTypesAssociationWorkflow>();
            #endregion
            #region PriceRuleAccount
            For<IPriceRuleAccountWorkflow>(new SingletonLifecycle()).Use<PriceRuleAccountWorkflow>();
            #endregion
            #region PriceRuleAccountType
            For<IPriceRuleAccountTypeWorkflow>(new SingletonLifecycle()).Use<PriceRuleAccountTypeWorkflow>();
            #endregion
            #region PriceRuleBrand
            For<IPriceRuleBrandWorkflow>(new SingletonLifecycle()).Use<PriceRuleBrandWorkflow>();
            #endregion
            #region PriceRuleCategory
            For<IPriceRuleCategoryWorkflow>(new SingletonLifecycle()).Use<PriceRuleCategoryWorkflow>();
            #endregion
            #region PriceRuleCountry
            For<IPriceRuleCountryWorkflow>(new SingletonLifecycle()).Use<PriceRuleCountryWorkflow>();
            #endregion
            #region PriceRuleFranchise
            For<IPriceRuleFranchiseWorkflow>(new SingletonLifecycle()).Use<PriceRuleFranchiseWorkflow>();
            #endregion
            #region PriceRuleManufacturer
            For<IPriceRuleManufacturerWorkflow>(new SingletonLifecycle()).Use<PriceRuleManufacturerWorkflow>();
            #endregion
            #region PriceRuleProduct
            For<IPriceRuleProductWorkflow>(new SingletonLifecycle()).Use<PriceRuleProductWorkflow>();
            #endregion
            #region PriceRuleProductType
            For<IPriceRuleProductTypeWorkflow>(new SingletonLifecycle()).Use<PriceRuleProductTypeWorkflow>();
            #endregion
            #region PriceRuleStore
            For<IPriceRuleStoreWorkflow>(new SingletonLifecycle()).Use<PriceRuleStoreWorkflow>();
            #endregion
            #region PriceRuleUserRole
            For<IPriceRuleUserRoleWorkflow>(new SingletonLifecycle()).Use<PriceRuleUserRoleWorkflow>();
            #endregion
            #region PriceRuleVendor
            For<IPriceRuleVendorWorkflow>(new SingletonLifecycle()).Use<PriceRuleVendorWorkflow>();
            #endregion
            #endregion
            #region Products
            #region FutureImport
            For<IFutureImportWorkflow>(new SingletonLifecycle()).Use<FutureImportWorkflow>();
            #endregion
            #region FutureImportStatus
            For<IFutureImportStatusWorkflow>(new SingletonLifecycle()).Use<FutureImportStatusWorkflow>();
            #endregion
            #region Product
            For<IProductWorkflow>(new SingletonLifecycle()).Use<ProductWorkflow>();
            For<IProductWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithImagesAssociationWorkflow>();
            For<IProductWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithStoredFilesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Accounts
            For<IProductWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithBrandsAssociationWorkflow>();
            For<IProductWithCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithCategoriesAssociationWorkflow>();
            For<IProductWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithFranchisesAssociationWorkflow>();
            For<IProductWithManufacturersAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithManufacturersAssociationWorkflow>();
            For<IProductWithStoresAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithStoresAssociationWorkflow>();
            For<IProductWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithVendorsAssociationWorkflow>();
            For<IProductWithProductAssociationsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductAssociationsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: ProductsAssociatedWith
            For<IProductWithProductMembershipLevelsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductMembershipLevelsAssociationWorkflow>();
            For<IProductWithProductDownloadsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductDownloadsAssociationWorkflow>();
            For<IProductWithProductShipCarrierMethodsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductShipCarrierMethodsAssociationWorkflow>();
            For<IProductWithProductSubscriptionTypesAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductSubscriptionTypesAssociationWorkflow>();
            For<IProductWithProductRestrictionsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductRestrictionsAssociationWorkflow>();
            For<IProductWithProductNotificationsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductWithProductNotificationsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            // Skipped: Not supposed to map this property in via this manner: ProductInventoryLocationSections
            // Skipped: Not supposed to map this property in via this manner: ProductPricePoints
            // Skipped: Not supposed to map this property in via this manner: CartItems
            // Skipped: Not supposed to map this property in via this manner: SalesOrderItems
            // Skipped: Not supposed to map this property in via this manner: SalesReturnItems
            // Skipped: Not supposed to map this property in via this manner: DiscountProducts
            #endregion
            #region ProductAssociation
            For<IProductAssociationWorkflow>(new SingletonLifecycle()).Use<ProductAssociationWorkflow>();
            #endregion
            #region ProductAssociationType
            For<IProductAssociationTypeWorkflow>(new SingletonLifecycle()).Use<ProductAssociationTypeWorkflow>();
            #endregion
            #region ProductCategory
            For<IProductCategoryWorkflow>(new SingletonLifecycle()).Use<ProductCategoryWorkflow>();
            #endregion
            #region ProductDownload
            For<IProductDownloadWorkflow>(new SingletonLifecycle()).Use<ProductDownloadWorkflow>();
            #endregion
            #region ProductDownloadType
            For<IProductDownloadTypeWorkflow>(new SingletonLifecycle()).Use<ProductDownloadTypeWorkflow>();
            #endregion
            #region ProductFile
            For<IProductFileWorkflow>(new SingletonLifecycle()).Use<ProductFileWorkflow>();
            #endregion
            #region ProductImage
            For<IProductImageWorkflow>(new SingletonLifecycle()).Use<ProductImageWorkflow>();
            #endregion
            #region ProductImageType
            For<IProductImageTypeWorkflow>(new SingletonLifecycle()).Use<ProductImageTypeWorkflow>();
            #endregion
            #region ProductInventoryLocationSection
            For<IProductInventoryLocationSectionWorkflow>(new SingletonLifecycle()).Use<ProductInventoryLocationSectionWorkflow>();
            #endregion
            #region ProductMembershipLevel
            For<IProductMembershipLevelWorkflow>(new SingletonLifecycle()).Use<ProductMembershipLevelWorkflow>();
            For<IProductMembershipLevelWithSubscriptionsAssociationWorkflow>(new SingletonLifecycle()).Use<ProductMembershipLevelWithSubscriptionsAssociationWorkflow>();
            #endregion
            #region ProductPricePoint
            For<IProductPricePointWorkflow>(new SingletonLifecycle()).Use<ProductPricePointWorkflow>();
            #endregion
            #region ProductRestriction
            For<IProductRestrictionWorkflow>(new SingletonLifecycle()).Use<ProductRestrictionWorkflow>();
            #endregion
            #region ProductShipCarrierMethod
            For<IProductShipCarrierMethodWorkflow>(new SingletonLifecycle()).Use<ProductShipCarrierMethodWorkflow>();
            #endregion
            #region ProductStatus
            For<IProductStatusWorkflow>(new SingletonLifecycle()).Use<ProductStatusWorkflow>();
            #endregion
            #region ProductSubscriptionType
            For<IProductSubscriptionTypeWorkflow>(new SingletonLifecycle()).Use<ProductSubscriptionTypeWorkflow>();
            #endregion
            #region ProductType
            For<IProductTypeWorkflow>(new SingletonLifecycle()).Use<ProductTypeWorkflow>();
            #endregion
            #endregion
            #region Purchasing
            #region PurchaseOrder
            For<IPurchaseOrderWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWorkflow>();
            For<IPurchaseOrderWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWithNotesAssociationWorkflow>();
            For<IPurchaseOrderWithAssociatedSalesOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWithAssociatedSalesOrdersAssociationWorkflow>();
            For<IPurchaseOrderWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<IPurchaseOrderWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWithStoredFilesAssociationWorkflow>();
            For<IPurchaseOrderWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<IPurchaseOrderWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderWithRateQuotesAssociationWorkflow>();
            #endregion
            #region PurchaseOrderContact
            For<IPurchaseOrderContactWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderContactWorkflow>();
            #endregion
            #region PurchaseOrderEvent
            For<IPurchaseOrderEventWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderEventWorkflow>();
            #endregion
            #region PurchaseOrderEventType
            For<IPurchaseOrderEventTypeWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderEventTypeWorkflow>();
            #endregion
            #region PurchaseOrderFile
            For<IPurchaseOrderFileWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderFileWorkflow>();
            #endregion
            #region PurchaseOrderItem
            For<IPurchaseOrderItemWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderItemWorkflow>();
            For<IPurchaseOrderItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderItemWithDiscountsAssociationWorkflow>();
            For<IPurchaseOrderItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderItemWithTargetsAssociationWorkflow>();
            For<IPurchaseOrderItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderItemWithNotesAssociationWorkflow>();
            #endregion
            #region PurchaseOrderItemTarget
            For<IPurchaseOrderItemTargetWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderItemTargetWorkflow>();
            #endregion
            #region PurchaseOrderState
            For<IPurchaseOrderStateWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderStateWorkflow>();
            #endregion
            #region PurchaseOrderStatus
            For<IPurchaseOrderStatusWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderStatusWorkflow>();
            #endregion
            #region PurchaseOrderType
            For<IPurchaseOrderTypeWorkflow>(new SingletonLifecycle()).Use<PurchaseOrderTypeWorkflow>();
            #endregion
            #region SalesOrderPurchaseOrder
            For<ISalesOrderPurchaseOrderWorkflow>(new SingletonLifecycle()).Use<SalesOrderPurchaseOrderWorkflow>();
            #endregion
            #endregion
            #region Questionnaire
            #region Answer
            For<IAnswerWorkflow>(new SingletonLifecycle()).Use<AnswerWorkflow>();
            #endregion
            #region Question
            For<IQuestionWorkflow>(new SingletonLifecycle()).Use<QuestionWorkflow>();
            For<IQuestionWithOptionsAssociationWorkflow>(new SingletonLifecycle()).Use<QuestionWithOptionsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: FollowUpQuestionOptions
            // Skipped: Not supposed to map this property in via this manner: ParentQuestions
            // Skipped: Not supposed to map this property in via this manner: Answers
            #endregion
            #region QuestionOption
            For<IQuestionOptionWorkflow>(new SingletonLifecycle()).Use<QuestionOptionWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Answers
            #endregion
            #region QuestionType
            For<IQuestionTypeWorkflow>(new SingletonLifecycle()).Use<QuestionTypeWorkflow>();
            #endregion
            #endregion
            #region Quoting
            #region SalesQuote
            For<ISalesQuoteWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWorkflow>();
            For<ISalesQuoteWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithNotesAssociationWorkflow>();
            For<ISalesQuoteWithAssociatedSalesOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithAssociatedSalesOrdersAssociationWorkflow>();
            For<ISalesQuoteWithSalesQuoteCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithSalesQuoteCategoriesAssociationWorkflow>();
            For<ISalesQuoteWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<ISalesQuoteWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithStoredFilesAssociationWorkflow>();
            For<ISalesQuoteWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<ISalesQuoteWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesQuoteCategory
            For<ISalesQuoteCategoryWorkflow>(new SingletonLifecycle()).Use<SalesQuoteCategoryWorkflow>();
            #endregion
            #region SalesQuoteContact
            For<ISalesQuoteContactWorkflow>(new SingletonLifecycle()).Use<SalesQuoteContactWorkflow>();
            #endregion
            #region SalesQuoteEvent
            For<ISalesQuoteEventWorkflow>(new SingletonLifecycle()).Use<SalesQuoteEventWorkflow>();
            #endregion
            #region SalesQuoteEventType
            For<ISalesQuoteEventTypeWorkflow>(new SingletonLifecycle()).Use<SalesQuoteEventTypeWorkflow>();
            #endregion
            #region SalesQuoteFile
            For<ISalesQuoteFileWorkflow>(new SingletonLifecycle()).Use<SalesQuoteFileWorkflow>();
            #endregion
            #region SalesQuoteItem
            For<ISalesQuoteItemWorkflow>(new SingletonLifecycle()).Use<SalesQuoteItemWorkflow>();
            For<ISalesQuoteItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteItemWithDiscountsAssociationWorkflow>();
            For<ISalesQuoteItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteItemWithTargetsAssociationWorkflow>();
            For<ISalesQuoteItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesQuoteItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesQuoteItemTarget
            For<ISalesQuoteItemTargetWorkflow>(new SingletonLifecycle()).Use<SalesQuoteItemTargetWorkflow>();
            #endregion
            #region SalesQuoteSalesOrder
            For<ISalesQuoteSalesOrderWorkflow>(new SingletonLifecycle()).Use<SalesQuoteSalesOrderWorkflow>();
            #endregion
            #region SalesQuoteState
            For<ISalesQuoteStateWorkflow>(new SingletonLifecycle()).Use<SalesQuoteStateWorkflow>();
            #endregion
            #region SalesQuoteStatus
            For<ISalesQuoteStatusWorkflow>(new SingletonLifecycle()).Use<SalesQuoteStatusWorkflow>();
            #endregion
            #region SalesQuoteType
            For<ISalesQuoteTypeWorkflow>(new SingletonLifecycle()).Use<SalesQuoteTypeWorkflow>();
            #endregion
            #endregion
            #region Reporting
            #region ReportType
            For<IReportTypeWorkflow>(new SingletonLifecycle()).Use<ReportTypeWorkflow>();
            #endregion
            #endregion
            #region Returning
            #region SalesReturn
            For<ISalesReturnWorkflow>(new SingletonLifecycle()).Use<SalesReturnWorkflow>();
            For<ISalesReturnWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithNotesAssociationWorkflow>();
            For<ISalesReturnWithSalesReturnPaymentsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithSalesReturnPaymentsAssociationWorkflow>();
            For<ISalesReturnWithAssociatedSalesOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithAssociatedSalesOrdersAssociationWorkflow>();
            For<ISalesReturnWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<ISalesReturnWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithStoredFilesAssociationWorkflow>();
            For<ISalesReturnWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<ISalesReturnWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SalesReturnContact
            For<ISalesReturnContactWorkflow>(new SingletonLifecycle()).Use<SalesReturnContactWorkflow>();
            #endregion
            #region SalesReturnEvent
            For<ISalesReturnEventWorkflow>(new SingletonLifecycle()).Use<SalesReturnEventWorkflow>();
            #endregion
            #region SalesReturnEventType
            For<ISalesReturnEventTypeWorkflow>(new SingletonLifecycle()).Use<SalesReturnEventTypeWorkflow>();
            #endregion
            #region SalesReturnFile
            For<ISalesReturnFileWorkflow>(new SingletonLifecycle()).Use<SalesReturnFileWorkflow>();
            #endregion
            #region SalesReturnItem
            For<ISalesReturnItemWorkflow>(new SingletonLifecycle()).Use<SalesReturnItemWorkflow>();
            For<ISalesReturnItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnItemWithDiscountsAssociationWorkflow>();
            For<ISalesReturnItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnItemWithTargetsAssociationWorkflow>();
            For<ISalesReturnItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesReturnItemWithNotesAssociationWorkflow>();
            #endregion
            #region SalesReturnItemTarget
            For<ISalesReturnItemTargetWorkflow>(new SingletonLifecycle()).Use<SalesReturnItemTargetWorkflow>();
            #endregion
            #region SalesReturnReason
            For<ISalesReturnReasonWorkflow>(new SingletonLifecycle()).Use<SalesReturnReasonWorkflow>();
            #endregion
            #region SalesReturnSalesOrder
            For<ISalesReturnSalesOrderWorkflow>(new SingletonLifecycle()).Use<SalesReturnSalesOrderWorkflow>();
            #endregion
            #region SalesReturnState
            For<ISalesReturnStateWorkflow>(new SingletonLifecycle()).Use<SalesReturnStateWorkflow>();
            #endregion
            #region SalesReturnStatus
            For<ISalesReturnStatusWorkflow>(new SingletonLifecycle()).Use<SalesReturnStatusWorkflow>();
            #endregion
            #region SalesReturnType
            For<ISalesReturnTypeWorkflow>(new SingletonLifecycle()).Use<SalesReturnTypeWorkflow>();
            #endregion
            #endregion
            #region Reviews
            #region Review
            For<IReviewWorkflow>(new SingletonLifecycle()).Use<ReviewWorkflow>();
            #endregion
            #region ReviewType
            For<IReviewTypeWorkflow>(new SingletonLifecycle()).Use<ReviewTypeWorkflow>();
            #endregion
            #endregion
            #region Sales
            #region SalesGroup
            For<ISalesGroupWorkflow>(new SingletonLifecycle()).Use<SalesGroupWorkflow>();
            For<ISalesGroupWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithNotesAssociationWorkflow>();
            For<ISalesGroupWithSalesQuoteRequestMastersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesQuoteRequestMastersAssociationWorkflow>();
            For<ISalesGroupWithSalesQuoteRequestSubsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesQuoteRequestSubsAssociationWorkflow>();
            For<ISalesGroupWithSalesQuoteResponseMastersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesQuoteResponseMastersAssociationWorkflow>();
            For<ISalesGroupWithSalesQuoteResponseSubsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesQuoteResponseSubsAssociationWorkflow>();
            For<ISalesGroupWithSubSalesOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSubSalesOrdersAssociationWorkflow>();
            For<ISalesGroupWithSalesOrderMastersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesOrderMastersAssociationWorkflow>();
            For<ISalesGroupWithPurchaseOrdersAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithPurchaseOrdersAssociationWorkflow>();
            For<ISalesGroupWithSalesInvoicesAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesInvoicesAssociationWorkflow>();
            For<ISalesGroupWithSalesReturnsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSalesReturnsAssociationWorkflow>();
            For<ISalesGroupWithSampleRequestsAssociationWorkflow>(new SingletonLifecycle()).Use<SalesGroupWithSampleRequestsAssociationWorkflow>();
            #endregion
            #region SalesItemTargetType
            For<ISalesItemTargetTypeWorkflow>(new SingletonLifecycle()).Use<SalesItemTargetTypeWorkflow>();
            #endregion
            #endregion
            #region Sampling
            #region SampleRequest
            For<ISampleRequestWorkflow>(new SingletonLifecycle()).Use<SampleRequestWorkflow>();
            For<ISampleRequestWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestWithNotesAssociationWorkflow>();
            For<ISampleRequestWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<ISampleRequestWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestWithStoredFilesAssociationWorkflow>();
            For<ISampleRequestWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<ISampleRequestWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestWithRateQuotesAssociationWorkflow>();
            #endregion
            #region SampleRequestContact
            For<ISampleRequestContactWorkflow>(new SingletonLifecycle()).Use<SampleRequestContactWorkflow>();
            #endregion
            #region SampleRequestEvent
            For<ISampleRequestEventWorkflow>(new SingletonLifecycle()).Use<SampleRequestEventWorkflow>();
            #endregion
            #region SampleRequestEventType
            For<ISampleRequestEventTypeWorkflow>(new SingletonLifecycle()).Use<SampleRequestEventTypeWorkflow>();
            #endregion
            #region SampleRequestFile
            For<ISampleRequestFileWorkflow>(new SingletonLifecycle()).Use<SampleRequestFileWorkflow>();
            #endregion
            #region SampleRequestItem
            For<ISampleRequestItemWorkflow>(new SingletonLifecycle()).Use<SampleRequestItemWorkflow>();
            For<ISampleRequestItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestItemWithDiscountsAssociationWorkflow>();
            For<ISampleRequestItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestItemWithTargetsAssociationWorkflow>();
            For<ISampleRequestItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<SampleRequestItemWithNotesAssociationWorkflow>();
            #endregion
            #region SampleRequestItemTarget
            For<ISampleRequestItemTargetWorkflow>(new SingletonLifecycle()).Use<SampleRequestItemTargetWorkflow>();
            #endregion
            #region SampleRequestState
            For<ISampleRequestStateWorkflow>(new SingletonLifecycle()).Use<SampleRequestStateWorkflow>();
            #endregion
            #region SampleRequestStatus
            For<ISampleRequestStatusWorkflow>(new SingletonLifecycle()).Use<SampleRequestStatusWorkflow>();
            #endregion
            #region SampleRequestType
            For<ISampleRequestTypeWorkflow>(new SingletonLifecycle()).Use<SampleRequestTypeWorkflow>();
            #endregion
            #endregion
            #region Scheduling
            #region Appointment
            For<IAppointmentWorkflow>(new SingletonLifecycle()).Use<AppointmentWorkflow>();
            For<IAppointmentWithCalendarsAssociationWorkflow>(new SingletonLifecycle()).Use<AppointmentWithCalendarsAssociationWorkflow>();
            #endregion
            #region AppointmentStatus
            For<IAppointmentStatusWorkflow>(new SingletonLifecycle()).Use<AppointmentStatusWorkflow>();
            #endregion
            #region AppointmentType
            For<IAppointmentTypeWorkflow>(new SingletonLifecycle()).Use<AppointmentTypeWorkflow>();
            #endregion
            #region Calendar
            For<ICalendarWorkflow>(new SingletonLifecycle()).Use<CalendarWorkflow>();
            For<ICalendarWithAppointmentsAssociationWorkflow>(new SingletonLifecycle()).Use<CalendarWithAppointmentsAssociationWorkflow>();
            #endregion
            #region CalendarAppointment
            For<ICalendarAppointmentWorkflow>(new SingletonLifecycle()).Use<CalendarAppointmentWorkflow>();
            #endregion
            #endregion
            #region Scouting
            #region Scout
            For<IScoutWorkflow>(new SingletonLifecycle()).Use<ScoutWorkflow>();
            For<IScoutWithCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<ScoutWithCategoriesAssociationWorkflow>();
            #endregion
            #region ScoutCategory
            For<IScoutCategoryWorkflow>(new SingletonLifecycle()).Use<ScoutCategoryWorkflow>();
            #endregion
            #region ScoutCategoryType
            For<IScoutCategoryTypeWorkflow>(new SingletonLifecycle()).Use<ScoutCategoryTypeWorkflow>();
            #endregion
            #endregion
            #region Shipping
            #region Package
            For<IPackageWorkflow>(new SingletonLifecycle()).Use<PackageWorkflow>();
            #endregion
            #region PackageType
            For<IPackageTypeWorkflow>(new SingletonLifecycle()).Use<PackageTypeWorkflow>();
            #endregion
            #region RateQuote
            For<IRateQuoteWorkflow>(new SingletonLifecycle()).Use<RateQuoteWorkflow>();
            #endregion
            #region ShipCarrier
            For<IShipCarrierWorkflow>(new SingletonLifecycle()).Use<ShipCarrierWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: PurchaseOrders
            For<IShipCarrierWithShipCarrierMethodsAssociationWorkflow>(new SingletonLifecycle()).Use<ShipCarrierWithShipCarrierMethodsAssociationWorkflow>();
            For<IShipCarrierWithShipmentsAssociationWorkflow>(new SingletonLifecycle()).Use<ShipCarrierWithShipmentsAssociationWorkflow>();
            #endregion
            #region ShipCarrierMethod
            For<IShipCarrierMethodWorkflow>(new SingletonLifecycle()).Use<ShipCarrierMethodWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: ProductShipCarrierMethods
            #endregion
            #region Shipment
            For<IShipmentWorkflow>(new SingletonLifecycle()).Use<ShipmentWorkflow>();
            For<IShipmentWithShipmentEventsAssociationWorkflow>(new SingletonLifecycle()).Use<ShipmentWithShipmentEventsAssociationWorkflow>();
            #endregion
            #region ShipmentEvent
            For<IShipmentEventWorkflow>(new SingletonLifecycle()).Use<ShipmentEventWorkflow>();
            #endregion
            #region ShipmentStatus
            For<IShipmentStatusWorkflow>(new SingletonLifecycle()).Use<ShipmentStatusWorkflow>();
            #endregion
            #region ShipmentType
            For<IShipmentTypeWorkflow>(new SingletonLifecycle()).Use<ShipmentTypeWorkflow>();
            #endregion
            #endregion
            #region Shopping
            #region Cart
            For<ICartWorkflow>(new SingletonLifecycle()).Use<CartWorkflow>();
            For<ICartWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<CartWithNotesAssociationWorkflow>();
            For<ICartWithSalesItemsAssociationWorkflow>(new SingletonLifecycle()).Use<CartWithSalesItemsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Discounts
            For<ICartWithStoredFilesAssociationWorkflow>(new SingletonLifecycle()).Use<CartWithStoredFilesAssociationWorkflow>();
            For<ICartWithContactsAssociationWorkflow>(new SingletonLifecycle()).Use<CartWithContactsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: SalesEvents
            For<ICartWithRateQuotesAssociationWorkflow>(new SingletonLifecycle()).Use<CartWithRateQuotesAssociationWorkflow>();
            #endregion
            #region CartContact
            For<ICartContactWorkflow>(new SingletonLifecycle()).Use<CartContactWorkflow>();
            #endregion
            #region CartEvent
            For<ICartEventWorkflow>(new SingletonLifecycle()).Use<CartEventWorkflow>();
            #endregion
            #region CartEventType
            For<ICartEventTypeWorkflow>(new SingletonLifecycle()).Use<CartEventTypeWorkflow>();
            #endregion
            #region CartFile
            For<ICartFileWorkflow>(new SingletonLifecycle()).Use<CartFileWorkflow>();
            #endregion
            #region CartItem
            For<ICartItemWorkflow>(new SingletonLifecycle()).Use<CartItemWorkflow>();
            For<ICartItemWithDiscountsAssociationWorkflow>(new SingletonLifecycle()).Use<CartItemWithDiscountsAssociationWorkflow>();
            For<ICartItemWithTargetsAssociationWorkflow>(new SingletonLifecycle()).Use<CartItemWithTargetsAssociationWorkflow>();
            For<ICartItemWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<CartItemWithNotesAssociationWorkflow>();
            #endregion
            #region CartItemTarget
            For<ICartItemTargetWorkflow>(new SingletonLifecycle()).Use<CartItemTargetWorkflow>();
            #endregion
            #region CartState
            For<ICartStateWorkflow>(new SingletonLifecycle()).Use<CartStateWorkflow>();
            #endregion
            #region CartStatus
            For<ICartStatusWorkflow>(new SingletonLifecycle()).Use<CartStatusWorkflow>();
            #endregion
            #region CartType
            For<ICartTypeWorkflow>(new SingletonLifecycle()).Use<CartTypeWorkflow>();
            #endregion
            #endregion
            #region Stores
            #region SiteDomain
            For<ISiteDomainWorkflow>(new SingletonLifecycle()).Use<SiteDomainWorkflow>();
            For<ISiteDomainWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<SiteDomainWithBrandsAssociationWorkflow>();
            For<ISiteDomainWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<SiteDomainWithFranchisesAssociationWorkflow>();
            #endregion
            #region SiteDomainSocialProvider
            For<ISiteDomainSocialProviderWorkflow>(new SingletonLifecycle()).Use<SiteDomainSocialProviderWorkflow>();
            #endregion
            #region SocialProvider
            For<ISocialProviderWorkflow>(new SingletonLifecycle()).Use<SocialProviderWorkflow>();
            For<ISocialProviderWithSiteDomainSocialProvidersAssociationWorkflow>(new SingletonLifecycle()).Use<SocialProviderWithSiteDomainSocialProvidersAssociationWorkflow>();
            #endregion
            #region Store
            For<IStoreWorkflow>(new SingletonLifecycle()).Use<StoreWorkflow>();
            For<IStoreWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithNotesAssociationWorkflow>();
            For<IStoreWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithImagesAssociationWorkflow>();
            For<IStoreWithReviewsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithReviewsAssociationWorkflow>();
            For<IStoreWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithProductsAssociationWorkflow>();
            For<IStoreWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithAccountsAssociationWorkflow>();
            For<IStoreWithUsersAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithUsersAssociationWorkflow>();
            For<IStoreWithVendorsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithVendorsAssociationWorkflow>();
            For<IStoreWithCategoriesAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithCategoriesAssociationWorkflow>();
            For<IStoreWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithBrandsAssociationWorkflow>();
            For<IStoreWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithFranchisesAssociationWorkflow>();
            For<IStoreWithManufacturersAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithManufacturersAssociationWorkflow>();
            For<IStoreWithStoreBadgesAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreBadgesAssociationWorkflow>();
            For<IStoreWithStoreContactsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreContactsAssociationWorkflow>();
            For<IStoreWithStoreInventoryLocationsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreInventoryLocationsAssociationWorkflow>();
            For<IStoreWithStoreSubscriptionsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreSubscriptionsAssociationWorkflow>();
            For<IStoreWithStoreCountriesAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreCountriesAssociationWorkflow>();
            For<IStoreWithStoreRegionsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreRegionsAssociationWorkflow>();
            For<IStoreWithStoreDistrictsAssociationWorkflow>(new SingletonLifecycle()).Use<StoreWithStoreDistrictsAssociationWorkflow>();
            #endregion
            #region StoreAccount
            For<IStoreAccountWorkflow>(new SingletonLifecycle()).Use<StoreAccountWorkflow>();
            #endregion
            #region StoreBadge
            For<IStoreBadgeWorkflow>(new SingletonLifecycle()).Use<StoreBadgeWorkflow>();
            #endregion
            #region StoreCategory
            For<IStoreCategoryWorkflow>(new SingletonLifecycle()).Use<StoreCategoryWorkflow>();
            #endregion
            #region StoreContact
            For<IStoreContactWorkflow>(new SingletonLifecycle()).Use<StoreContactWorkflow>();
            #endregion
            #region StoreCountry
            For<IStoreCountryWorkflow>(new SingletonLifecycle()).Use<StoreCountryWorkflow>();
            #endregion
            #region StoreDistrict
            For<IStoreDistrictWorkflow>(new SingletonLifecycle()).Use<StoreDistrictWorkflow>();
            #endregion
            #region StoreImage
            For<IStoreImageWorkflow>(new SingletonLifecycle()).Use<StoreImageWorkflow>();
            #endregion
            #region StoreImageType
            For<IStoreImageTypeWorkflow>(new SingletonLifecycle()).Use<StoreImageTypeWorkflow>();
            #endregion
            #region StoreInventoryLocation
            For<IStoreInventoryLocationWorkflow>(new SingletonLifecycle()).Use<StoreInventoryLocationWorkflow>();
            #endregion
            #region StoreInventoryLocationType
            For<IStoreInventoryLocationTypeWorkflow>(new SingletonLifecycle()).Use<StoreInventoryLocationTypeWorkflow>();
            #endregion
            #region StoreManufacturer
            For<IStoreManufacturerWorkflow>(new SingletonLifecycle()).Use<StoreManufacturerWorkflow>();
            #endregion
            #region StoreProduct
            For<IStoreProductWorkflow>(new SingletonLifecycle()).Use<StoreProductWorkflow>();
            #endregion
            #region StoreRegion
            For<IStoreRegionWorkflow>(new SingletonLifecycle()).Use<StoreRegionWorkflow>();
            #endregion
            #region StoreSubscription
            For<IStoreSubscriptionWorkflow>(new SingletonLifecycle()).Use<StoreSubscriptionWorkflow>();
            #endregion
            #region StoreType
            For<IStoreTypeWorkflow>(new SingletonLifecycle()).Use<StoreTypeWorkflow>();
            #endregion
            #region StoreUser
            For<IStoreUserWorkflow>(new SingletonLifecycle()).Use<StoreUserWorkflow>();
            #endregion
            #region StoreVendor
            For<IStoreVendorWorkflow>(new SingletonLifecycle()).Use<StoreVendorWorkflow>();
            #endregion
            #endregion
            #region System
            #region ImportExportMapping
            For<IImportExportMappingWorkflow>(new SingletonLifecycle()).Use<ImportExportMappingWorkflow>();
            #endregion
            #region Note
            For<INoteWorkflow>(new SingletonLifecycle()).Use<NoteWorkflow>();
            #endregion
            #region NoteType
            For<INoteTypeWorkflow>(new SingletonLifecycle()).Use<NoteTypeWorkflow>();
            #endregion
            #region RecordVersion
            For<IRecordVersionWorkflow>(new SingletonLifecycle()).Use<RecordVersionWorkflow>();
            #endregion
            #region RecordVersionType
            For<IRecordVersionTypeWorkflow>(new SingletonLifecycle()).Use<RecordVersionTypeWorkflow>();
            #endregion
            #region Setting
            For<ISettingWorkflow>(new SingletonLifecycle()).Use<SettingWorkflow>();
            #endregion
            #region SettingGroup
            For<ISettingGroupWorkflow>(new SingletonLifecycle()).Use<SettingGroupWorkflow>();
            #endregion
            #region SettingType
            For<ISettingTypeWorkflow>(new SingletonLifecycle()).Use<SettingTypeWorkflow>();
            #endregion
            #region EventLog
            For<IEventLogWorkflow>(new SingletonLifecycle()).Use<EventLogWorkflow>();
            #endregion
            #endregion
            #region Tax
            #region HistoricalTaxRate
            For<IHistoricalTaxRateWorkflow>(new SingletonLifecycle()).Use<HistoricalTaxRateWorkflow>();
            #endregion
            #region TaxCountry
            For<ITaxCountryWorkflow>(new SingletonLifecycle()).Use<TaxCountryWorkflow>();
            #endregion
            #region TaxDistrict
            For<ITaxDistrictWorkflow>(new SingletonLifecycle()).Use<TaxDistrictWorkflow>();
            #endregion
            #region TaxRegion
            For<ITaxRegionWorkflow>(new SingletonLifecycle()).Use<TaxRegionWorkflow>();
            #endregion
            #endregion
            #region Tracking
            #region Campaign
            For<ICampaignWorkflow>(new SingletonLifecycle()).Use<CampaignWorkflow>();
            For<ICampaignWithCampaignAdsAssociationWorkflow>(new SingletonLifecycle()).Use<CampaignWithCampaignAdsAssociationWorkflow>();
            #endregion
            #region CampaignAd
            For<ICampaignAdWorkflow>(new SingletonLifecycle()).Use<CampaignAdWorkflow>();
            #endregion
            #region CampaignStatus
            For<ICampaignStatusWorkflow>(new SingletonLifecycle()).Use<CampaignStatusWorkflow>();
            #endregion
            #region CampaignType
            For<ICampaignTypeWorkflow>(new SingletonLifecycle()).Use<CampaignTypeWorkflow>();
            #endregion
            #region Event
            For<IEventWorkflow>(new SingletonLifecycle()).Use<EventWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: PageViewEvents
            #endregion
            #region EventStatus
            For<IEventStatusWorkflow>(new SingletonLifecycle()).Use<EventStatusWorkflow>();
            #endregion
            #region EventType
            For<IEventTypeWorkflow>(new SingletonLifecycle()).Use<EventTypeWorkflow>();
            #endregion
            #region IPOrganization
            For<IIPOrganizationWorkflow>(new SingletonLifecycle()).Use<IPOrganizationWorkflow>();
            #endregion
            #region IPOrganizationStatus
            For<IIPOrganizationStatusWorkflow>(new SingletonLifecycle()).Use<IPOrganizationStatusWorkflow>();
            #endregion
            #region PageView
            For<IPageViewWorkflow>(new SingletonLifecycle()).Use<PageViewWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: PageViewEvents
            #endregion
            #region PageViewEvent
            For<IPageViewEventWorkflow>(new SingletonLifecycle()).Use<PageViewEventWorkflow>();
            #endregion
            #region PageViewStatus
            For<IPageViewStatusWorkflow>(new SingletonLifecycle()).Use<PageViewStatusWorkflow>();
            #endregion
            #region PageViewType
            For<IPageViewTypeWorkflow>(new SingletonLifecycle()).Use<PageViewTypeWorkflow>();
            #endregion
            #region Visit
            For<IVisitWorkflow>(new SingletonLifecycle()).Use<VisitWorkflow>();
            For<IVisitWithEventsAssociationWorkflow>(new SingletonLifecycle()).Use<VisitWithEventsAssociationWorkflow>();
            #endregion
            #region Visitor
            For<IVisitorWorkflow>(new SingletonLifecycle()).Use<VisitorWorkflow>();
            For<IVisitorWithVisitsAssociationWorkflow>(new SingletonLifecycle()).Use<VisitorWithVisitsAssociationWorkflow>();
            #endregion
            #region VisitStatus
            For<IVisitStatusWorkflow>(new SingletonLifecycle()).Use<VisitStatusWorkflow>();
            #endregion
            #endregion
            #region Vendors
            #region Vendor
            For<IVendorWorkflow>(new SingletonLifecycle()).Use<VendorWorkflow>();
            For<IVendorWithNotesAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithNotesAssociationWorkflow>();
            For<IVendorWithImagesAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithImagesAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Reviews
            For<IVendorWithAccountsAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithAccountsAssociationWorkflow>();
            For<IVendorWithBrandsAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithBrandsAssociationWorkflow>();
            For<IVendorWithFranchisesAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithFranchisesAssociationWorkflow>();
            For<IVendorWithManufacturersAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithManufacturersAssociationWorkflow>();
            For<IVendorWithProductsAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithProductsAssociationWorkflow>();
            // Skipped: Not supposed to map this property in via this manner: Stores
            For<IVendorWithShipmentsAssociationWorkflow>(new SingletonLifecycle()).Use<VendorWithShipmentsAssociationWorkflow>();
            #endregion
            #region VendorAccount
            For<IVendorAccountWorkflow>(new SingletonLifecycle()).Use<VendorAccountWorkflow>();
            #endregion
            #region VendorImage
            For<IVendorImageWorkflow>(new SingletonLifecycle()).Use<VendorImageWorkflow>();
            #endregion
            #region VendorImageType
            For<IVendorImageTypeWorkflow>(new SingletonLifecycle()).Use<VendorImageTypeWorkflow>();
            #endregion
            #region VendorManufacturer
            For<IVendorManufacturerWorkflow>(new SingletonLifecycle()).Use<VendorManufacturerWorkflow>();
            #endregion
            #region VendorProduct
            For<IVendorProductWorkflow>(new SingletonLifecycle()).Use<VendorProductWorkflow>();
            #endregion
            #region VendorType
            For<IVendorTypeWorkflow>(new SingletonLifecycle()).Use<VendorTypeWorkflow>();
            #endregion
            #endregion
        }
    }
}
#endif
