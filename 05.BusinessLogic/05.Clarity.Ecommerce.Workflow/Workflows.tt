<#@ template debug="true" hostspecific="True" language="C#"
#><#@ output extension=".cs"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="System.Web.dll"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)02.Interfaces\02.Clarity.Ecommerce.Interfaces.Models\bin\Debug\net472\Clarity.Ecommerce.Interfaces.Models.dll"
#><#@ assembly name="$(SolutionDir)02.Interfaces\02.Clarity.Ecommerce.Interfaces.Workflows\bin\Debug\net472\Clarity.Ecommerce.Interfaces.Workflows.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#@ include file="Workflows.ttinclude"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
List<string> processedNames = new List<string>() { "Status", "State", "Type", "RoleUser", "Report" };
foreach (IGrouping<string, Type> group in tableClasses)
{
    string schema = group.Key.Replace("System", "Structure");
    foreach (Type theType in group)
    {
        TypeDeterminer td = new TypeDeterminer(theType);
        if (td.IsExcludedFromT4 || processedNames.Contains(theType.Name)) { continue; }
        processedNames.Add(theType.Name);
        GenerateWorkflowsFile(schema, theType, td);
        SaveOutput(schema + "\\" + theType.Name + "\\" + theType.Name + "CRUDWorkflow", "generated.cs", true);
    }
}
DeleteOldOutputs();
#>// <autogenerated>
// <copyright file="Workflows.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Master section of the Workflows classes</summary>
// <remarks>This file was auto-generated by Workflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable 618
namespace Clarity.Ecommerce.Workflow
{
    using Interfaces.Workflow;

    public partial class WorkflowsController
    {
<#
string[] skips = new string[] {
    "Report", "RoleUser", "UserClaim", "UserLogin", "UserRole", "AccountUserRole", "Hangfire", "HangfireAggregatedCounter",
    "HangfireCounter", "HangfireHash", "HangfireJob", "HangfireJobParameter", "HangfireJobQueue", "HangfireList",
    "HangfireSchema", "HangfireServer", "HangfireSet", "HangfireState", "Permission", "RolePermission" };
var count = 0;
foreach (IGrouping<string, Type> group in tableClasses)
{
    foreach (Type theType in group)
    {
        if (skips.Contains(theType.Name)) { continue; }
        TypeDeterminer td = new TypeDeterminer(theType);
        if (td.IsExcludedFromT4) { continue; }
        ++count;#>
<#      if (count > 1) { #>

<#      } #>
        /// <inheritdoc/>
<#      if (td.IsDeprecated) { #>
        [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#      } #>
        public I<#= theType.Name #>Workflow <#= HelpFunctions.PluralizeName(theType.Name) #> => GetWorkflow<I<#= theType.Name #>Workflow>();
<#  } #>
<#
} #>
    }
}
