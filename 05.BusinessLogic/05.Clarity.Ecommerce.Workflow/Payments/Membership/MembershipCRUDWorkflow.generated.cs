// <autogenerated>
// <copyright file="MembershipWorkflow.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Workflow generated to provide base setups</summary>
// <remarks>This file was auto-generated by Workflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
// ReSharper disable ConvertToUsingDeclaration, InvertIf, ReturnValueOfPureMethodIsNotUsed, UnusedMember.Local
#pragma warning disable CS0618,CS1711,CS1572,CS1580,CS1581,CS1584
namespace Clarity.Ecommerce.Workflow
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Interfaces.Workflow;
    using Mapper;
    using Utilities;

    /// <summary>A workflow for Membership entities.</summary>
    /// <seealso cref="TypableWorkflowBase{IMembershipModel, IMembershipSearchModel, IMembership, Membership}"/>
    /// <seealso cref="IMembershipWorkflow"/>
    public partial class MembershipWorkflow
        : TypableWorkflowBase<IMembershipModel, IMembershipSearchModel, IMembership, Membership>
            , IMembershipWorkflow
    {
        #region Mappers
        /// <inheritdoc/>
        protected override Func<Membership?, string?, IMembershipModel?> MapFromConcreteFull
            => ModelMapperForMembership.MapMembershipModelFromEntityFull;

        /// <inheritdoc/>
        protected override Func<IQueryable<Membership>, string?, IEnumerable<IMembershipModel>> SelectLiteAndMapToModel
            => ModelMapperForMembership.SelectLiteMembershipAndMapToMembershipModel;

        /// <inheritdoc/>
        protected override Func<IQueryable<Membership>, string?, IEnumerable<IMembershipModel>> SelectListAndMapToModel
            => ModelMapperForMembership.SelectListMembershipAndMapToMembershipModel;

        /// <inheritdoc/>
        protected override Func<IQueryable<Membership>, string?, IMembershipModel?> SelectFirstFullAndMapToModel
            => ModelMapperForMembership.SelectFirstFullMembershipAndMapToMembershipModel;

        /// <inheritdoc/>
        protected override Func<IMembership, IMembershipModel, DateTime, DateTime?, IMembership> UpdateEntityFromModel
            => ModelMapperForMembership.UpdateMembershipFromModel;
        #endregion

        /// <inheritdoc/>
        protected override async Task<IQueryable<Membership>> FilterQueryByModelExtensionAsync(
            IQueryable<Membership> query,
            IMembershipSearchModel search,
            IClarityEcommerceEntities context)
        {
            return (await base.FilterQueryByModelExtensionAsync(query, search, context).ConfigureAwait(false))
                .FilterMembershipsBySearchModel(search);
        }

        /// <inheritdoc/>
        protected override async Task RunDefaultAssociateWorkflowsAsync(
            IMembership entity,
            IMembershipModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            await RunDefaultAssociateWorkflowsAsync(entity, model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        protected override async Task RunDefaultAssociateWorkflowsAsync(
            IMembership entity,
            IMembershipModel model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            await Workflows.AssociateJsonAttributes.AssociateObjectsAsync(entity, model, context).ConfigureAwait(false);
            SetDefaultJsonAttributesIfNull(entity);
            if (model.MembershipLevels != null) { await Workflows.MembershipWithMembershipLevelsAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
            if (model.MembershipRepeatTypes != null) { await Workflows.MembershipWithMembershipRepeatTypesAssociation.AssociateObjectsAsync(entity, model, timestamp, context).ConfigureAwait(false); }
        }

        #region Relate Workflows
        /// <inheritdoc/>
        protected override async Task RunDefaultRelateWorkflowsAsync(
            IMembership entity,
            IMembershipModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            await RunDefaultRelateWorkflowsAsync(entity, model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        // ReSharper disable AsyncConverter.AsyncAwaitMayBeElidedHighlighting, RedundantAwait
#pragma warning disable 1998
        protected override async Task RunDefaultRelateWorkflowsAsync(
#pragma warning restore 1998
            IMembership entity,
            IMembershipModel model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            // None to process
        }
        // ReSharper restore AsyncConverter.AsyncAwaitMayBeElidedHighlighting, RedundantAwait
        #endregion // Relate Workflows
    }
}
