// <autogenerated>
// <copyright file="AttributeTypeWorkflow.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Workflow generated to provide base setups</summary>
// <remarks>This file was auto-generated by Workflows.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#nullable enable
// ReSharper disable ConvertToUsingDeclaration, InvertIf, ReturnValueOfPureMethodIsNotUsed, UnusedMember.Local
#pragma warning disable CS0618,CS1711,CS1572,CS1580,CS1581,CS1584
namespace Clarity.Ecommerce.Workflow
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Interfaces.Workflow;
    using Mapper;
    using Utilities;

    /// <summary>A workflow for AttributeType entities.</summary>
    /// <seealso cref="TypableWorkflowBase{IAttributeTypeModel, IAttributeTypeSearchModel, IAttributeType, AttributeType}"/>
    /// <seealso cref="IAttributeTypeWorkflow"/>
    public partial class AttributeTypeWorkflow
        : TypableWorkflowBase<IAttributeTypeModel, IAttributeTypeSearchModel, IAttributeType, AttributeType>
            , IAttributeTypeWorkflow
    {
        #region Mappers
        /// <inheritdoc/>
        protected override Func<AttributeType?, string?, IAttributeTypeModel?> MapFromConcreteFull
            => ModelMapperForAttributeType.MapAttributeTypeModelFromEntityFull;

        /// <inheritdoc/>
        protected override Func<IQueryable<AttributeType>, string?, IEnumerable<IAttributeTypeModel>> SelectLiteAndMapToModel
            => ModelMapperForAttributeType.SelectLiteAttributeTypeAndMapToAttributeTypeModel;

        /// <inheritdoc/>
        protected override Func<IQueryable<AttributeType>, string?, IEnumerable<IAttributeTypeModel>> SelectListAndMapToModel
            => ModelMapperForAttributeType.SelectListAttributeTypeAndMapToAttributeTypeModel;

        /// <inheritdoc/>
        protected override Func<IQueryable<AttributeType>, string?, IAttributeTypeModel?> SelectFirstFullAndMapToModel
            => ModelMapperForAttributeType.SelectFirstFullAttributeTypeAndMapToAttributeTypeModel;

        /// <inheritdoc/>
        protected override Func<IAttributeType, IAttributeTypeModel, DateTime, DateTime?, IAttributeType> UpdateEntityFromModel
            => ModelMapperForAttributeType.UpdateAttributeTypeFromModel;
        #endregion

        /// <inheritdoc/>
        protected override async Task<IQueryable<AttributeType>> FilterQueryByModelExtensionAsync(
            IQueryable<AttributeType> query,
            IAttributeTypeSearchModel search,
            IClarityEcommerceEntities context)
        {
            return (await base.FilterQueryByModelExtensionAsync(query, search, context).ConfigureAwait(false))
                .FilterAttributeTypesBySearchModel(search);
        }

        /// <inheritdoc/>
        protected override async Task RunDefaultAssociateWorkflowsAsync(
            IAttributeType entity,
            IAttributeTypeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            await RunDefaultAssociateWorkflowsAsync(entity, model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        protected override async Task RunDefaultAssociateWorkflowsAsync(
            IAttributeType entity,
            IAttributeTypeModel model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            await Workflows.AssociateJsonAttributes.AssociateObjectsAsync(entity, model, context).ConfigureAwait(false);
            SetDefaultJsonAttributesIfNull(entity);
            // Skipped: Not supposed to map this property in via this manner: GeneralAttributes
        }

        #region Relate Workflows
        /// <inheritdoc/>
        protected override async Task RunDefaultRelateWorkflowsAsync(
            IAttributeType entity,
            IAttributeTypeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            using var context = RegistryLoaderWrapper.GetContext(contextProfileName);
            await RunDefaultRelateWorkflowsAsync(entity, model, timestamp, context).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        // ReSharper disable AsyncConverter.AsyncAwaitMayBeElidedHighlighting, RedundantAwait
#pragma warning disable 1998
        protected override async Task RunDefaultRelateWorkflowsAsync(
#pragma warning restore 1998
            IAttributeType entity,
            IAttributeTypeModel model,
            DateTime timestamp,
            IClarityEcommerceEntities context)
        {
            // None to process
        }
        // ReSharper restore AsyncConverter.AsyncAwaitMayBeElidedHighlighting, RedundantAwait
        #endregion // Relate Workflows
    }
}
